
Magisterka_normal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b74  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003d20  08003d20  00013d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003dfc  08003dfc  00013dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003e04  08003e04  00013e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003e08  08003e08  00013e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08003e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          00000590  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000600  20000600  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000f487  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000240a  00000000  00000000  0002f527  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000dd8  00000000  00000000  00031938  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c98  00000000  00000000  00032710  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00024fbb  00000000  00000000  000333a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000a572  00000000  00000000  00058363  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d8524  00000000  00000000  000628d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0013adf9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003d98  00000000  00000000  0013ae78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003d08 	.word	0x08003d08

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	08003d08 	.word	0x08003d08

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000500:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	4a0b      	ldr	r2, [pc, #44]	; (800053c <HAL_Init+0x40>)
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <HAL_Init+0x40>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 f92d 	bl	8000784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f808 	bl	8000540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000530:	f002 fb74 	bl	8002c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40023c00 	.word	0x40023c00

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x54>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x58>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f1 	udiv	r3, r3, r1
 800055a:	fbb2 f3f3 	udiv	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f937 	bl	80007d2 <HAL_SYSTICK_Config>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e00e      	b.n	800058c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d80a      	bhi.n	800058a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295
 800057c:	f000 f90d 	bl	800079a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <HAL_InitTick+0x5c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000008 	.word	0x20000008
 8000598:	20000004 	.word	0x20000004
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_IncTick+0x24>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000004 	.word	0x20000004
 80005c4:	20000498 	.word	0x20000498

080005c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_GetTick+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000498 	.word	0x20000498

080005e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e8:	f7ff ffee 	bl	80005c8 <HAL_GetTick>
 80005ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f8:	d005      	beq.n	8000606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_Delay+0x40>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000606:	bf00      	nop
 8000608:	f7ff ffde 	bl	80005c8 <HAL_GetTick>
 800060c:	4602      	mov	r2, r0
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	1ad2      	subs	r2, r2, r3
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	429a      	cmp	r2, r3
 8000616:	d3f7      	bcc.n	8000608 <HAL_Delay+0x28>
  {
  }
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000004 	.word	0x20000004

08000624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000640:	4013      	ands	r3, r2
 8000642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	60d3      	str	r3, [r2, #12]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <__NVIC_GetPriorityGrouping+0x18>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	f003 0307 	and.w	r3, r3, #7
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	db0a      	blt.n	80006b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069c:	490d      	ldr	r1, [pc, #52]	; (80006d4 <__NVIC_SetPriority+0x4c>)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	683a      	ldr	r2, [r7, #0]
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	0112      	lsls	r2, r2, #4
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	440b      	add	r3, r1
 80006ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b0:	e00a      	b.n	80006c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	4909      	ldr	r1, [pc, #36]	; (80006d8 <__NVIC_SetPriority+0x50>)
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	f003 030f 	and.w	r3, r3, #15
 80006ba:	3b04      	subs	r3, #4
 80006bc:	683a      	ldr	r2, [r7, #0]
 80006be:	b2d2      	uxtb	r2, r2
 80006c0:	0112      	lsls	r2, r2, #4
 80006c2:	b2d2      	uxtb	r2, r2
 80006c4:	440b      	add	r3, r1
 80006c6:	761a      	strb	r2, [r3, #24]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000e100 	.word	0xe000e100
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	f1c3 0307 	rsb	r3, r3, #7
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	bf28      	it	cs
 80006fa:	2304      	movcs	r3, #4
 80006fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3304      	adds	r3, #4
 8000702:	2b06      	cmp	r3, #6
 8000704:	d902      	bls.n	800070c <NVIC_EncodePriority+0x30>
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3b03      	subs	r3, #3
 800070a:	e000      	b.n	800070e <NVIC_EncodePriority+0x32>
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	2201      	movs	r2, #1
 8000712:	69bb      	ldr	r3, [r7, #24]
 8000714:	fa02 f303 	lsl.w	r3, r2, r3
 8000718:	1e5a      	subs	r2, r3, #1
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	401a      	ands	r2, r3
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000722:	2101      	movs	r1, #1
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	fa01 f303 	lsl.w	r3, r1, r3
 800072a:	1e59      	subs	r1, r3, #1
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	4313      	orrs	r3, r2
         );
}
 8000732:	4618      	mov	r0, r3
 8000734:	3724      	adds	r7, #36	; 0x24
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
	...

08000740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3b01      	subs	r3, #1
 800074c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000750:	d301      	bcc.n	8000756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000752:	2301      	movs	r3, #1
 8000754:	e00f      	b.n	8000776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <SysTick_Config+0x40>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800075e:	210f      	movs	r1, #15
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	f7ff ff90 	bl	8000688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <SysTick_Config+0x40>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <SysTick_Config+0x40>)
 8000770:	2207      	movs	r2, #7
 8000772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	e000e010 	.word	0xe000e010

08000784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff ff49 	bl	8000624 <__NVIC_SetPriorityGrouping>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800079a:	b580      	push	{r7, lr}
 800079c:	b086      	sub	sp, #24
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	60b9      	str	r1, [r7, #8]
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007ac:	f7ff ff5e 	bl	800066c <__NVIC_GetPriorityGrouping>
 80007b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	68b9      	ldr	r1, [r7, #8]
 80007b6:	6978      	ldr	r0, [r7, #20]
 80007b8:	f7ff ff90 	bl	80006dc <NVIC_EncodePriority>
 80007bc:	4602      	mov	r2, r0
 80007be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff5f 	bl	8000688 <__NVIC_SetPriority>
}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff ffb0 	bl	8000740 <SysTick_Config>
 80007e0:	4603      	mov	r3, r0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b089      	sub	sp, #36	; 0x24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
 8000806:	e177      	b.n	8000af8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000808:	2201      	movs	r2, #1
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	4013      	ands	r3, r2
 800081a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	429a      	cmp	r2, r3
 8000822:	f040 8166 	bne.w	8000af2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b02      	cmp	r3, #2
 800082c:	d003      	beq.n	8000836 <HAL_GPIO_Init+0x4a>
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	2b12      	cmp	r3, #18
 8000834:	d123      	bne.n	800087e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	08da      	lsrs	r2, r3, #3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3208      	adds	r2, #8
 800083e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	220f      	movs	r2, #15
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	43db      	mvns	r3, r3
 8000854:	69ba      	ldr	r2, [r7, #24]
 8000856:	4013      	ands	r3, r2
 8000858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	691a      	ldr	r2, [r3, #16]
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	f003 0307 	and.w	r3, r3, #7
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	69ba      	ldr	r2, [r7, #24]
 800086c:	4313      	orrs	r3, r2
 800086e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	08da      	lsrs	r2, r3, #3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3208      	adds	r2, #8
 8000878:	69b9      	ldr	r1, [r7, #24]
 800087a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	2203      	movs	r2, #3
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43db      	mvns	r3, r3
 8000890:	69ba      	ldr	r2, [r7, #24]
 8000892:	4013      	ands	r3, r2
 8000894:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	f003 0203 	and.w	r2, r3, #3
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d00b      	beq.n	80008d2 <HAL_GPIO_Init+0xe6>
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d007      	beq.n	80008d2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c6:	2b11      	cmp	r3, #17
 80008c8:	d003      	beq.n	80008d2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	2b12      	cmp	r3, #18
 80008d0:	d130      	bne.n	8000934 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	2203      	movs	r2, #3
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	43db      	mvns	r3, r3
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	4013      	ands	r3, r2
 80008e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	68da      	ldr	r2, [r3, #12]
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	69ba      	ldr	r2, [r7, #24]
 8000900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000908:	2201      	movs	r2, #1
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4013      	ands	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	091b      	lsrs	r3, r3, #4
 800091e:	f003 0201 	and.w	r2, r3, #1
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	4313      	orrs	r3, r2
 800092c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	2203      	movs	r2, #3
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	43db      	mvns	r3, r3
 8000946:	69ba      	ldr	r2, [r7, #24]
 8000948:	4013      	ands	r3, r2
 800094a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	689a      	ldr	r2, [r3, #8]
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	4313      	orrs	r3, r2
 800095c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096c:	2b00      	cmp	r3, #0
 800096e:	f000 80c0 	beq.w	8000af2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4a65      	ldr	r2, [pc, #404]	; (8000b0c <HAL_GPIO_Init+0x320>)
 8000978:	4b64      	ldr	r3, [pc, #400]	; (8000b0c <HAL_GPIO_Init+0x320>)
 800097a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000980:	6453      	str	r3, [r2, #68]	; 0x44
 8000982:	4b62      	ldr	r3, [pc, #392]	; (8000b0c <HAL_GPIO_Init+0x320>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800098e:	4a60      	ldr	r2, [pc, #384]	; (8000b10 <HAL_GPIO_Init+0x324>)
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	089b      	lsrs	r3, r3, #2
 8000994:	3302      	adds	r3, #2
 8000996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800099a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	f003 0303 	and.w	r3, r3, #3
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	220f      	movs	r2, #15
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	43db      	mvns	r3, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	4013      	ands	r3, r2
 80009b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a57      	ldr	r2, [pc, #348]	; (8000b14 <HAL_GPIO_Init+0x328>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d037      	beq.n	8000a2a <HAL_GPIO_Init+0x23e>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a56      	ldr	r2, [pc, #344]	; (8000b18 <HAL_GPIO_Init+0x32c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d031      	beq.n	8000a26 <HAL_GPIO_Init+0x23a>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a55      	ldr	r2, [pc, #340]	; (8000b1c <HAL_GPIO_Init+0x330>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d02b      	beq.n	8000a22 <HAL_GPIO_Init+0x236>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a54      	ldr	r2, [pc, #336]	; (8000b20 <HAL_GPIO_Init+0x334>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d025      	beq.n	8000a1e <HAL_GPIO_Init+0x232>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a53      	ldr	r2, [pc, #332]	; (8000b24 <HAL_GPIO_Init+0x338>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d01f      	beq.n	8000a1a <HAL_GPIO_Init+0x22e>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a52      	ldr	r2, [pc, #328]	; (8000b28 <HAL_GPIO_Init+0x33c>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d019      	beq.n	8000a16 <HAL_GPIO_Init+0x22a>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a51      	ldr	r2, [pc, #324]	; (8000b2c <HAL_GPIO_Init+0x340>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d013      	beq.n	8000a12 <HAL_GPIO_Init+0x226>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a50      	ldr	r2, [pc, #320]	; (8000b30 <HAL_GPIO_Init+0x344>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d00d      	beq.n	8000a0e <HAL_GPIO_Init+0x222>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4f      	ldr	r2, [pc, #316]	; (8000b34 <HAL_GPIO_Init+0x348>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d007      	beq.n	8000a0a <HAL_GPIO_Init+0x21e>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4e      	ldr	r2, [pc, #312]	; (8000b38 <HAL_GPIO_Init+0x34c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d101      	bne.n	8000a06 <HAL_GPIO_Init+0x21a>
 8000a02:	2309      	movs	r3, #9
 8000a04:	e012      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a06:	230a      	movs	r3, #10
 8000a08:	e010      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	e00e      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a0e:	2307      	movs	r3, #7
 8000a10:	e00c      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a12:	2306      	movs	r3, #6
 8000a14:	e00a      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a16:	2305      	movs	r3, #5
 8000a18:	e008      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	e006      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a1e:	2303      	movs	r3, #3
 8000a20:	e004      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a22:	2302      	movs	r3, #2
 8000a24:	e002      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a26:	2301      	movs	r3, #1
 8000a28:	e000      	b.n	8000a2c <HAL_GPIO_Init+0x240>
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	69fa      	ldr	r2, [r7, #28]
 8000a2e:	f002 0203 	and.w	r2, r2, #3
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	4093      	lsls	r3, r2
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a3c:	4934      	ldr	r1, [pc, #208]	; (8000b10 <HAL_GPIO_Init+0x324>)
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	089b      	lsrs	r3, r3, #2
 8000a42:	3302      	adds	r3, #2
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a4a:	4b3c      	ldr	r3, [pc, #240]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4013      	ands	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a6e:	4a33      	ldr	r2, [pc, #204]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a74:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	4013      	ands	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a98:	4a28      	ldr	r2, [pc, #160]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a9e:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ac2:	4a1e      	ldr	r2, [pc, #120]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000aec:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <HAL_GPIO_Init+0x350>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3301      	adds	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	2b0f      	cmp	r3, #15
 8000afc:	f67f ae84 	bls.w	8000808 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b00:	bf00      	nop
 8000b02:	3724      	adds	r7, #36	; 0x24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40013800 	.word	0x40013800
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	40020800 	.word	0x40020800
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40021400 	.word	0x40021400
 8000b2c:	40021800 	.word	0x40021800
 8000b30:	40021c00 	.word	0x40021c00
 8000b34:	40022000 	.word	0x40022000
 8000b38:	40022400 	.word	0x40022400
 8000b3c:	40013c00 	.word	0x40013c00

08000b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	807b      	strh	r3, [r7, #2]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b50:	787b      	ldrb	r3, [r7, #1]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d003      	beq.n	8000b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b56:	887a      	ldrh	r2, [r7, #2]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b5c:	e003      	b.n	8000b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b5e:	887b      	ldrh	r3, [r7, #2]
 8000b60:	041a      	lsls	r2, r3, #16
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	619a      	str	r2, [r3, #24]
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4a20      	ldr	r2, [pc, #128]	; (8000c04 <HAL_PWREx_EnableOverDrive+0x90>)
 8000b84:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <HAL_PWREx_EnableOverDrive+0x90>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <HAL_PWREx_EnableOverDrive+0x90>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <HAL_PWREx_EnableOverDrive+0x94>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ba0:	f7ff fd12 	bl	80005c8 <HAL_GetTick>
 8000ba4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ba6:	e009      	b.n	8000bbc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ba8:	f7ff fd0e 	bl	80005c8 <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bb6:	d901      	bls.n	8000bbc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e01f      	b.n	8000bfc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <HAL_PWREx_EnableOverDrive+0x98>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc8:	d1ee      	bne.n	8000ba8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bd0:	f7ff fcfa 	bl	80005c8 <HAL_GetTick>
 8000bd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000bd6:	e009      	b.n	8000bec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000bd8:	f7ff fcf6 	bl	80005c8 <HAL_GetTick>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000be6:	d901      	bls.n	8000bec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000be8:	2303      	movs	r3, #3
 8000bea:	e007      	b.n	8000bfc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <HAL_PWREx_EnableOverDrive+0x98>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000bf8:	d1ee      	bne.n	8000bd8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800
 8000c08:	420e0040 	.word	0x420e0040
 8000c0c:	40007000 	.word	0x40007000
 8000c10:	420e0044 	.word	0x420e0044

08000c14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e22d      	b.n	8001082 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d075      	beq.n	8000d1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c32:	4ba3      	ldr	r3, [pc, #652]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f003 030c 	and.w	r3, r3, #12
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	d00c      	beq.n	8000c58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c3e:	4ba0      	ldr	r3, [pc, #640]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c46:	2b08      	cmp	r3, #8
 8000c48:	d112      	bne.n	8000c70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c4a:	4b9d      	ldr	r3, [pc, #628]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c56:	d10b      	bne.n	8000c70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c58:	4b99      	ldr	r3, [pc, #612]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d05b      	beq.n	8000d1c <HAL_RCC_OscConfig+0x108>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d157      	bne.n	8000d1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e208      	b.n	8001082 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c78:	d106      	bne.n	8000c88 <HAL_RCC_OscConfig+0x74>
 8000c7a:	4a91      	ldr	r2, [pc, #580]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000c7c:	4b90      	ldr	r3, [pc, #576]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c84:	6013      	str	r3, [r2, #0]
 8000c86:	e01d      	b.n	8000cc4 <HAL_RCC_OscConfig+0xb0>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c90:	d10c      	bne.n	8000cac <HAL_RCC_OscConfig+0x98>
 8000c92:	4a8b      	ldr	r2, [pc, #556]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000c94:	4b8a      	ldr	r3, [pc, #552]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	4a88      	ldr	r2, [pc, #544]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000ca0:	4b87      	ldr	r3, [pc, #540]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e00b      	b.n	8000cc4 <HAL_RCC_OscConfig+0xb0>
 8000cac:	4a84      	ldr	r2, [pc, #528]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000cae:	4b84      	ldr	r3, [pc, #528]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	4a81      	ldr	r2, [pc, #516]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000cba:	4b81      	ldr	r3, [pc, #516]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d013      	beq.n	8000cf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ccc:	f7ff fc7c 	bl	80005c8 <HAL_GetTick>
 8000cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd2:	e008      	b.n	8000ce6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cd4:	f7ff fc78 	bl	80005c8 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	2b64      	cmp	r3, #100	; 0x64
 8000ce0:	d901      	bls.n	8000ce6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	e1cd      	b.n	8001082 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce6:	4b76      	ldr	r3, [pc, #472]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d0f0      	beq.n	8000cd4 <HAL_RCC_OscConfig+0xc0>
 8000cf2:	e014      	b.n	8000d1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf4:	f7ff fc68 	bl	80005c8 <HAL_GetTick>
 8000cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cfa:	e008      	b.n	8000d0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cfc:	f7ff fc64 	bl	80005c8 <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b64      	cmp	r3, #100	; 0x64
 8000d08:	d901      	bls.n	8000d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e1b9      	b.n	8001082 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d0e:	4b6c      	ldr	r3, [pc, #432]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f0      	bne.n	8000cfc <HAL_RCC_OscConfig+0xe8>
 8000d1a:	e000      	b.n	8000d1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d063      	beq.n	8000df2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d2a:	4b65      	ldr	r3, [pc, #404]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f003 030c 	and.w	r3, r3, #12
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d00b      	beq.n	8000d4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d36:	4b62      	ldr	r3, [pc, #392]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d3e:	2b08      	cmp	r3, #8
 8000d40:	d11c      	bne.n	8000d7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d42:	4b5f      	ldr	r3, [pc, #380]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d116      	bne.n	8000d7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d4e:	4b5c      	ldr	r3, [pc, #368]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d005      	beq.n	8000d66 <HAL_RCC_OscConfig+0x152>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d001      	beq.n	8000d66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e18d      	b.n	8001082 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d66:	4956      	ldr	r1, [pc, #344]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000d68:	4b55      	ldr	r3, [pc, #340]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	691b      	ldr	r3, [r3, #16]
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	4313      	orrs	r3, r2
 8000d78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d7a:	e03a      	b.n	8000df2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d020      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d84:	4b4f      	ldr	r3, [pc, #316]	; (8000ec4 <HAL_RCC_OscConfig+0x2b0>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d8a:	f7ff fc1d 	bl	80005c8 <HAL_GetTick>
 8000d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d90:	e008      	b.n	8000da4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d92:	f7ff fc19 	bl	80005c8 <HAL_GetTick>
 8000d96:	4602      	mov	r2, r0
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d901      	bls.n	8000da4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e16e      	b.n	8001082 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da4:	4b46      	ldr	r3, [pc, #280]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d0f0      	beq.n	8000d92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db0:	4943      	ldr	r1, [pc, #268]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000db2:	4b43      	ldr	r3, [pc, #268]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	600b      	str	r3, [r1, #0]
 8000dc4:	e015      	b.n	8000df2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dc6:	4b3f      	ldr	r3, [pc, #252]	; (8000ec4 <HAL_RCC_OscConfig+0x2b0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fbfc 	bl	80005c8 <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dd4:	f7ff fbf8 	bl	80005c8 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e14d      	b.n	8001082 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000de6:	4b36      	ldr	r3, [pc, #216]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f0      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d030      	beq.n	8000e60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d016      	beq.n	8000e34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e06:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <HAL_RCC_OscConfig+0x2b4>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e0c:	f7ff fbdc 	bl	80005c8 <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e14:	f7ff fbd8 	bl	80005c8 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e12d      	b.n	8001082 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e26:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d0f0      	beq.n	8000e14 <HAL_RCC_OscConfig+0x200>
 8000e32:	e015      	b.n	8000e60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e34:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <HAL_RCC_OscConfig+0x2b4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e3a:	f7ff fbc5 	bl	80005c8 <HAL_GetTick>
 8000e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e40:	e008      	b.n	8000e54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e42:	f7ff fbc1 	bl	80005c8 <HAL_GetTick>
 8000e46:	4602      	mov	r2, r0
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d901      	bls.n	8000e54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e116      	b.n	8001082 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1f0      	bne.n	8000e42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f000 80a0 	beq.w	8000fae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e72:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10f      	bne.n	8000e9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <HAL_RCC_OscConfig+0x2b8>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d121      	bne.n	8000eee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_RCC_OscConfig+0x2b8>)
 8000eac:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <HAL_RCC_OscConfig+0x2b8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eb6:	f7ff fb87 	bl	80005c8 <HAL_GetTick>
 8000eba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ebc:	e011      	b.n	8000ee2 <HAL_RCC_OscConfig+0x2ce>
 8000ebe:	bf00      	nop
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	42470000 	.word	0x42470000
 8000ec8:	42470e80 	.word	0x42470e80
 8000ecc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ed0:	f7ff fb7a 	bl	80005c8 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e0cf      	b.n	8001082 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee2:	4b6a      	ldr	r3, [pc, #424]	; (800108c <HAL_RCC_OscConfig+0x478>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0f0      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d106      	bne.n	8000f04 <HAL_RCC_OscConfig+0x2f0>
 8000ef6:	4a66      	ldr	r2, [pc, #408]	; (8001090 <HAL_RCC_OscConfig+0x47c>)
 8000ef8:	4b65      	ldr	r3, [pc, #404]	; (8001090 <HAL_RCC_OscConfig+0x47c>)
 8000efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6713      	str	r3, [r2, #112]	; 0x70
 8000f02:	e01c      	b.n	8000f3e <HAL_RCC_OscConfig+0x32a>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	2b05      	cmp	r3, #5
 8000f0a:	d10c      	bne.n	8000f26 <HAL_RCC_OscConfig+0x312>
 8000f0c:	4a60      	ldr	r2, [pc, #384]	; (8001090 <HAL_RCC_OscConfig+0x47c>)
 8000f0e:	4b60      	ldr	r3, [pc, #384]	; (8001090 <HAL_RCC_OscConfig+0x47c>)
 8000f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	6713      	str	r3, [r2, #112]	; 0x70
 8000f18:	4a5d      	ldr	r2, [pc, #372]	; (8001090 <HAL_RCC_OscConfig+0x47c>)
 8000f1a:	4b5d      	ldr	r3, [pc, #372]	; (8001090 <HAL_RCC_OscConfig+0x47c>)
 8000f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6713      	str	r3, [r2, #112]	; 0x70
 8000f24:	e00b      	b.n	8000f3e <HAL_RCC_OscConfig+0x32a>
 8000f26:	4a5a      	ldr	r2, [pc, #360]	; (8001090 <HAL_RCC_OscConfig+0x47c>)
 8000f28:	4b59      	ldr	r3, [pc, #356]	; (8001090 <HAL_RCC_OscConfig+0x47c>)
 8000f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f2c:	f023 0301 	bic.w	r3, r3, #1
 8000f30:	6713      	str	r3, [r2, #112]	; 0x70
 8000f32:	4a57      	ldr	r2, [pc, #348]	; (8001090 <HAL_RCC_OscConfig+0x47c>)
 8000f34:	4b56      	ldr	r3, [pc, #344]	; (8001090 <HAL_RCC_OscConfig+0x47c>)
 8000f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f38:	f023 0304 	bic.w	r3, r3, #4
 8000f3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d015      	beq.n	8000f72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f46:	f7ff fb3f 	bl	80005c8 <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f4c:	e00a      	b.n	8000f64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f4e:	f7ff fb3b 	bl	80005c8 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e08e      	b.n	8001082 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f64:	4b4a      	ldr	r3, [pc, #296]	; (8001090 <HAL_RCC_OscConfig+0x47c>)
 8000f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0ee      	beq.n	8000f4e <HAL_RCC_OscConfig+0x33a>
 8000f70:	e014      	b.n	8000f9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f72:	f7ff fb29 	bl	80005c8 <HAL_GetTick>
 8000f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f78:	e00a      	b.n	8000f90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f7a:	f7ff fb25 	bl	80005c8 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e078      	b.n	8001082 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f90:	4b3f      	ldr	r3, [pc, #252]	; (8001090 <HAL_RCC_OscConfig+0x47c>)
 8000f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1ee      	bne.n	8000f7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f9c:	7dfb      	ldrb	r3, [r7, #23]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d105      	bne.n	8000fae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fa2:	4a3b      	ldr	r2, [pc, #236]	; (8001090 <HAL_RCC_OscConfig+0x47c>)
 8000fa4:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <HAL_RCC_OscConfig+0x47c>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d064      	beq.n	8001080 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fb6:	4b36      	ldr	r3, [pc, #216]	; (8001090 <HAL_RCC_OscConfig+0x47c>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	2b08      	cmp	r3, #8
 8000fc0:	d05c      	beq.n	800107c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d141      	bne.n	800104e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fca:	4b32      	ldr	r3, [pc, #200]	; (8001094 <HAL_RCC_OscConfig+0x480>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fafa 	bl	80005c8 <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd8:	f7ff faf6 	bl	80005c8 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e04b      	b.n	8001082 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fea:	4b29      	ldr	r3, [pc, #164]	; (8001090 <HAL_RCC_OscConfig+0x47c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f0      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ff6:	4926      	ldr	r1, [pc, #152]	; (8001090 <HAL_RCC_OscConfig+0x47c>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69da      	ldr	r2, [r3, #28]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	431a      	orrs	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001006:	019b      	lsls	r3, r3, #6
 8001008:	431a      	orrs	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100e:	085b      	lsrs	r3, r3, #1
 8001010:	3b01      	subs	r3, #1
 8001012:	041b      	lsls	r3, r3, #16
 8001014:	431a      	orrs	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101a:	061b      	lsls	r3, r3, #24
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <HAL_RCC_OscConfig+0x480>)
 8001022:	2201      	movs	r2, #1
 8001024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001026:	f7ff facf 	bl	80005c8 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800102e:	f7ff facb 	bl	80005c8 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e020      	b.n	8001082 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <HAL_RCC_OscConfig+0x47c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x41a>
 800104c:	e018      	b.n	8001080 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_RCC_OscConfig+0x480>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fab8 	bl	80005c8 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800105c:	f7ff fab4 	bl	80005c8 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e009      	b.n	8001082 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_RCC_OscConfig+0x47c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f0      	bne.n	800105c <HAL_RCC_OscConfig+0x448>
 800107a:	e001      	b.n	8001080 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e000      	b.n	8001082 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40007000 	.word	0x40007000
 8001090:	40023800 	.word	0x40023800
 8001094:	42470060 	.word	0x42470060

08001098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e0ca      	b.n	8001242 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010ac:	4b67      	ldr	r3, [pc, #412]	; (800124c <HAL_RCC_ClockConfig+0x1b4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 020f 	and.w	r2, r3, #15
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d20c      	bcs.n	80010d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ba:	4b64      	ldr	r3, [pc, #400]	; (800124c <HAL_RCC_ClockConfig+0x1b4>)
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010c2:	4b62      	ldr	r3, [pc, #392]	; (800124c <HAL_RCC_ClockConfig+0x1b4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 020f 	and.w	r2, r3, #15
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d001      	beq.n	80010d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e0b6      	b.n	8001242 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d020      	beq.n	8001122 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d005      	beq.n	80010f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010ec:	4a58      	ldr	r2, [pc, #352]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 80010ee:	4b58      	ldr	r3, [pc, #352]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001104:	4a52      	ldr	r2, [pc, #328]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 8001106:	4b52      	ldr	r3, [pc, #328]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800110e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001110:	494f      	ldr	r1, [pc, #316]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 8001112:	4b4f      	ldr	r3, [pc, #316]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	4313      	orrs	r3, r2
 8001120:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d044      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d107      	bne.n	8001146 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001136:	4b46      	ldr	r3, [pc, #280]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d119      	bne.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e07d      	b.n	8001242 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d003      	beq.n	8001156 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001152:	2b03      	cmp	r3, #3
 8001154:	d107      	bne.n	8001166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001156:	4b3e      	ldr	r3, [pc, #248]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d109      	bne.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e06d      	b.n	8001242 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001166:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e065      	b.n	8001242 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001176:	4936      	ldr	r1, [pc, #216]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 8001178:	4b35      	ldr	r3, [pc, #212]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f023 0203 	bic.w	r2, r3, #3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	4313      	orrs	r3, r2
 8001186:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001188:	f7ff fa1e 	bl	80005c8 <HAL_GetTick>
 800118c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118e:	e00a      	b.n	80011a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001190:	f7ff fa1a 	bl	80005c8 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	f241 3288 	movw	r2, #5000	; 0x1388
 800119e:	4293      	cmp	r3, r2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e04d      	b.n	8001242 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a6:	4b2a      	ldr	r3, [pc, #168]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 020c 	and.w	r2, r3, #12
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d1eb      	bne.n	8001190 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011b8:	4b24      	ldr	r3, [pc, #144]	; (800124c <HAL_RCC_ClockConfig+0x1b4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 020f 	and.w	r2, r3, #15
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d90c      	bls.n	80011e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <HAL_RCC_ClockConfig+0x1b4>)
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <HAL_RCC_ClockConfig+0x1b4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 020f 	and.w	r2, r3, #15
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d001      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e030      	b.n	8001242 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d008      	beq.n	80011fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011ec:	4918      	ldr	r1, [pc, #96]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	2b00      	cmp	r3, #0
 8001208:	d009      	beq.n	800121e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800120a:	4911      	ldr	r1, [pc, #68]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4313      	orrs	r3, r2
 800121c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800121e:	f000 f81d 	bl	800125c <HAL_RCC_GetSysClockFreq>
 8001222:	4601      	mov	r1, r0
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_RCC_ClockConfig+0x1b8>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <HAL_RCC_ClockConfig+0x1bc>)
 8001230:	5cd3      	ldrb	r3, [r2, r3]
 8001232:	fa21 f303 	lsr.w	r3, r1, r3
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 8001238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff f980 	bl	8000540 <HAL_InitTick>

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023c00 	.word	0x40023c00
 8001250:	40023800 	.word	0x40023800
 8001254:	08003d88 	.word	0x08003d88
 8001258:	20000008 	.word	0x20000008

0800125c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800125c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001260:	b087      	sub	sp, #28
 8001262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001264:	2200      	movs	r2, #0
 8001266:	60fa      	str	r2, [r7, #12]
 8001268:	2200      	movs	r2, #0
 800126a:	617a      	str	r2, [r7, #20]
 800126c:	2200      	movs	r2, #0
 800126e:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8001270:	2200      	movs	r2, #0
 8001272:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001274:	4a51      	ldr	r2, [pc, #324]	; (80013bc <HAL_RCC_GetSysClockFreq+0x160>)
 8001276:	6892      	ldr	r2, [r2, #8]
 8001278:	f002 020c 	and.w	r2, r2, #12
 800127c:	2a04      	cmp	r2, #4
 800127e:	d007      	beq.n	8001290 <HAL_RCC_GetSysClockFreq+0x34>
 8001280:	2a08      	cmp	r2, #8
 8001282:	d008      	beq.n	8001296 <HAL_RCC_GetSysClockFreq+0x3a>
 8001284:	2a00      	cmp	r2, #0
 8001286:	f040 8090 	bne.w	80013aa <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800128a:	4b4d      	ldr	r3, [pc, #308]	; (80013c0 <HAL_RCC_GetSysClockFreq+0x164>)
 800128c:	613b      	str	r3, [r7, #16]
       break;
 800128e:	e08f      	b.n	80013b0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001290:	4b4c      	ldr	r3, [pc, #304]	; (80013c4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001292:	613b      	str	r3, [r7, #16]
      break;
 8001294:	e08c      	b.n	80013b0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001296:	4a49      	ldr	r2, [pc, #292]	; (80013bc <HAL_RCC_GetSysClockFreq+0x160>)
 8001298:	6852      	ldr	r2, [r2, #4]
 800129a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800129e:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012a0:	4a46      	ldr	r2, [pc, #280]	; (80013bc <HAL_RCC_GetSysClockFreq+0x160>)
 80012a2:	6852      	ldr	r2, [r2, #4]
 80012a4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80012a8:	2a00      	cmp	r2, #0
 80012aa:	d023      	beq.n	80012f4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ac:	4b43      	ldr	r3, [pc, #268]	; (80013bc <HAL_RCC_GetSysClockFreq+0x160>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	099b      	lsrs	r3, r3, #6
 80012b2:	f04f 0400 	mov.w	r4, #0
 80012b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	ea03 0301 	and.w	r3, r3, r1
 80012c2:	ea04 0402 	and.w	r4, r4, r2
 80012c6:	4a3f      	ldr	r2, [pc, #252]	; (80013c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80012c8:	fb02 f104 	mul.w	r1, r2, r4
 80012cc:	2200      	movs	r2, #0
 80012ce:	fb02 f203 	mul.w	r2, r2, r3
 80012d2:	440a      	add	r2, r1
 80012d4:	493b      	ldr	r1, [pc, #236]	; (80013c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80012d6:	fba3 0101 	umull	r0, r1, r3, r1
 80012da:	1853      	adds	r3, r2, r1
 80012dc:	4619      	mov	r1, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f04f 0400 	mov.w	r4, #0
 80012e4:	461a      	mov	r2, r3
 80012e6:	4623      	mov	r3, r4
 80012e8:	f7fe ff80 	bl	80001ec <__aeabi_uldivmod>
 80012ec:	4603      	mov	r3, r0
 80012ee:	460c      	mov	r4, r1
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	e04c      	b.n	800138e <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012f4:	4a31      	ldr	r2, [pc, #196]	; (80013bc <HAL_RCC_GetSysClockFreq+0x160>)
 80012f6:	6852      	ldr	r2, [r2, #4]
 80012f8:	0992      	lsrs	r2, r2, #6
 80012fa:	4611      	mov	r1, r2
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	f240 15ff 	movw	r5, #511	; 0x1ff
 8001304:	f04f 0600 	mov.w	r6, #0
 8001308:	ea05 0501 	and.w	r5, r5, r1
 800130c:	ea06 0602 	and.w	r6, r6, r2
 8001310:	4629      	mov	r1, r5
 8001312:	4632      	mov	r2, r6
 8001314:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8001318:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 800131c:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8001320:	4651      	mov	r1, sl
 8001322:	465a      	mov	r2, fp
 8001324:	46aa      	mov	sl, r5
 8001326:	46b3      	mov	fp, r6
 8001328:	4655      	mov	r5, sl
 800132a:	465e      	mov	r6, fp
 800132c:	1b4d      	subs	r5, r1, r5
 800132e:	eb62 0606 	sbc.w	r6, r2, r6
 8001332:	4629      	mov	r1, r5
 8001334:	4632      	mov	r2, r6
 8001336:	0194      	lsls	r4, r2, #6
 8001338:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800133c:	018b      	lsls	r3, r1, #6
 800133e:	1a5b      	subs	r3, r3, r1
 8001340:	eb64 0402 	sbc.w	r4, r4, r2
 8001344:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8001348:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 800134c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8001350:	4643      	mov	r3, r8
 8001352:	464c      	mov	r4, r9
 8001354:	4655      	mov	r5, sl
 8001356:	465e      	mov	r6, fp
 8001358:	18ed      	adds	r5, r5, r3
 800135a:	eb46 0604 	adc.w	r6, r6, r4
 800135e:	462b      	mov	r3, r5
 8001360:	4634      	mov	r4, r6
 8001362:	02a2      	lsls	r2, r4, #10
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	029b      	lsls	r3, r3, #10
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	e897 0018 	ldmia.w	r7, {r3, r4}
 8001376:	4618      	mov	r0, r3
 8001378:	4621      	mov	r1, r4
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f04f 0400 	mov.w	r4, #0
 8001380:	461a      	mov	r2, r3
 8001382:	4623      	mov	r3, r4
 8001384:	f7fe ff32 	bl	80001ec <__aeabi_uldivmod>
 8001388:	4603      	mov	r3, r0
 800138a:	460c      	mov	r4, r1
 800138c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_RCC_GetSysClockFreq+0x160>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	0c1b      	lsrs	r3, r3, #16
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	3301      	adds	r3, #1
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a6:	613b      	str	r3, [r7, #16]
      break;
 80013a8:	e002      	b.n	80013b0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_RCC_GetSysClockFreq+0x164>)
 80013ac:	613b      	str	r3, [r7, #16]
      break;
 80013ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013b0:	693b      	ldr	r3, [r7, #16]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	371c      	adds	r7, #28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	00f42400 	.word	0x00f42400
 80013c4:	017d7840 	.word	0x017d7840

080013c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e055      	b.n	8001486 <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d106      	bne.n	80013fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f001 fbc9 	bl	8002b8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2202      	movs	r2, #2
 80013fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001410:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6851      	ldr	r1, [r2, #4]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6892      	ldr	r2, [r2, #8]
 800141e:	4311      	orrs	r1, r2
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	68d2      	ldr	r2, [r2, #12]
 8001424:	4311      	orrs	r1, r2
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6912      	ldr	r2, [r2, #16]
 800142a:	4311      	orrs	r1, r2
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6952      	ldr	r2, [r2, #20]
 8001430:	4311      	orrs	r1, r2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6992      	ldr	r2, [r2, #24]
 8001436:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800143a:	4311      	orrs	r1, r2
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	69d2      	ldr	r2, [r2, #28]
 8001440:	4311      	orrs	r1, r2
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6a12      	ldr	r2, [r2, #32]
 8001446:	4311      	orrs	r1, r2
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800144c:	430a      	orrs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6992      	ldr	r2, [r2, #24]
 8001458:	0c12      	lsrs	r2, r2, #16
 800145a:	f002 0104 	and.w	r1, r2, #4
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001462:	430a      	orrs	r2, r1
 8001464:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	69d2      	ldr	r2, [r2, #28]
 8001470:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001474:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b088      	sub	sp, #32
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	4613      	mov	r3, r2
 800149c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_SPI_Transmit+0x22>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e11c      	b.n	80016ea <HAL_SPI_Transmit+0x25c>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80014b8:	f7ff f886 	bl	80005c8 <HAL_GetTick>
 80014bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d002      	beq.n	80014d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80014ce:	2302      	movs	r3, #2
 80014d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80014d2:	e101      	b.n	80016d8 <HAL_SPI_Transmit+0x24a>
  }

  if ((pData == NULL) || (Size == 0U))
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <HAL_SPI_Transmit+0x52>
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80014e4:	e0f8      	b.n	80016d8 <HAL_SPI_Transmit+0x24a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2203      	movs	r2, #3
 80014ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2200      	movs	r2, #0
 80014f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	88fa      	ldrh	r2, [r7, #6]
 80014fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	88fa      	ldrh	r2, [r7, #6]
 8001504:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800152c:	d107      	bne.n	800153e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800153c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001548:	2b40      	cmp	r3, #64	; 0x40
 800154a:	d007      	beq.n	800155c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800155a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001564:	d14b      	bne.n	80015fe <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <HAL_SPI_Transmit+0xe6>
 800156e:	8afb      	ldrh	r3, [r7, #22]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d13e      	bne.n	80015f2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800157c:	8812      	ldrh	r2, [r2, #0]
 800157e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	1c9a      	adds	r2, r3, #2
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800158e:	b29b      	uxth	r3, r3
 8001590:	3b01      	subs	r3, #1
 8001592:	b29a      	uxth	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001598:	e02b      	b.n	80015f2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d112      	bne.n	80015ce <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015b0:	8812      	ldrh	r2, [r2, #0]
 80015b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	1c9a      	adds	r2, r3, #2
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	3b01      	subs	r3, #1
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80015cc:	e011      	b.n	80015f2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80015ce:	f7fe fffb 	bl	80005c8 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	1ad2      	subs	r2, r2, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d303      	bcc.n	80015e6 <HAL_SPI_Transmit+0x158>
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e4:	d102      	bne.n	80015ec <HAL_SPI_Transmit+0x15e>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d102      	bne.n	80015f2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80015f0:	e072      	b.n	80016d8 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1ce      	bne.n	800159a <HAL_SPI_Transmit+0x10c>
 80015fc:	e04c      	b.n	8001698 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d002      	beq.n	800160c <HAL_SPI_Transmit+0x17e>
 8001606:	8afb      	ldrh	r3, [r7, #22]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d140      	bne.n	800168e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	330c      	adds	r3, #12
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001616:	7812      	ldrb	r2, [r2, #0]
 8001618:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001628:	b29b      	uxth	r3, r3
 800162a:	3b01      	subs	r3, #1
 800162c:	b29a      	uxth	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001632:	e02c      	b.n	800168e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b02      	cmp	r3, #2
 8001640:	d113      	bne.n	800166a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	330c      	adds	r3, #12
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800164c:	7812      	ldrb	r2, [r2, #0]
 800164e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800165e:	b29b      	uxth	r3, r3
 8001660:	3b01      	subs	r3, #1
 8001662:	b29a      	uxth	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	86da      	strh	r2, [r3, #54]	; 0x36
 8001668:	e011      	b.n	800168e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800166a:	f7fe ffad 	bl	80005c8 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	1ad2      	subs	r2, r2, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d303      	bcc.n	8001682 <HAL_SPI_Transmit+0x1f4>
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001680:	d102      	bne.n	8001688 <HAL_SPI_Transmit+0x1fa>
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800168c:	e024      	b.n	80016d8 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001692:	b29b      	uxth	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1cd      	bne.n	8001634 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	6839      	ldr	r1, [r7, #0]
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 f892 	bl	80017c6 <SPI_EndRxTxTransaction>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d002      	beq.n	80016ae <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2220      	movs	r2, #32
 80016ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10a      	bne.n	80016cc <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_SPI_Transmit+0x24a>
  {
    errorcode = HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80016e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3720      	adds	r7, #32
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	603b      	str	r3, [r7, #0]
 80016fe:	4613      	mov	r3, r2
 8001700:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001702:	e04c      	b.n	800179e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170a:	d048      	beq.n	800179e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800170c:	f7fe ff5c 	bl	80005c8 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	1ad2      	subs	r2, r2, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d202      	bcs.n	8001722 <SPI_WaitFlagStateUntilTimeout+0x30>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d13d      	bne.n	800179e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	6812      	ldr	r2, [r2, #0]
 800172a:	6852      	ldr	r2, [r2, #4]
 800172c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001730:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800173a:	d111      	bne.n	8001760 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001744:	d004      	beq.n	8001750 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800174e:	d107      	bne.n	8001760 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800175e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001768:	d10f      	bne.n	800178a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001788:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e00f      	b.n	80017be <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	401a      	ands	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	bf0c      	ite	eq
 80017ae:	2301      	moveq	r3, #1
 80017b0:	2300      	movne	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d1a3      	bne.n	8001704 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b086      	sub	sp, #24
 80017ca:	af02      	add	r7, sp, #8
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2200      	movs	r2, #0
 80017da:	2180      	movs	r1, #128	; 0x80
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f7ff ff88 	bl	80016f2 <SPI_WaitFlagStateUntilTimeout>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d007      	beq.n	80017f8 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ec:	f043 0220 	orr.w	r2, r3, #32
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e000      	b.n	80017fa <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e01d      	b.n	8001850 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	d106      	bne.n	800182e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f001 fd09 	bl	8003240 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2202      	movs	r2, #2
 8001832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3304      	adds	r3, #4
 800183e:	4619      	mov	r1, r3
 8001840:	4610      	mov	r0, r2
 8001842:	f000 fa0d 	bl	8001c60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e01d      	b.n	80018a6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d106      	bne.n	8001884 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f815 	bl	80018ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2202      	movs	r2, #2
 8001888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3304      	adds	r3, #4
 8001894:	4619      	mov	r1, r3
 8001896:	4610      	mov	r0, r2
 8001898:	f000 f9e2 	bl	8001c60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2201      	movs	r2, #1
 80018d4:	6839      	ldr	r1, [r7, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 fc12 	bl	8002100 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a15      	ldr	r2, [pc, #84]	; (8001938 <HAL_TIM_PWM_Start+0x74>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d004      	beq.n	80018f0 <HAL_TIM_PWM_Start+0x2c>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a14      	ldr	r2, [pc, #80]	; (800193c <HAL_TIM_PWM_Start+0x78>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d101      	bne.n	80018f4 <HAL_TIM_PWM_Start+0x30>
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <HAL_TIM_PWM_Start+0x32>
 80018f4:	2300      	movs	r3, #0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d007      	beq.n	800190a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001904:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001908:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2b06      	cmp	r3, #6
 800191a:	d007      	beq.n	800192c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6812      	ldr	r2, [r2, #0]
 8001924:	6812      	ldr	r2, [r2, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40010000 	.word	0x40010000
 800193c:	40010400 	.word	0x40010400

08001940 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e083      	b.n	8001a5c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d106      	bne.n	800196e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f001 fbeb 	bl	8003144 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2202      	movs	r2, #2
 8001972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001984:	f023 0307 	bic.w	r3, r3, #7
 8001988:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3304      	adds	r3, #4
 8001992:	4619      	mov	r1, r3
 8001994:	4610      	mov	r0, r2
 8001996:	f000 f963 	bl	8001c60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019c2:	f023 0303 	bic.w	r3, r3, #3
 80019c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	4313      	orrs	r3, r2
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80019e0:	f023 030c 	bic.w	r3, r3, #12
 80019e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80019ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	4313      	orrs	r3, r2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	011a      	lsls	r2, r3, #4
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	031b      	lsls	r3, r3, #12
 8001a10:	4313      	orrs	r3, r2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001a1e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8001a26:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	4313      	orrs	r3, r2
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <HAL_TIM_Encoder_Start+0x16>
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d008      	beq.n	8001a8a <HAL_TIM_Encoder_Start+0x26>
 8001a78:	e00f      	b.n	8001a9a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 fb3c 	bl	8002100 <TIM_CCxChannelCmd>
      break;
 8001a88:	e016      	b.n	8001ab8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	2104      	movs	r1, #4
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 fb34 	bl	8002100 <TIM_CCxChannelCmd>
      break;
 8001a98:	e00e      	b.n	8001ab8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 fb2c 	bl	8002100 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2201      	movs	r2, #1
 8001aae:	2104      	movs	r1, #4
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 fb25 	bl	8002100 <TIM_CCxChannelCmd>
      break;
 8001ab6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e0b4      	b.n	8001c58 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2202      	movs	r2, #2
 8001afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b0c      	cmp	r3, #12
 8001b02:	f200 809f 	bhi.w	8001c44 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001b06:	a201      	add	r2, pc, #4	; (adr r2, 8001b0c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0c:	08001b41 	.word	0x08001b41
 8001b10:	08001c45 	.word	0x08001c45
 8001b14:	08001c45 	.word	0x08001c45
 8001b18:	08001c45 	.word	0x08001c45
 8001b1c:	08001b81 	.word	0x08001b81
 8001b20:	08001c45 	.word	0x08001c45
 8001b24:	08001c45 	.word	0x08001c45
 8001b28:	08001c45 	.word	0x08001c45
 8001b2c:	08001bc3 	.word	0x08001bc3
 8001b30:	08001c45 	.word	0x08001c45
 8001b34:	08001c45 	.word	0x08001c45
 8001b38:	08001c45 	.word	0x08001c45
 8001b3c:	08001c03 	.word	0x08001c03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f92a 	bl	8001da0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	6992      	ldr	r2, [r2, #24]
 8001b56:	f042 0208 	orr.w	r2, r2, #8
 8001b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	6992      	ldr	r2, [r2, #24]
 8001b66:	f022 0204 	bic.w	r2, r2, #4
 8001b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	6991      	ldr	r1, [r2, #24]
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	6912      	ldr	r2, [r2, #16]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	619a      	str	r2, [r3, #24]
      break;
 8001b7e:	e062      	b.n	8001c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f97a 	bl	8001e80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	6992      	ldr	r2, [r2, #24]
 8001b96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	6992      	ldr	r2, [r2, #24]
 8001ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	6991      	ldr	r1, [r2, #24]
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	6912      	ldr	r2, [r2, #16]
 8001bba:	0212      	lsls	r2, r2, #8
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	619a      	str	r2, [r3, #24]
      break;
 8001bc0:	e041      	b.n	8001c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 f9cf 	bl	8001f6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	69d2      	ldr	r2, [r2, #28]
 8001bd8:	f042 0208 	orr.w	r2, r2, #8
 8001bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	69d2      	ldr	r2, [r2, #28]
 8001be8:	f022 0204 	bic.w	r2, r2, #4
 8001bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	69d1      	ldr	r1, [r2, #28]
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	6912      	ldr	r2, [r2, #16]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	61da      	str	r2, [r3, #28]
      break;
 8001c00:	e021      	b.n	8001c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68b9      	ldr	r1, [r7, #8]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 fa23 	bl	8002054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	69d2      	ldr	r2, [r2, #28]
 8001c18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	69d2      	ldr	r2, [r2, #28]
 8001c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	69d1      	ldr	r1, [r2, #28]
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	6912      	ldr	r2, [r2, #16]
 8001c3c:	0212      	lsls	r2, r2, #8
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	61da      	str	r2, [r3, #28]
      break;
 8001c42:	e000      	b.n	8001c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001c44:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a40      	ldr	r2, [pc, #256]	; (8001d74 <TIM_Base_SetConfig+0x114>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d013      	beq.n	8001ca0 <TIM_Base_SetConfig+0x40>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7e:	d00f      	beq.n	8001ca0 <TIM_Base_SetConfig+0x40>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a3d      	ldr	r2, [pc, #244]	; (8001d78 <TIM_Base_SetConfig+0x118>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d00b      	beq.n	8001ca0 <TIM_Base_SetConfig+0x40>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a3c      	ldr	r2, [pc, #240]	; (8001d7c <TIM_Base_SetConfig+0x11c>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d007      	beq.n	8001ca0 <TIM_Base_SetConfig+0x40>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a3b      	ldr	r2, [pc, #236]	; (8001d80 <TIM_Base_SetConfig+0x120>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d003      	beq.n	8001ca0 <TIM_Base_SetConfig+0x40>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a3a      	ldr	r2, [pc, #232]	; (8001d84 <TIM_Base_SetConfig+0x124>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d108      	bne.n	8001cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a2f      	ldr	r2, [pc, #188]	; (8001d74 <TIM_Base_SetConfig+0x114>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d02b      	beq.n	8001d12 <TIM_Base_SetConfig+0xb2>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc0:	d027      	beq.n	8001d12 <TIM_Base_SetConfig+0xb2>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a2c      	ldr	r2, [pc, #176]	; (8001d78 <TIM_Base_SetConfig+0x118>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d023      	beq.n	8001d12 <TIM_Base_SetConfig+0xb2>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a2b      	ldr	r2, [pc, #172]	; (8001d7c <TIM_Base_SetConfig+0x11c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d01f      	beq.n	8001d12 <TIM_Base_SetConfig+0xb2>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a2a      	ldr	r2, [pc, #168]	; (8001d80 <TIM_Base_SetConfig+0x120>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d01b      	beq.n	8001d12 <TIM_Base_SetConfig+0xb2>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a29      	ldr	r2, [pc, #164]	; (8001d84 <TIM_Base_SetConfig+0x124>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d017      	beq.n	8001d12 <TIM_Base_SetConfig+0xb2>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a28      	ldr	r2, [pc, #160]	; (8001d88 <TIM_Base_SetConfig+0x128>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <TIM_Base_SetConfig+0xb2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a27      	ldr	r2, [pc, #156]	; (8001d8c <TIM_Base_SetConfig+0x12c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00f      	beq.n	8001d12 <TIM_Base_SetConfig+0xb2>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a26      	ldr	r2, [pc, #152]	; (8001d90 <TIM_Base_SetConfig+0x130>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00b      	beq.n	8001d12 <TIM_Base_SetConfig+0xb2>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a25      	ldr	r2, [pc, #148]	; (8001d94 <TIM_Base_SetConfig+0x134>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d007      	beq.n	8001d12 <TIM_Base_SetConfig+0xb2>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a24      	ldr	r2, [pc, #144]	; (8001d98 <TIM_Base_SetConfig+0x138>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d003      	beq.n	8001d12 <TIM_Base_SetConfig+0xb2>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a23      	ldr	r2, [pc, #140]	; (8001d9c <TIM_Base_SetConfig+0x13c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d108      	bne.n	8001d24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <TIM_Base_SetConfig+0x114>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d003      	beq.n	8001d58 <TIM_Base_SetConfig+0xf8>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a0c      	ldr	r2, [pc, #48]	; (8001d84 <TIM_Base_SetConfig+0x124>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d103      	bne.n	8001d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	615a      	str	r2, [r3, #20]
}
 8001d66:	bf00      	nop
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40010000 	.word	0x40010000
 8001d78:	40000400 	.word	0x40000400
 8001d7c:	40000800 	.word	0x40000800
 8001d80:	40000c00 	.word	0x40000c00
 8001d84:	40010400 	.word	0x40010400
 8001d88:	40014000 	.word	0x40014000
 8001d8c:	40014400 	.word	0x40014400
 8001d90:	40014800 	.word	0x40014800
 8001d94:	40001800 	.word	0x40001800
 8001d98:	40001c00 	.word	0x40001c00
 8001d9c:	40002000 	.word	0x40002000

08001da0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	f023 0201 	bic.w	r2, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f023 0303 	bic.w	r3, r3, #3
 8001dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f023 0302 	bic.w	r3, r3, #2
 8001de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a20      	ldr	r2, [pc, #128]	; (8001e78 <TIM_OC1_SetConfig+0xd8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d003      	beq.n	8001e04 <TIM_OC1_SetConfig+0x64>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <TIM_OC1_SetConfig+0xdc>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d10c      	bne.n	8001e1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f023 0308 	bic.w	r3, r3, #8
 8001e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f023 0304 	bic.w	r3, r3, #4
 8001e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a15      	ldr	r2, [pc, #84]	; (8001e78 <TIM_OC1_SetConfig+0xd8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d003      	beq.n	8001e2e <TIM_OC1_SetConfig+0x8e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a14      	ldr	r2, [pc, #80]	; (8001e7c <TIM_OC1_SetConfig+0xdc>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d111      	bne.n	8001e52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	621a      	str	r2, [r3, #32]
}
 8001e6c:	bf00      	nop
 8001e6e:	371c      	adds	r7, #28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	40010400 	.word	0x40010400

08001e80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	f023 0210 	bic.w	r2, r3, #16
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	021b      	lsls	r3, r3, #8
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f023 0320 	bic.w	r3, r3, #32
 8001eca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a22      	ldr	r2, [pc, #136]	; (8001f64 <TIM_OC2_SetConfig+0xe4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d003      	beq.n	8001ee8 <TIM_OC2_SetConfig+0x68>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a21      	ldr	r2, [pc, #132]	; (8001f68 <TIM_OC2_SetConfig+0xe8>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d10d      	bne.n	8001f04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <TIM_OC2_SetConfig+0xe4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d003      	beq.n	8001f14 <TIM_OC2_SetConfig+0x94>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a16      	ldr	r2, [pc, #88]	; (8001f68 <TIM_OC2_SetConfig+0xe8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d113      	bne.n	8001f3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	621a      	str	r2, [r3, #32]
}
 8001f56:	bf00      	nop
 8001f58:	371c      	adds	r7, #28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40010000 	.word	0x40010000
 8001f68:	40010400 	.word	0x40010400

08001f6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f023 0303 	bic.w	r3, r3, #3
 8001fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	021b      	lsls	r3, r3, #8
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a21      	ldr	r2, [pc, #132]	; (800204c <TIM_OC3_SetConfig+0xe0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d003      	beq.n	8001fd2 <TIM_OC3_SetConfig+0x66>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a20      	ldr	r2, [pc, #128]	; (8002050 <TIM_OC3_SetConfig+0xe4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d10d      	bne.n	8001fee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	021b      	lsls	r3, r3, #8
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a16      	ldr	r2, [pc, #88]	; (800204c <TIM_OC3_SetConfig+0xe0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d003      	beq.n	8001ffe <TIM_OC3_SetConfig+0x92>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a15      	ldr	r2, [pc, #84]	; (8002050 <TIM_OC3_SetConfig+0xe4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d113      	bne.n	8002026 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800200c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	621a      	str	r2, [r3, #32]
}
 8002040:	bf00      	nop
 8002042:	371c      	adds	r7, #28
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	40010000 	.word	0x40010000
 8002050:	40010400 	.word	0x40010400

08002054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002054:	b480      	push	{r7}
 8002056:	b087      	sub	sp, #28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800208a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4313      	orrs	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800209e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	031b      	lsls	r3, r3, #12
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <TIM_OC4_SetConfig+0xa4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d003      	beq.n	80020bc <TIM_OC4_SetConfig+0x68>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a11      	ldr	r2, [pc, #68]	; (80020fc <TIM_OC4_SetConfig+0xa8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d109      	bne.n	80020d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	019b      	lsls	r3, r3, #6
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	621a      	str	r2, [r3, #32]
}
 80020ea:	bf00      	nop
 80020ec:	371c      	adds	r7, #28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40010000 	.word	0x40010000
 80020fc:	40010400 	.word	0x40010400

08002100 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 031f 	and.w	r3, r3, #31
 8002112:	2201      	movs	r2, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a1a      	ldr	r2, [r3, #32]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	43db      	mvns	r3, r3
 8002122:	401a      	ands	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a1a      	ldr	r2, [r3, #32]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	431a      	orrs	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	621a      	str	r2, [r3, #32]
}
 800213e:	bf00      	nop
 8002140:	371c      	adds	r7, #28
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800214a:	b480      	push	{r7}
 800214c:	b085      	sub	sp, #20
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800215e:	2302      	movs	r3, #2
 8002160:	e032      	b.n	80021c8 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2202      	movs	r2, #2
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002188:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4313      	orrs	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800219a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <vMotor_init>:
		return 0;
}

void vMotor_init(Motor_InitTypeDef* Motor_InitStruct1,
		Motor_InitTypeDef* Motor_InitStruct2)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
	Motor_InitStruct1->Motor_GPIO_int1 = Motor_GPIO_pin1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a1c      	ldr	r2, [pc, #112]	; (8002254 <vMotor_init+0x80>)
 80021e2:	609a      	str	r2, [r3, #8]
	Motor_InitStruct1->Motor_GPIO_int2 = Motor_GPIO_pin2;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a1b      	ldr	r2, [pc, #108]	; (8002254 <vMotor_init+0x80>)
 80021e8:	611a      	str	r2, [r3, #16]
	Motor_InitStruct1->Motor_Pin_int1 = Motor_Pin1;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021f0:	819a      	strh	r2, [r3, #12]
	Motor_InitStruct1->Motor_Pin_int2 = Motor_Pin2;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021f8:	829a      	strh	r2, [r3, #20]
	Motor_InitStruct1->number_turns = 0;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	61da      	str	r2, [r3, #28]
	Motor_InitStruct1->speed = 0;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	759a      	strb	r2, [r3, #22]
	Motor_InitStruct1->Tim_Encoder = Motor1_Tim;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a13      	ldr	r2, [pc, #76]	; (8002258 <vMotor_init+0x84>)
 800220a:	601a      	str	r2, [r3, #0]
	Motor_InitStruct1->Tim_PWM = Motor1_PWM;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a13      	ldr	r2, [pc, #76]	; (800225c <vMotor_init+0x88>)
 8002210:	605a      	str	r2, [r3, #4]

	Motor_InitStruct2->Motor_GPIO_int1 = Motor_GPIO_pin3;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	4a0f      	ldr	r2, [pc, #60]	; (8002254 <vMotor_init+0x80>)
 8002216:	609a      	str	r2, [r3, #8]
	Motor_InitStruct2->Motor_GPIO_int2 = Motor_GPIO_pin4;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <vMotor_init+0x80>)
 800221c:	611a      	str	r2, [r3, #16]
	Motor_InitStruct2->Motor_Pin_int1 = Motor_Pin3;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002224:	819a      	strh	r2, [r3, #12]
	Motor_InitStruct2->Motor_Pin_int2 = Motor_Pin4;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800222c:	829a      	strh	r2, [r3, #20]
	Motor_InitStruct2->number_turns = 0;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2200      	movs	r2, #0
 8002232:	61da      	str	r2, [r3, #28]
	Motor_InitStruct2->speed = 0;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2200      	movs	r2, #0
 8002238:	759a      	strb	r2, [r3, #22]
	Motor_InitStruct2->Tim_Encoder = Motor2_Tim;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	4a08      	ldr	r2, [pc, #32]	; (8002260 <vMotor_init+0x8c>)
 800223e:	601a      	str	r2, [r3, #0]
	Motor_InitStruct2->Tim_PWM = Motor2_PWM;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	4a08      	ldr	r2, [pc, #32]	; (8002264 <vMotor_init+0x90>)
 8002244:	605a      	str	r2, [r3, #4]
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40021800 	.word	0x40021800
 8002258:	40000800 	.word	0x40000800
 800225c:	40001c00 	.word	0x40001c00
 8002260:	40010400 	.word	0x40010400
 8002264:	40002000 	.word	0x40002000

08002268 <vMotor_Control>:

void vMotor_Control(Motor_InitTypeDef* motor, uint8_t eBridgeControl)

{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	70fb      	strb	r3, [r7, #3]
	switch (eBridgeControl)
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d862      	bhi.n	8002340 <vMotor_Control+0xd8>
 800227a:	a201      	add	r2, pc, #4	; (adr r2, 8002280 <vMotor_Control+0x18>)
 800227c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002280:	08002291 	.word	0x08002291
 8002284:	080022bf 	.word	0x080022bf
 8002288:	080022eb 	.word	0x080022eb
 800228c:	08002317 	.word	0x08002317
	{
	case BreakeHard:
		HAL_GPIO_WritePin(motor->Motor_GPIO_int1, motor->Motor_Pin_int1,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6898      	ldr	r0, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	899b      	ldrh	r3, [r3, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	4619      	mov	r1, r3
 800229c:	f7fe fc50 	bl	8000b40 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(motor->Motor_GPIO_int2, motor->Motor_Pin_int2,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6918      	ldr	r0, [r3, #16]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	8a9b      	ldrh	r3, [r3, #20]
 80022a8:	2200      	movs	r2, #0
 80022aa:	4619      	mov	r1, r3
 80022ac:	f7fe fc48 	bl	8000b40 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
	motor->Tim_PWM->CCR1 = motor->Tim_PWM->ARR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6852      	ldr	r2, [r2, #4]
 80022b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022ba:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 80022bc:	e041      	b.n	8002342 <vMotor_Control+0xda>
	case Back:
		HAL_GPIO_WritePin(motor->Motor_GPIO_int1, motor->Motor_Pin_int1,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6898      	ldr	r0, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	899b      	ldrh	r3, [r3, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	4619      	mov	r1, r3
 80022ca:	f7fe fc39 	bl	8000b40 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(motor->Motor_GPIO_int2, motor->Motor_Pin_int2,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6918      	ldr	r0, [r3, #16]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	8a9b      	ldrh	r3, [r3, #20]
 80022d6:	2201      	movs	r2, #1
 80022d8:	4619      	mov	r1, r3
 80022da:	f7fe fc31 	bl	8000b40 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		motor->Tim_PWM->CCR1 = motor->dutyPWM;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6992      	ldr	r2, [r2, #24]
 80022e6:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80022e8:	e02b      	b.n	8002342 <vMotor_Control+0xda>
	case Forward:
		HAL_GPIO_WritePin(motor->Motor_GPIO_int1, motor->Motor_Pin_int1,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6898      	ldr	r0, [r3, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	899b      	ldrh	r3, [r3, #12]
 80022f2:	2201      	movs	r2, #1
 80022f4:	4619      	mov	r1, r3
 80022f6:	f7fe fc23 	bl	8000b40 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		HAL_GPIO_WritePin(motor->Motor_GPIO_int2, motor->Motor_Pin_int2,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6918      	ldr	r0, [r3, #16]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	8a9b      	ldrh	r3, [r3, #20]
 8002302:	2200      	movs	r2, #0
 8002304:	4619      	mov	r1, r3
 8002306:	f7fe fc1b 	bl	8000b40 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		motor->Tim_PWM->CCR1 = motor->dutyPWM;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6992      	ldr	r2, [r2, #24]
 8002312:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8002314:	e015      	b.n	8002342 <vMotor_Control+0xda>
	case BreakeSoft:
		HAL_GPIO_WritePin(motor->Motor_GPIO_int1, motor->Motor_Pin_int1,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6898      	ldr	r0, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	899b      	ldrh	r3, [r3, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	4619      	mov	r1, r3
 8002322:	f7fe fc0d 	bl	8000b40 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		HAL_GPIO_WritePin(motor->Motor_GPIO_int2, motor->Motor_Pin_int2,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6918      	ldr	r0, [r3, #16]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	8a9b      	ldrh	r3, [r3, #20]
 800232e:	2201      	movs	r2, #1
 8002330:	4619      	mov	r1, r3
 8002332:	f7fe fc05 	bl	8000b40 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		motor->Tim_PWM->CCR1 = 0;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800233e:	e000      	b.n	8002342 <vMotor_Control+0xda>
	default:
		break;
 8002340:	bf00      	nop
	}

}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop

0800234c <vMotor_SetPWM>:
void vMotor_SetPWM(Motor_InitTypeDef* motor, uint8_t dutyPWM)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	70fb      	strb	r3, [r7, #3]
	//motor->dutyPWM = (motor->Tim_PWM->ARR / dutyPWM);
	motor->Tim_PWM->CCR1 = dutyPWM;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	78fa      	ldrb	r2, [r7, #3]
 800235e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <ssd1306_write_byte>:
 *                           0: Writes to the command register
 *                           1: Writes to the display data ram
 * @retval None
 **/
static void ssd1306_write_byte(uint8_t chData, uint8_t chCmd)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	460a      	mov	r2, r1
 8002376:	71fb      	strb	r3, [r7, #7]
 8002378:	4613      	mov	r3, r2
 800237a:	71bb      	strb	r3, [r7, #6]
#ifdef INTERFACE_4WIRE_SPI

	SSD1306_CS_CLR();
 800237c:	f000 f9b4 	bl	80026e8 <SSD1306_CS_CLR>

	if (chCmd)
 8002380:	79bb      	ldrb	r3, [r7, #6]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <ssd1306_write_byte+0x20>
	{
		SSD1306_DC_SET();
 8002386:	f000 f9c7 	bl	8002718 <SSD1306_DC_SET>
 800238a:	e001      	b.n	8002390 <ssd1306_write_byte+0x24>
	} else
	{
		SSD1306_DC_CLR();
 800238c:	f000 f9d0 	bl	8002730 <SSD1306_DC_CLR>
	}
	SSD1306_WRITE_BYTE(chData);
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f9d8 	bl	8002748 <SSD1306_WRITE_BYTE>

	SSD1306_DC_SET();
 8002398:	f000 f9be 	bl	8002718 <SSD1306_DC_SET>
	SSD1306_CS_SET();
 800239c:	f000 f998 	bl	80026d0 <SSD1306_CS_SET>
	iic_wait_for_ack();

	iic_stop();

#endif
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <ssd1306_refresh_gram>:
 *
 * @retval  None
 **/

void ssd1306_refresh_gram(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
	uint8_t i, j;

	for (i = 0; i < 8; i++)
 80023ae:	2300      	movs	r3, #0
 80023b0:	71fb      	strb	r3, [r7, #7]
 80023b2:	e026      	b.n	8002402 <ssd1306_refresh_gram+0x5a>
	{
		ssd1306_write_byte(0xB0 + i, SSD1306_CMD);
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	3b50      	subs	r3, #80	; 0x50
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2100      	movs	r1, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ffd5 	bl	800236c <ssd1306_write_byte>
		__SET_COL_START_ADDR()
 80023c2:	2100      	movs	r1, #0
 80023c4:	2002      	movs	r0, #2
 80023c6:	f7ff ffd1 	bl	800236c <ssd1306_write_byte>
 80023ca:	2100      	movs	r1, #0
 80023cc:	2010      	movs	r0, #16
 80023ce:	f7ff ffcd 	bl	800236c <ssd1306_write_byte>
		;
		for (j = 0; j < 128; j++)
 80023d2:	2300      	movs	r3, #0
 80023d4:	71bb      	strb	r3, [r7, #6]
 80023d6:	e00d      	b.n	80023f4 <ssd1306_refresh_gram+0x4c>
		{
			ssd1306_write_byte(s_chDispalyBuffer[j][i], SSD1306_DAT);
 80023d8:	79ba      	ldrb	r2, [r7, #6]
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	490c      	ldr	r1, [pc, #48]	; (8002410 <ssd1306_refresh_gram+0x68>)
 80023de:	00d2      	lsls	r2, r2, #3
 80023e0:	440a      	add	r2, r1
 80023e2:	4413      	add	r3, r2
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2101      	movs	r1, #1
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ffbf 	bl	800236c <ssd1306_write_byte>
		for (j = 0; j < 128; j++)
 80023ee:	79bb      	ldrb	r3, [r7, #6]
 80023f0:	3301      	adds	r3, #1
 80023f2:	71bb      	strb	r3, [r7, #6]
 80023f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	daed      	bge.n	80023d8 <ssd1306_refresh_gram+0x30>
	for (i = 0; i < 8; i++)
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	3301      	adds	r3, #1
 8002400:	71fb      	strb	r3, [r7, #7]
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	2b07      	cmp	r3, #7
 8002406:	d9d5      	bls.n	80023b4 <ssd1306_refresh_gram+0xc>
		}
	}
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	2000008c 	.word	0x2000008c

08002414 <ssd1306_clear_screen>:
 *
 * @retval  None
 **/

void ssd1306_clear_screen(uint8_t chFill)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
	uint8_t i, j;

	for (i = 0; i < 8; i++)
 800241e:	2300      	movs	r3, #0
 8002420:	73fb      	strb	r3, [r7, #15]
 8002422:	e023      	b.n	800246c <ssd1306_clear_screen+0x58>
	{
		ssd1306_write_byte(0xB0 + i, SSD1306_CMD);
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	3b50      	subs	r3, #80	; 0x50
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff9d 	bl	800236c <ssd1306_write_byte>
		__SET_COL_START_ADDR()
 8002432:	2100      	movs	r1, #0
 8002434:	2002      	movs	r0, #2
 8002436:	f7ff ff99 	bl	800236c <ssd1306_write_byte>
 800243a:	2100      	movs	r1, #0
 800243c:	2010      	movs	r0, #16
 800243e:	f7ff ff95 	bl	800236c <ssd1306_write_byte>
		;
		for (j = 0; j < 128; j++)
 8002442:	2300      	movs	r3, #0
 8002444:	73bb      	strb	r3, [r7, #14]
 8002446:	e00a      	b.n	800245e <ssd1306_clear_screen+0x4a>
		{
			s_chDispalyBuffer[j][i] = chFill;
 8002448:	7bba      	ldrb	r2, [r7, #14]
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	490c      	ldr	r1, [pc, #48]	; (8002480 <ssd1306_clear_screen+0x6c>)
 800244e:	00d2      	lsls	r2, r2, #3
 8002450:	440a      	add	r2, r1
 8002452:	4413      	add	r3, r2
 8002454:	79fa      	ldrb	r2, [r7, #7]
 8002456:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 128; j++)
 8002458:	7bbb      	ldrb	r3, [r7, #14]
 800245a:	3301      	adds	r3, #1
 800245c:	73bb      	strb	r3, [r7, #14]
 800245e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002462:	2b00      	cmp	r3, #0
 8002464:	daf0      	bge.n	8002448 <ssd1306_clear_screen+0x34>
	for (i = 0; i < 8; i++)
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	3301      	adds	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	2b07      	cmp	r3, #7
 8002470:	d9d8      	bls.n	8002424 <ssd1306_clear_screen+0x10>
		}
	}

	ssd1306_refresh_gram();
 8002472:	f7ff ff99 	bl	80023a8 <ssd1306_refresh_gram>
}
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	2000008c 	.word	0x2000008c

08002484 <ssd1306_draw_point>:
 *
 * @retval None
 **/

void ssd1306_draw_point(uint8_t chXpos, uint8_t chYpos, uint8_t chPoint)
{
 8002484:	b490      	push	{r4, r7}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
 800248e:	460b      	mov	r3, r1
 8002490:	71bb      	strb	r3, [r7, #6]
 8002492:	4613      	mov	r3, r2
 8002494:	717b      	strb	r3, [r7, #5]
	uint8_t chPos, chBx, chTemp = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	73fb      	strb	r3, [r7, #15]

	if (chXpos > 127 || chYpos > 63)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	db41      	blt.n	8002526 <ssd1306_draw_point+0xa2>
 80024a2:	79bb      	ldrb	r3, [r7, #6]
 80024a4:	2b3f      	cmp	r3, #63	; 0x3f
 80024a6:	d83e      	bhi.n	8002526 <ssd1306_draw_point+0xa2>
	{
		return;
	}
	chPos = 7 - chYpos / 8; // 
 80024a8:	79bb      	ldrb	r3, [r7, #6]
 80024aa:	08db      	lsrs	r3, r3, #3
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f1c3 0307 	rsb	r3, r3, #7
 80024b2:	73bb      	strb	r3, [r7, #14]
	chBx = chYpos % 8;
 80024b4:	79bb      	ldrb	r3, [r7, #6]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	737b      	strb	r3, [r7, #13]
	chTemp = 1 << (7 - chBx);
 80024bc:	7b7b      	ldrb	r3, [r7, #13]
 80024be:	f1c3 0307 	rsb	r3, r3, #7
 80024c2:	2201      	movs	r2, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	73fb      	strb	r3, [r7, #15]

	if (chPoint)
 80024ca:	797b      	ldrb	r3, [r7, #5]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d012      	beq.n	80024f6 <ssd1306_draw_point+0x72>
	{
		s_chDispalyBuffer[chXpos][chPos] |= chTemp;
 80024d0:	79fa      	ldrb	r2, [r7, #7]
 80024d2:	7bbb      	ldrb	r3, [r7, #14]
 80024d4:	79f8      	ldrb	r0, [r7, #7]
 80024d6:	7bb9      	ldrb	r1, [r7, #14]
 80024d8:	4c15      	ldr	r4, [pc, #84]	; (8002530 <ssd1306_draw_point+0xac>)
 80024da:	00c0      	lsls	r0, r0, #3
 80024dc:	4420      	add	r0, r4
 80024de:	4401      	add	r1, r0
 80024e0:	7808      	ldrb	r0, [r1, #0]
 80024e2:	7bf9      	ldrb	r1, [r7, #15]
 80024e4:	4301      	orrs	r1, r0
 80024e6:	b2c8      	uxtb	r0, r1
 80024e8:	4911      	ldr	r1, [pc, #68]	; (8002530 <ssd1306_draw_point+0xac>)
 80024ea:	00d2      	lsls	r2, r2, #3
 80024ec:	440a      	add	r2, r1
 80024ee:	4413      	add	r3, r2
 80024f0:	4602      	mov	r2, r0
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	e018      	b.n	8002528 <ssd1306_draw_point+0xa4>

	} else
	{
		s_chDispalyBuffer[chXpos][chPos] &= ~chTemp;
 80024f6:	79fa      	ldrb	r2, [r7, #7]
 80024f8:	7bbb      	ldrb	r3, [r7, #14]
 80024fa:	79f8      	ldrb	r0, [r7, #7]
 80024fc:	7bb9      	ldrb	r1, [r7, #14]
 80024fe:	4c0c      	ldr	r4, [pc, #48]	; (8002530 <ssd1306_draw_point+0xac>)
 8002500:	00c0      	lsls	r0, r0, #3
 8002502:	4420      	add	r0, r4
 8002504:	4401      	add	r1, r0
 8002506:	7809      	ldrb	r1, [r1, #0]
 8002508:	b248      	sxtb	r0, r1
 800250a:	f997 100f 	ldrsb.w	r1, [r7, #15]
 800250e:	43c9      	mvns	r1, r1
 8002510:	b249      	sxtb	r1, r1
 8002512:	4001      	ands	r1, r0
 8002514:	b249      	sxtb	r1, r1
 8002516:	b2c8      	uxtb	r0, r1
 8002518:	4905      	ldr	r1, [pc, #20]	; (8002530 <ssd1306_draw_point+0xac>)
 800251a:	00d2      	lsls	r2, r2, #3
 800251c:	440a      	add	r2, r1
 800251e:	4413      	add	r3, r2
 8002520:	4602      	mov	r2, r0
 8002522:	701a      	strb	r2, [r3, #0]
 8002524:	e000      	b.n	8002528 <ssd1306_draw_point+0xa4>
		return;
 8002526:	bf00      	nop
	}
}
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bc90      	pop	{r4, r7}
 800252e:	4770      	bx	lr
 8002530:	2000008c 	.word	0x2000008c

08002534 <ssd1306_draw_bitmap>:
	}
}

void ssd1306_draw_bitmap(uint8_t chXpos, uint8_t chYpos, const uint8_t *pchBmp,
		uint8_t chWidth, uint8_t chHeight)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	603a      	str	r2, [r7, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
 8002542:	460b      	mov	r3, r1
 8002544:	71bb      	strb	r3, [r7, #6]
 8002546:	4613      	mov	r3, r2
 8002548:	717b      	strb	r3, [r7, #5]
	uint16_t i, j, byteWidth = (chWidth + 7) / 8;
 800254a:	797b      	ldrb	r3, [r7, #5]
 800254c:	3307      	adds	r3, #7
 800254e:	2b00      	cmp	r3, #0
 8002550:	da00      	bge.n	8002554 <ssd1306_draw_bitmap+0x20>
 8002552:	3307      	adds	r3, #7
 8002554:	10db      	asrs	r3, r3, #3
 8002556:	817b      	strh	r3, [r7, #10]

	for (j = 0; j < chHeight; j++)
 8002558:	2300      	movs	r3, #0
 800255a:	81bb      	strh	r3, [r7, #12]
 800255c:	e031      	b.n	80025c2 <ssd1306_draw_bitmap+0x8e>
	{
		for (i = 0; i < chWidth; i++)
 800255e:	2300      	movs	r3, #0
 8002560:	81fb      	strh	r3, [r7, #14]
 8002562:	e026      	b.n	80025b2 <ssd1306_draw_bitmap+0x7e>
		{
			if (*(pchBmp + j * byteWidth + i / 8) & (128 >> (i & 7)))
 8002564:	89bb      	ldrh	r3, [r7, #12]
 8002566:	897a      	ldrh	r2, [r7, #10]
 8002568:	fb02 f303 	mul.w	r3, r2, r3
 800256c:	461a      	mov	r2, r3
 800256e:	89fb      	ldrh	r3, [r7, #14]
 8002570:	08db      	lsrs	r3, r3, #3
 8002572:	b29b      	uxth	r3, r3
 8002574:	4413      	add	r3, r2
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	4413      	add	r3, r2
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4619      	mov	r1, r3
 800257e:	89fb      	ldrh	r3, [r7, #14]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	2280      	movs	r2, #128	; 0x80
 8002586:	fa42 f303 	asr.w	r3, r2, r3
 800258a:	400b      	ands	r3, r1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00d      	beq.n	80025ac <ssd1306_draw_bitmap+0x78>
			{
				ssd1306_draw_point(chXpos + i, chYpos + j, 1);
 8002590:	89fb      	ldrh	r3, [r7, #14]
 8002592:	b2da      	uxtb	r2, r3
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	4413      	add	r3, r2
 8002598:	b2d8      	uxtb	r0, r3
 800259a:	89bb      	ldrh	r3, [r7, #12]
 800259c:	b2da      	uxtb	r2, r3
 800259e:	79bb      	ldrb	r3, [r7, #6]
 80025a0:	4413      	add	r3, r2
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2201      	movs	r2, #1
 80025a6:	4619      	mov	r1, r3
 80025a8:	f7ff ff6c 	bl	8002484 <ssd1306_draw_point>
		for (i = 0; i < chWidth; i++)
 80025ac:	89fb      	ldrh	r3, [r7, #14]
 80025ae:	3301      	adds	r3, #1
 80025b0:	81fb      	strh	r3, [r7, #14]
 80025b2:	797b      	ldrb	r3, [r7, #5]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	89fa      	ldrh	r2, [r7, #14]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d3d3      	bcc.n	8002564 <ssd1306_draw_bitmap+0x30>
	for (j = 0; j < chHeight; j++)
 80025bc:	89bb      	ldrh	r3, [r7, #12]
 80025be:	3301      	adds	r3, #1
 80025c0:	81bb      	strh	r3, [r7, #12]
 80025c2:	7e3b      	ldrb	r3, [r7, #24]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	89ba      	ldrh	r2, [r7, #12]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d3c8      	bcc.n	800255e <ssd1306_draw_bitmap+0x2a>
			}
		}
	}
}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <ssd1306_init>:
 * @param  None
 *
 * @retval None
 **/
void ssd1306_init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0

#ifdef INTERFACE_4WIRE_SPI	  
	SSD1306_CS_SET();   //CS set
 80025d8:	f000 f87a 	bl	80026d0 <SSD1306_CS_SET>
	SSD1306_DC_CLR();   //D/C reset
 80025dc:	f000 f8a8 	bl	8002730 <SSD1306_DC_CLR>
	SSD1306_RES_SET();  //RES set
 80025e0:	f000 f88e 	bl	8002700 <SSD1306_RES_SET>
	SSD1306_DC_CLR();//D/C reset
	SSD1306_RES_SET();//RES set

#endif

	ssd1306_write_byte(0xAE, SSD1306_CMD);  //--turn off oled panel
 80025e4:	2100      	movs	r1, #0
 80025e6:	20ae      	movs	r0, #174	; 0xae
 80025e8:	f7ff fec0 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0x00, SSD1306_CMD);  //---set low column address
 80025ec:	2100      	movs	r1, #0
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7ff febc 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0x10, SSD1306_CMD);  //---set high column address
 80025f4:	2100      	movs	r1, #0
 80025f6:	2010      	movs	r0, #16
 80025f8:	f7ff feb8 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0x40, SSD1306_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 80025fc:	2100      	movs	r1, #0
 80025fe:	2040      	movs	r0, #64	; 0x40
 8002600:	f7ff feb4 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0x81, SSD1306_CMD);  //--set contrast control register
 8002604:	2100      	movs	r1, #0
 8002606:	2081      	movs	r0, #129	; 0x81
 8002608:	f7ff feb0 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0xCF, SSD1306_CMD);  // Set SEG Output Current Brightness
 800260c:	2100      	movs	r1, #0
 800260e:	20cf      	movs	r0, #207	; 0xcf
 8002610:	f7ff feac 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0xA1, SSD1306_CMD);  //--Set SEG/Column Mapping
 8002614:	2100      	movs	r1, #0
 8002616:	20a1      	movs	r0, #161	; 0xa1
 8002618:	f7ff fea8 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0xC0, SSD1306_CMD);  //Set COM/Row Scan Direction
 800261c:	2100      	movs	r1, #0
 800261e:	20c0      	movs	r0, #192	; 0xc0
 8002620:	f7ff fea4 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0xA6, SSD1306_CMD);  //--set normal display
 8002624:	2100      	movs	r1, #0
 8002626:	20a6      	movs	r0, #166	; 0xa6
 8002628:	f7ff fea0 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0xA8, SSD1306_CMD);  //--set multiplex ratio(1 to 64)
 800262c:	2100      	movs	r1, #0
 800262e:	20a8      	movs	r0, #168	; 0xa8
 8002630:	f7ff fe9c 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0x3f, SSD1306_CMD);  //--1/64 duty
 8002634:	2100      	movs	r1, #0
 8002636:	203f      	movs	r0, #63	; 0x3f
 8002638:	f7ff fe98 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0xD3, SSD1306_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 800263c:	2100      	movs	r1, #0
 800263e:	20d3      	movs	r0, #211	; 0xd3
 8002640:	f7ff fe94 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0x00, SSD1306_CMD);  //-not offset
 8002644:	2100      	movs	r1, #0
 8002646:	2000      	movs	r0, #0
 8002648:	f7ff fe90 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0xd5, SSD1306_CMD); //--set display clock divide ratio/oscillator frequency
 800264c:	2100      	movs	r1, #0
 800264e:	20d5      	movs	r0, #213	; 0xd5
 8002650:	f7ff fe8c 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0x80, SSD1306_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 8002654:	2100      	movs	r1, #0
 8002656:	2080      	movs	r0, #128	; 0x80
 8002658:	f7ff fe88 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0xD9, SSD1306_CMD);  //--set pre-charge period
 800265c:	2100      	movs	r1, #0
 800265e:	20d9      	movs	r0, #217	; 0xd9
 8002660:	f7ff fe84 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0xF1, SSD1306_CMD); //Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8002664:	2100      	movs	r1, #0
 8002666:	20f1      	movs	r0, #241	; 0xf1
 8002668:	f7ff fe80 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0xDA, SSD1306_CMD); //--set com pins hardware configuration
 800266c:	2100      	movs	r1, #0
 800266e:	20da      	movs	r0, #218	; 0xda
 8002670:	f7ff fe7c 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0x12, SSD1306_CMD);
 8002674:	2100      	movs	r1, #0
 8002676:	2012      	movs	r0, #18
 8002678:	f7ff fe78 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0xDB, SSD1306_CMD);  //--set vcomh
 800267c:	2100      	movs	r1, #0
 800267e:	20db      	movs	r0, #219	; 0xdb
 8002680:	f7ff fe74 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0x40, SSD1306_CMD);  //Set VCOM Deselect Level
 8002684:	2100      	movs	r1, #0
 8002686:	2040      	movs	r0, #64	; 0x40
 8002688:	f7ff fe70 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0x20, SSD1306_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 800268c:	2100      	movs	r1, #0
 800268e:	2020      	movs	r0, #32
 8002690:	f7ff fe6c 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0x02, SSD1306_CMD);  //
 8002694:	2100      	movs	r1, #0
 8002696:	2002      	movs	r0, #2
 8002698:	f7ff fe68 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0x8D, SSD1306_CMD);  //--set Charge Pump enable/disable
 800269c:	2100      	movs	r1, #0
 800269e:	208d      	movs	r0, #141	; 0x8d
 80026a0:	f7ff fe64 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0x14, SSD1306_CMD);  //--set(0x10) disable
 80026a4:	2100      	movs	r1, #0
 80026a6:	2014      	movs	r0, #20
 80026a8:	f7ff fe60 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0xA4, SSD1306_CMD); // Disable Entire Display On (0xa4/0xa5)
 80026ac:	2100      	movs	r1, #0
 80026ae:	20a4      	movs	r0, #164	; 0xa4
 80026b0:	f7ff fe5c 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0xA6, SSD1306_CMD); // Disable Inverse Display On (0xa6/a7)
 80026b4:	2100      	movs	r1, #0
 80026b6:	20a6      	movs	r0, #166	; 0xa6
 80026b8:	f7ff fe58 	bl	800236c <ssd1306_write_byte>
	ssd1306_write_byte(0xAF, SSD1306_CMD);  //--turn on oled panel
 80026bc:	2100      	movs	r1, #0
 80026be:	20af      	movs	r0, #175	; 0xaf
 80026c0:	f7ff fe54 	bl	800236c <ssd1306_write_byte>

	ssd1306_clear_screen(0x00);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f7ff fea5 	bl	8002414 <ssd1306_clear_screen>
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <SSD1306_CS_SET>:

///moje
void SSD1306_CS_SET()
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_CS_GPIO, SSD1306_CS_PIN, GPIO_PIN_SET);
 80026d4:	2201      	movs	r2, #1
 80026d6:	2104      	movs	r1, #4
 80026d8:	4802      	ldr	r0, [pc, #8]	; (80026e4 <SSD1306_CS_SET+0x14>)
 80026da:	f7fe fa31 	bl	8000b40 <HAL_GPIO_WritePin>
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40021800 	.word	0x40021800

080026e8 <SSD1306_CS_CLR>:
void SSD1306_CS_CLR()
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_CS_GPIO, SSD1306_CS_PIN, GPIO_PIN_RESET);
 80026ec:	2200      	movs	r2, #0
 80026ee:	2104      	movs	r1, #4
 80026f0:	4802      	ldr	r0, [pc, #8]	; (80026fc <SSD1306_CS_CLR+0x14>)
 80026f2:	f7fe fa25 	bl	8000b40 <HAL_GPIO_WritePin>
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40021800 	.word	0x40021800

08002700 <SSD1306_RES_SET>:

void SSD1306_RES_SET()
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_RES_GPIO, SSD1306_RES_PIN, GPIO_PIN_SET);
 8002704:	2201      	movs	r2, #1
 8002706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800270a:	4802      	ldr	r0, [pc, #8]	; (8002714 <SSD1306_RES_SET+0x14>)
 800270c:	f7fe fa18 	bl	8000b40 <HAL_GPIO_WritePin>
}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40020800 	.word	0x40020800

08002718 <SSD1306_DC_SET>:
{
	HAL_GPIO_WritePin(SSD1306_RES_GPIO, SSD1306_RES_PIN, GPIO_PIN_RESET);
}

void SSD1306_DC_SET()
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_DC_GPIO, SSD1306_DC_PIN, GPIO_PIN_SET);
 800271c:	2201      	movs	r2, #1
 800271e:	2108      	movs	r1, #8
 8002720:	4802      	ldr	r0, [pc, #8]	; (800272c <SSD1306_DC_SET+0x14>)
 8002722:	f7fe fa0d 	bl	8000b40 <HAL_GPIO_WritePin>
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40021800 	.word	0x40021800

08002730 <SSD1306_DC_CLR>:
void SSD1306_DC_CLR()
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_DC_GPIO, SSD1306_DC_PIN, GPIO_PIN_RESET);
 8002734:	2200      	movs	r2, #0
 8002736:	2108      	movs	r1, #8
 8002738:	4802      	ldr	r0, [pc, #8]	; (8002744 <SSD1306_DC_CLR+0x14>)
 800273a:	f7fe fa01 	bl	8000b40 <HAL_GPIO_WritePin>
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40021800 	.word	0x40021800

08002748 <SSD1306_WRITE_BYTE>:
{
	HAL_GPIO_WritePin(SSD1306_DIN_GPIO, SSD1306_DIN_PIN, GPIO_PIN_RESET);
}

void SSD1306_WRITE_BYTE(uint8_t DATA)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi3, &DATA, 1, 1000);
 8002752:	1df9      	adds	r1, r7, #7
 8002754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002758:	2201      	movs	r2, #1
 800275a:	4803      	ldr	r0, [pc, #12]	; (8002768 <SSD1306_WRITE_BYTE+0x20>)
 800275c:	f7fe fe97 	bl	800148e <HAL_SPI_Transmit>

}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	200004a4 	.word	0x200004a4

0800276c <ssd1306_hello_word>:
/*-------------------------------END OF FILE LIBRARY-------------------------------*/

/*-------------------------------USER INTERFACE-------------------------------*/

void ssd1306_hello_word()
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af02      	add	r7, sp, #8
	ssd1306_draw_bitmap(30, 30, (uint8_t* )c_chBmp4016, 40, 16);
 8002772:	2310      	movs	r3, #16
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	2328      	movs	r3, #40	; 0x28
 8002778:	4a04      	ldr	r2, [pc, #16]	; (800278c <ssd1306_hello_word+0x20>)
 800277a:	211e      	movs	r1, #30
 800277c:	201e      	movs	r0, #30
 800277e:	f7ff fed9 	bl	8002534 <ssd1306_draw_bitmap>
	ssd1306_refresh_gram();
	HAL_Delay(1000);
	ssd1306_display_string(0, 0, (uint8_t *) "Praca Magisterska", 12, 1);
	//ssd1306_display_string(10, 16, (uint8_t *) "Kamil Karpiak", 14, 1);
	 * */
	ssd1306_refresh_gram();
 8002782:	f7ff fe11 	bl	80023a8 <ssd1306_refresh_gram>

}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	08003d28 	.word	0x08003d28

08002790 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08c      	sub	sp, #48	; 0x30
 8002794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002796:	f107 031c 	add.w	r3, r7, #28
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	60da      	str	r2, [r3, #12]
 80027a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	4a40      	ldr	r2, [pc, #256]	; (80028ac <MX_GPIO_Init+0x11c>)
 80027ac:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <MX_GPIO_Init+0x11c>)
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	f043 0320 	orr.w	r3, r3, #32
 80027b4:	6313      	str	r3, [r2, #48]	; 0x30
 80027b6:	4b3d      	ldr	r3, [pc, #244]	; (80028ac <MX_GPIO_Init+0x11c>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	61bb      	str	r3, [r7, #24]
 80027c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	4a39      	ldr	r2, [pc, #228]	; (80028ac <MX_GPIO_Init+0x11c>)
 80027c8:	4b38      	ldr	r3, [pc, #224]	; (80028ac <MX_GPIO_Init+0x11c>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b36      	ldr	r3, [pc, #216]	; (80028ac <MX_GPIO_Init+0x11c>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	4a32      	ldr	r2, [pc, #200]	; (80028ac <MX_GPIO_Init+0x11c>)
 80027e4:	4b31      	ldr	r3, [pc, #196]	; (80028ac <MX_GPIO_Init+0x11c>)
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ec:	6313      	str	r3, [r2, #48]	; 0x30
 80027ee:	4b2f      	ldr	r3, [pc, #188]	; (80028ac <MX_GPIO_Init+0x11c>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	4a2b      	ldr	r2, [pc, #172]	; (80028ac <MX_GPIO_Init+0x11c>)
 8002800:	4b2a      	ldr	r3, [pc, #168]	; (80028ac <MX_GPIO_Init+0x11c>)
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	f043 0304 	orr.w	r3, r3, #4
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b28      	ldr	r3, [pc, #160]	; (80028ac <MX_GPIO_Init+0x11c>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	4a24      	ldr	r2, [pc, #144]	; (80028ac <MX_GPIO_Init+0x11c>)
 800281c:	4b23      	ldr	r3, [pc, #140]	; (80028ac <MX_GPIO_Init+0x11c>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b21      	ldr	r3, [pc, #132]	; (80028ac <MX_GPIO_Init+0x11c>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	4a1d      	ldr	r2, [pc, #116]	; (80028ac <MX_GPIO_Init+0x11c>)
 8002838:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <MX_GPIO_Init+0x11c>)
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	f043 0302 	orr.w	r3, r3, #2
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <MX_GPIO_Init+0x11c>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OLED_CS_Pin|OLED_DC_Pin|GPIO_Motor_Control4_Pin|GPIO_Motor_control2_Pin 
 800284e:	2200      	movs	r2, #0
 8002850:	f64a 410c 	movw	r1, #44044	; 0xac0c
 8002854:	4816      	ldr	r0, [pc, #88]	; (80028b0 <MX_GPIO_Init+0x120>)
 8002856:	f7fe f973 	bl	8000b40 <HAL_GPIO_WritePin>
                          |GPIO_Motor_Control3_Pin|GPIO_Motor_control1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, GPIO_PIN_RESET);
 800285a:	2200      	movs	r2, #0
 800285c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002860:	4814      	ldr	r0, [pc, #80]	; (80028b4 <MX_GPIO_Init+0x124>)
 8002862:	f7fe f96d 	bl	8000b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin 
                           PGPin PGPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin|GPIO_Motor_Control4_Pin|GPIO_Motor_control2_Pin 
 8002866:	f64a 430c 	movw	r3, #44044	; 0xac0c
 800286a:	61fb      	str	r3, [r7, #28]
                          |GPIO_Motor_Control3_Pin|GPIO_Motor_control1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800286c:	2301      	movs	r3, #1
 800286e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002874:	2300      	movs	r3, #0
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002878:	f107 031c 	add.w	r3, r7, #28
 800287c:	4619      	mov	r1, r3
 800287e:	480c      	ldr	r0, [pc, #48]	; (80028b0 <MX_GPIO_Init+0x120>)
 8002880:	f7fd ffb4 	bl	80007ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RES_Pin;
 8002884:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800288a:	2301      	movs	r3, #1
 800288c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002892:	2300      	movs	r3, #0
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OLED_RES_GPIO_Port, &GPIO_InitStruct);
 8002896:	f107 031c 	add.w	r3, r7, #28
 800289a:	4619      	mov	r1, r3
 800289c:	4805      	ldr	r0, [pc, #20]	; (80028b4 <MX_GPIO_Init+0x124>)
 800289e:	f7fd ffa5 	bl	80007ec <HAL_GPIO_Init>

}
 80028a2:	bf00      	nop
 80028a4:	3730      	adds	r7, #48	; 0x30
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40021800 	.word	0x40021800
 80028b4:	40020800 	.word	0x40020800

080028b8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80028c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80028c4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d013      	beq.n	80028f8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80028d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80028d4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80028d8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00b      	beq.n	80028f8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80028e0:	e000      	b.n	80028e4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80028e2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80028e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f9      	beq.n	80028e2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80028ee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80028f8:	687b      	ldr	r3, [r7, #4]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b090      	sub	sp, #64	; 0x40
 800290c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800290e:	f7fd fdf5 	bl	80004fc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002912:	f000 f88d 	bl	8002a30 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002916:	f7ff ff3b 	bl	8002790 <MX_GPIO_Init>
	MX_SPI3_Init();
 800291a:	f000 f901 	bl	8002b20 <MX_SPI3_Init>
	MX_TIM13_Init();
 800291e:	f000 fb75 	bl	800300c <MX_TIM13_Init>
	MX_TIM14_Init();
 8002922:	f000 fbc1 	bl	80030a8 <MX_TIM14_Init>
	MX_TIM4_Init();
 8002926:	f000 fac5 	bl	8002eb4 <MX_TIM4_Init>
	MX_TIM8_Init();
 800292a:	f000 fb17 	bl	8002f5c <MX_TIM8_Init>
	/* USER CODE BEGIN 2 */
	ssd1306_init();
 800292e:	f7ff fe51 	bl	80025d4 <ssd1306_init>
	ssd1306_clear_screen(0xFF);
 8002932:	20ff      	movs	r0, #255	; 0xff
 8002934:	f7ff fd6e 	bl	8002414 <ssd1306_clear_screen>
	HAL_Delay(1000);
 8002938:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800293c:	f7fd fe50 	bl	80005e0 <HAL_Delay>
	ssd1306_clear_screen(0x00);
 8002940:	2000      	movs	r0, #0
 8002942:	f7ff fd67 	bl	8002414 <ssd1306_clear_screen>
	ssd1306_hello_word();
 8002946:	f7ff ff11 	bl	800276c <ssd1306_hello_word>
	printf("Start\n");
 800294a:	482d      	ldr	r0, [pc, #180]	; (8002a00 <main+0xf8>)
 800294c:	f000 fdca 	bl	80034e4 <puts>
	ITM_SendChar('A');
 8002950:	2041      	movs	r0, #65	; 0x41
 8002952:	f7ff ffb1 	bl	80028b8 <ITM_SendChar>

	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8002956:	2100      	movs	r1, #0
 8002958:	482a      	ldr	r0, [pc, #168]	; (8002a04 <main+0xfc>)
 800295a:	f7fe ffb3 	bl	80018c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 800295e:	2100      	movs	r1, #0
 8002960:	4829      	ldr	r0, [pc, #164]	; (8002a08 <main+0x100>)
 8002962:	f7fe ffaf 	bl	80018c4 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002966:	213c      	movs	r1, #60	; 0x3c
 8002968:	4828      	ldr	r0, [pc, #160]	; (8002a0c <main+0x104>)
 800296a:	f7ff f87b 	bl	8001a64 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 800296e:	213c      	movs	r1, #60	; 0x3c
 8002970:	4827      	ldr	r0, [pc, #156]	; (8002a10 <main+0x108>)
 8002972:	f7ff f877 	bl	8001a64 <HAL_TIM_Encoder_Start>

	vMotor_init(&MotorLeft, &MotorRight);
 8002976:	463a      	mov	r2, r7
 8002978:	f107 0320 	add.w	r3, r7, #32
 800297c:	4611      	mov	r1, r2
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fc28 	bl	80021d4 <vMotor_init>

//	vMotor_Control(&MotorLeft, Back);
//	vMotor_Control(&MotorRight, Back);
	vMotor_SetPWM(&MotorLeft,50);
 8002984:	f107 0320 	add.w	r3, r7, #32
 8002988:	2132      	movs	r1, #50	; 0x32
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fcde 	bl	800234c <vMotor_SetPWM>
	vMotor_SetPWM(&MotorRight,100);
 8002990:	463b      	mov	r3, r7
 8002992:	2164      	movs	r1, #100	; 0x64
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fcd9 	bl	800234c <vMotor_SetPWM>
	HAL_Delay(2000);
 800299a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800299e:	f7fd fe1f 	bl	80005e0 <HAL_Delay>
	vMotor_Control(&MotorLeft, Forward);
 80029a2:	f107 0320 	add.w	r3, r7, #32
 80029a6:	2102      	movs	r1, #2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fc5d 	bl	8002268 <vMotor_Control>
	vMotor_Control(&MotorRight, Forward);
 80029ae:	463b      	mov	r3, r7
 80029b0:	2102      	movs	r1, #2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fc58 	bl	8002268 <vMotor_Control>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		vMotor_SetPWM(&MotorLeft,70);
 80029b8:	f107 0320 	add.w	r3, r7, #32
 80029bc:	2146      	movs	r1, #70	; 0x46
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fcc4 	bl	800234c <vMotor_SetPWM>
		vMotor_SetPWM(&MotorRight,70);
 80029c4:	463b      	mov	r3, r7
 80029c6:	2146      	movs	r1, #70	; 0x46
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fcbf 	bl	800234c <vMotor_SetPWM>
		HAL_Delay(10);
 80029ce:	200a      	movs	r0, #10
 80029d0:	f7fd fe06 	bl	80005e0 <HAL_Delay>
		encoder_count1 = TIM8->CNT;
 80029d4:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <main+0x10c>)
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	b29a      	uxth	r2, r3
 80029da:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <main+0x110>)
 80029dc:	801a      	strh	r2, [r3, #0]
		encoder_count2 = TIM4->CNT;
 80029de:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <main+0x114>)
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <main+0x118>)
 80029e6:	801a      	strh	r2, [r3, #0]
		PWM13 = TIM13->CCR1 ;
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <main+0x11c>)
 80029ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <main+0x120>)
 80029f0:	801a      	strh	r2, [r3, #0]
		PWM14 = TIM13->CCR1 ;
 80029f2:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <main+0x11c>)
 80029f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <main+0x124>)
 80029fa:	801a      	strh	r2, [r3, #0]
		vMotor_SetPWM(&MotorLeft,70);
 80029fc:	e7dc      	b.n	80029b8 <main+0xb0>
 80029fe:	bf00      	nop
 8002a00:	08003d20 	.word	0x08003d20
 8002a04:	2000057c 	.word	0x2000057c
 8002a08:	200005bc 	.word	0x200005bc
 8002a0c:	2000053c 	.word	0x2000053c
 8002a10:	200004fc 	.word	0x200004fc
 8002a14:	40010400 	.word	0x40010400
 8002a18:	2000049e 	.word	0x2000049e
 8002a1c:	40000800 	.word	0x40000800
 8002a20:	2000049c 	.word	0x2000049c
 8002a24:	40001c00 	.word	0x40001c00
 8002a28:	200004a0 	.word	0x200004a0
 8002a2c:	200004a2 	.word	0x200004a2

08002a30 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b094      	sub	sp, #80	; 0x50
 8002a34:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8002a36:	f107 0320 	add.w	r3, r7, #32
 8002a3a:	2230      	movs	r2, #48	; 0x30
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fcec 	bl	800341c <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8002a44:	f107 030c 	add.w	r3, r7, #12
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8002a54:	2300      	movs	r3, #0
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	4a2b      	ldr	r2, [pc, #172]	; (8002b08 <SystemClock_Config+0xd8>)
 8002a5a:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <SystemClock_Config+0xd8>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a62:	6413      	str	r3, [r2, #64]	; 0x40
 8002a64:	4b28      	ldr	r3, [pc, #160]	; (8002b08 <SystemClock_Config+0xd8>)
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a70:	2300      	movs	r3, #0
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	4a25      	ldr	r2, [pc, #148]	; (8002b0c <SystemClock_Config+0xdc>)
 8002a76:	4b25      	ldr	r3, [pc, #148]	; (8002b0c <SystemClock_Config+0xdc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <SystemClock_Config+0xdc>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a88:	607b      	str	r3, [r7, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a90:	2301      	movs	r3, #1
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a94:	2310      	movs	r3, #16
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002aa0:	2308      	movs	r3, #8
 8002aa2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8002aa4:	23b4      	movs	r3, #180	; 0xb4
 8002aa6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002aac:	2304      	movs	r3, #4
 8002aae:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ab0:	f107 0320 	add.w	r3, r7, #32
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fe f8ad 	bl	8000c14 <HAL_RCC_OscConfig>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8002ac0:	f000 f826 	bl	8002b10 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002ac4:	f7fe f856 	bl	8000b74 <HAL_PWREx_EnableOverDrive>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 8002ace:	f000 f81f 	bl	8002b10 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002ad2:	230f      	movs	r3, #15
 8002ad4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ade:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ae2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002aea:	f107 030c 	add.w	r3, r7, #12
 8002aee:	2105      	movs	r1, #5
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe fad1 	bl	8001098 <HAL_RCC_ClockConfig>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <SystemClock_Config+0xd0>
	{
		Error_Handler();
 8002afc:	f000 f808 	bl	8002b10 <Error_Handler>
	}
}
 8002b00:	bf00      	nop
 8002b02:	3750      	adds	r7, #80	; 0x50
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40007000 	.word	0x40007000

08002b10 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
	...

08002b20 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8002b24:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b26:	4a18      	ldr	r2, [pc, #96]	; (8002b88 <MX_SPI3_Init+0x68>)
 8002b28:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002b2a:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b30:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002b32:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b3e:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b44:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b50:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b52:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b58:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b64:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b6c:	220a      	movs	r2, #10
 8002b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002b70:	4804      	ldr	r0, [pc, #16]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b72:	f7fe fc29 	bl	80013c8 <HAL_SPI_Init>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002b7c:	f7ff ffc8 	bl	8002b10 <Error_Handler>
  }

}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	200004a4 	.word	0x200004a4
 8002b88:	40003c00 	.word	0x40003c00

08002b8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a19      	ldr	r2, [pc, #100]	; (8002c10 <HAL_SPI_MspInit+0x84>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d12c      	bne.n	8002c08 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	4a18      	ldr	r2, [pc, #96]	; (8002c14 <HAL_SPI_MspInit+0x88>)
 8002bb4:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <HAL_SPI_MspInit+0x88>)
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bbe:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <HAL_SPI_MspInit+0x88>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	4a11      	ldr	r2, [pc, #68]	; (8002c14 <HAL_SPI_MspInit+0x88>)
 8002bd0:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <HAL_SPI_MspInit+0x88>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	f043 0304 	orr.w	r3, r3, #4
 8002bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bda:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <HAL_SPI_MspInit+0x88>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002be6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bec:	2302      	movs	r3, #2
 8002bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002bf8:	2306      	movs	r3, #6
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bfc:	f107 0314 	add.w	r3, r7, #20
 8002c00:	4619      	mov	r1, r3
 8002c02:	4805      	ldr	r0, [pc, #20]	; (8002c18 <HAL_SPI_MspInit+0x8c>)
 8002c04:	f7fd fdf2 	bl	80007ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002c08:	bf00      	nop
 8002c0a:	3728      	adds	r7, #40	; 0x28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40003c00 	.word	0x40003c00
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40020800 	.word	0x40020800

08002c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	4a10      	ldr	r2, [pc, #64]	; (8002c68 <HAL_MspInit+0x4c>)
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <HAL_MspInit+0x4c>)
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c30:	6453      	str	r3, [r2, #68]	; 0x44
 8002c32:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <HAL_MspInit+0x4c>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c3a:	607b      	str	r3, [r7, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	603b      	str	r3, [r7, #0]
 8002c42:	4a09      	ldr	r2, [pc, #36]	; (8002c68 <HAL_MspInit+0x4c>)
 8002c44:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <HAL_MspInit+0x4c>)
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_MspInit+0x4c>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800

08002c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c7e:	e7fe      	b.n	8002c7e <HardFault_Handler+0x4>

08002c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c84:	e7fe      	b.n	8002c84 <MemManage_Handler+0x4>

08002c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c8a:	e7fe      	b.n	8002c8a <BusFault_Handler+0x4>

08002c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c90:	e7fe      	b.n	8002c90 <UsageFault_Handler+0x4>

08002c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cc0:	f7fd fc6e 	bl	80005a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <ITM_SendChar>:
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002cd0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002cd4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d013      	beq.n	8002d08 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002ce0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002ce4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002ce8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00b      	beq.n	8002d08 <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 8002cf0:	e000      	b.n	8002cf4 <ITM_SendChar+0x2c>
      __NOP();
 8002cf2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002cf4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f9      	beq.n	8002cf2 <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002cfe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	701a      	strb	r2, [r3, #0]
  return (ch);
 8002d08:	687b      	ldr	r3, [r7, #4]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d16:	b590      	push	{r4, r7, lr}
 8002d18:	b087      	sub	sp, #28
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	e00a      	b.n	8002d3e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d28:	68bc      	ldr	r4, [r7, #8]
 8002d2a:	1c63      	adds	r3, r4, #1
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	f3af 8000 	nop.w
 8002d32:	4603      	mov	r3, r0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	dbf0      	blt.n	8002d28 <_read+0x12>
	}

return len;
 8002d46:	687b      	ldr	r3, [r7, #4]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	371c      	adds	r7, #28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd90      	pop	{r4, r7, pc}

08002d50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	e009      	b.n	8002d76 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	60ba      	str	r2, [r7, #8]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff ffac 	bl	8002cc8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	3301      	adds	r3, #1
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	dbf1      	blt.n	8002d62 <_write+0x12>
	}
	return len;
 8002d7e:	687b      	ldr	r3, [r7, #4]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002d90:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <_sbrk+0x50>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d102      	bne.n	8002d9e <_sbrk+0x16>
		heap_end = &end;
 8002d98:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <_sbrk+0x50>)
 8002d9a:	4a10      	ldr	r2, [pc, #64]	; (8002ddc <_sbrk+0x54>)
 8002d9c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <_sbrk+0x50>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002da4:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <_sbrk+0x50>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4413      	add	r3, r2
 8002dac:	466a      	mov	r2, sp
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d907      	bls.n	8002dc2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002db2:	f000 fb09 	bl	80033c8 <__errno>
 8002db6:	4602      	mov	r2, r0
 8002db8:	230c      	movs	r3, #12
 8002dba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc0:	e006      	b.n	8002dd0 <_sbrk+0x48>
	}

	heap_end += incr;
 8002dc2:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <_sbrk+0x50>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	4a03      	ldr	r2, [pc, #12]	; (8002dd8 <_sbrk+0x50>)
 8002dcc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002dce:	68fb      	ldr	r3, [r7, #12]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	2000048c 	.word	0x2000048c
 8002ddc:	20000600 	.word	0x20000600

08002de0 <_close>:

int _close(int file)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
	return -1;
 8002de8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e08:	605a      	str	r2, [r3, #4]
	return 0;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <_isatty>:

int _isatty(int file)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	return 1;
 8002e20:	2301      	movs	r3, #1
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b085      	sub	sp, #20
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
	return 0;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e4c:	4a16      	ldr	r2, [pc, #88]	; (8002ea8 <SystemInit+0x60>)
 8002e4e:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <SystemInit+0x60>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002e5c:	4a13      	ldr	r2, [pc, #76]	; (8002eac <SystemInit+0x64>)
 8002e5e:	4b13      	ldr	r3, [pc, #76]	; (8002eac <SystemInit+0x64>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e68:	4b10      	ldr	r3, [pc, #64]	; (8002eac <SystemInit+0x64>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002e6e:	4a0f      	ldr	r2, [pc, #60]	; (8002eac <SystemInit+0x64>)
 8002e70:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <SystemInit+0x64>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002e7e:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <SystemInit+0x64>)
 8002e80:	4a0b      	ldr	r2, [pc, #44]	; (8002eb0 <SystemInit+0x68>)
 8002e82:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e84:	4a09      	ldr	r2, [pc, #36]	; (8002eac <SystemInit+0x64>)
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <SystemInit+0x64>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <SystemInit+0x64>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e96:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <SystemInit+0x60>)
 8002e98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e9c:	609a      	str	r2, [r3, #8]
#endif
}
 8002e9e:	bf00      	nop
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	e000ed00 	.word	0xe000ed00
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	24003010 	.word	0x24003010

08002eb4 <MX_TIM4_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08c      	sub	sp, #48	; 0x30
 8002eb8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002eba:	f107 030c 	add.w	r3, r7, #12
 8002ebe:	2224      	movs	r2, #36	; 0x24
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 faaa 	bl	800341c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec8:	1d3b      	adds	r3, r7, #4
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8002ed0:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <MX_TIM4_Init+0xa0>)
 8002ed2:	4a21      	ldr	r2, [pc, #132]	; (8002f58 <MX_TIM4_Init+0xa4>)
 8002ed4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002ed6:	4b1f      	ldr	r3, [pc, #124]	; (8002f54 <MX_TIM4_Init+0xa0>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002edc:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <MX_TIM4_Init+0xa0>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8002ee2:	4b1c      	ldr	r3, [pc, #112]	; (8002f54 <MX_TIM4_Init+0xa0>)
 8002ee4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ee8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eea:	4b1a      	ldr	r3, [pc, #104]	; (8002f54 <MX_TIM4_Init+0xa0>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ef0:	4b18      	ldr	r3, [pc, #96]	; (8002f54 <MX_TIM4_Init+0xa0>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002efe:	2301      	movs	r3, #1
 8002f00:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002f06:	230f      	movs	r3, #15
 8002f08:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f12:	2300      	movs	r3, #0
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002f16:	230f      	movs	r3, #15
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002f1a:	f107 030c 	add.w	r3, r7, #12
 8002f1e:	4619      	mov	r1, r3
 8002f20:	480c      	ldr	r0, [pc, #48]	; (8002f54 <MX_TIM4_Init+0xa0>)
 8002f22:	f7fe fd0d 	bl	8001940 <HAL_TIM_Encoder_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002f2c:	f7ff fdf0 	bl	8002b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f30:	2300      	movs	r3, #0
 8002f32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f38:	1d3b      	adds	r3, r7, #4
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4805      	ldr	r0, [pc, #20]	; (8002f54 <MX_TIM4_Init+0xa0>)
 8002f3e:	f7ff f904 	bl	800214a <HAL_TIMEx_MasterConfigSynchronization>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002f48:	f7ff fde2 	bl	8002b10 <Error_Handler>
  }

}
 8002f4c:	bf00      	nop
 8002f4e:	3730      	adds	r7, #48	; 0x30
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	2000053c 	.word	0x2000053c
 8002f58:	40000800 	.word	0x40000800

08002f5c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08c      	sub	sp, #48	; 0x30
 8002f60:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f62:	f107 030c 	add.w	r3, r7, #12
 8002f66:	2224      	movs	r2, #36	; 0x24
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fa56 	bl	800341c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f70:	1d3b      	adds	r3, r7, #4
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 8002f78:	4b22      	ldr	r3, [pc, #136]	; (8003004 <MX_TIM8_Init+0xa8>)
 8002f7a:	4a23      	ldr	r2, [pc, #140]	; (8003008 <MX_TIM8_Init+0xac>)
 8002f7c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002f7e:	4b21      	ldr	r3, [pc, #132]	; (8003004 <MX_TIM8_Init+0xa8>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f84:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <MX_TIM8_Init+0xa8>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8002f8a:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <MX_TIM8_Init+0xa8>)
 8002f8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f90:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f92:	4b1c      	ldr	r3, [pc, #112]	; (8003004 <MX_TIM8_Init+0xa8>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002f98:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <MX_TIM8_Init+0xa8>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <MX_TIM8_Init+0xa8>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002fac:	2301      	movs	r3, #1
 8002fae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002fb4:	230f      	movs	r3, #15
 8002fb6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002fc4:	230f      	movs	r3, #15
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002fc8:	f107 030c 	add.w	r3, r7, #12
 8002fcc:	4619      	mov	r1, r3
 8002fce:	480d      	ldr	r0, [pc, #52]	; (8003004 <MX_TIM8_Init+0xa8>)
 8002fd0:	f7fe fcb6 	bl	8001940 <HAL_TIM_Encoder_Init>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8002fda:	f7ff fd99 	bl	8002b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002fe6:	1d3b      	adds	r3, r7, #4
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4806      	ldr	r0, [pc, #24]	; (8003004 <MX_TIM8_Init+0xa8>)
 8002fec:	f7ff f8ad 	bl	800214a <HAL_TIMEx_MasterConfigSynchronization>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002ff6:	f7ff fd8b 	bl	8002b10 <Error_Handler>
  }

}
 8002ffa:	bf00      	nop
 8002ffc:	3730      	adds	r7, #48	; 0x30
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	200004fc 	.word	0x200004fc
 8003008:	40010400 	.word	0x40010400

0800300c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003012:	1d3b      	adds	r3, r7, #4
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	611a      	str	r2, [r3, #16]
 8003020:	615a      	str	r2, [r3, #20]
 8003022:	619a      	str	r2, [r3, #24]

  htim13.Instance = TIM13;
 8003024:	4b1e      	ldr	r3, [pc, #120]	; (80030a0 <MX_TIM13_Init+0x94>)
 8003026:	4a1f      	ldr	r2, [pc, #124]	; (80030a4 <MX_TIM13_Init+0x98>)
 8003028:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 45-1;
 800302a:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <MX_TIM13_Init+0x94>)
 800302c:	222c      	movs	r2, #44	; 0x2c
 800302e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003030:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <MX_TIM13_Init+0x94>)
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100;
 8003036:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <MX_TIM13_Init+0x94>)
 8003038:	2264      	movs	r2, #100	; 0x64
 800303a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800303c:	4b18      	ldr	r3, [pc, #96]	; (80030a0 <MX_TIM13_Init+0x94>)
 800303e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003042:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003044:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <MX_TIM13_Init+0x94>)
 8003046:	2280      	movs	r2, #128	; 0x80
 8003048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800304a:	4815      	ldr	r0, [pc, #84]	; (80030a0 <MX_TIM13_Init+0x94>)
 800304c:	f7fe fbd9 	bl	8001802 <HAL_TIM_Base_Init>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8003056:	f7ff fd5b 	bl	8002b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800305a:	4811      	ldr	r0, [pc, #68]	; (80030a0 <MX_TIM13_Init+0x94>)
 800305c:	f7fe fbfc 	bl	8001858 <HAL_TIM_PWM_Init>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8003066:	f7ff fd53 	bl	8002b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800306a:	2360      	movs	r3, #96	; 0x60
 800306c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 80;
 800306e:	2350      	movs	r3, #80	; 0x50
 8003070:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800307a:	1d3b      	adds	r3, r7, #4
 800307c:	2200      	movs	r2, #0
 800307e:	4619      	mov	r1, r3
 8003080:	4807      	ldr	r0, [pc, #28]	; (80030a0 <MX_TIM13_Init+0x94>)
 8003082:	f7fe fd27 	bl	8001ad4 <HAL_TIM_PWM_ConfigChannel>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 800308c:	f7ff fd40 	bl	8002b10 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim13);
 8003090:	4803      	ldr	r0, [pc, #12]	; (80030a0 <MX_TIM13_Init+0x94>)
 8003092:	f000 f90d 	bl	80032b0 <HAL_TIM_MspPostInit>

}
 8003096:	bf00      	nop
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	2000057c 	.word	0x2000057c
 80030a4:	40001c00 	.word	0x40001c00

080030a8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030ae:	1d3b      	adds	r3, r7, #4
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	60da      	str	r2, [r3, #12]
 80030ba:	611a      	str	r2, [r3, #16]
 80030bc:	615a      	str	r2, [r3, #20]
 80030be:	619a      	str	r2, [r3, #24]

  htim14.Instance = TIM14;
 80030c0:	4b1e      	ldr	r3, [pc, #120]	; (800313c <MX_TIM14_Init+0x94>)
 80030c2:	4a1f      	ldr	r2, [pc, #124]	; (8003140 <MX_TIM14_Init+0x98>)
 80030c4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 45-1;
 80030c6:	4b1d      	ldr	r3, [pc, #116]	; (800313c <MX_TIM14_Init+0x94>)
 80030c8:	222c      	movs	r2, #44	; 0x2c
 80030ca:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030cc:	4b1b      	ldr	r3, [pc, #108]	; (800313c <MX_TIM14_Init+0x94>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100;
 80030d2:	4b1a      	ldr	r3, [pc, #104]	; (800313c <MX_TIM14_Init+0x94>)
 80030d4:	2264      	movs	r2, #100	; 0x64
 80030d6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80030d8:	4b18      	ldr	r3, [pc, #96]	; (800313c <MX_TIM14_Init+0x94>)
 80030da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030de:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030e0:	4b16      	ldr	r3, [pc, #88]	; (800313c <MX_TIM14_Init+0x94>)
 80030e2:	2280      	movs	r2, #128	; 0x80
 80030e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80030e6:	4815      	ldr	r0, [pc, #84]	; (800313c <MX_TIM14_Init+0x94>)
 80030e8:	f7fe fb8b 	bl	8001802 <HAL_TIM_Base_Init>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80030f2:	f7ff fd0d 	bl	8002b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80030f6:	4811      	ldr	r0, [pc, #68]	; (800313c <MX_TIM14_Init+0x94>)
 80030f8:	f7fe fbae 	bl	8001858 <HAL_TIM_PWM_Init>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8003102:	f7ff fd05 	bl	8002b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003106:	2360      	movs	r3, #96	; 0x60
 8003108:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 80;
 800310a:	2350      	movs	r3, #80	; 0x50
 800310c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003116:	1d3b      	adds	r3, r7, #4
 8003118:	2200      	movs	r2, #0
 800311a:	4619      	mov	r1, r3
 800311c:	4807      	ldr	r0, [pc, #28]	; (800313c <MX_TIM14_Init+0x94>)
 800311e:	f7fe fcd9 	bl	8001ad4 <HAL_TIM_PWM_ConfigChannel>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8003128:	f7ff fcf2 	bl	8002b10 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 800312c:	4803      	ldr	r0, [pc, #12]	; (800313c <MX_TIM14_Init+0x94>)
 800312e:	f000 f8bf 	bl	80032b0 <HAL_TIM_MspPostInit>

}
 8003132:	bf00      	nop
 8003134:	3720      	adds	r7, #32
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	200005bc 	.word	0x200005bc
 8003140:	40002000 	.word	0x40002000

08003144 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08c      	sub	sp, #48	; 0x30
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314c:	f107 031c 	add.w	r3, r7, #28
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a32      	ldr	r2, [pc, #200]	; (800322c <HAL_TIM_Encoder_MspInit+0xe8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d12d      	bne.n	80031c2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	4a31      	ldr	r2, [pc, #196]	; (8003230 <HAL_TIM_Encoder_MspInit+0xec>)
 800316c:	4b30      	ldr	r3, [pc, #192]	; (8003230 <HAL_TIM_Encoder_MspInit+0xec>)
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	f043 0304 	orr.w	r3, r3, #4
 8003174:	6413      	str	r3, [r2, #64]	; 0x40
 8003176:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <HAL_TIM_Encoder_MspInit+0xec>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	61bb      	str	r3, [r7, #24]
 8003180:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	4a2a      	ldr	r2, [pc, #168]	; (8003230 <HAL_TIM_Encoder_MspInit+0xec>)
 8003188:	4b29      	ldr	r3, [pc, #164]	; (8003230 <HAL_TIM_Encoder_MspInit+0xec>)
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	f043 0308 	orr.w	r3, r3, #8
 8003190:	6313      	str	r3, [r2, #48]	; 0x30
 8003192:	4b27      	ldr	r3, [pc, #156]	; (8003230 <HAL_TIM_Encoder_MspInit+0xec>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800319e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80031a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a4:	2302      	movs	r3, #2
 80031a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ac:	2300      	movs	r3, #0
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031b0:	2302      	movs	r3, #2
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031b4:	f107 031c 	add.w	r3, r7, #28
 80031b8:	4619      	mov	r1, r3
 80031ba:	481e      	ldr	r0, [pc, #120]	; (8003234 <HAL_TIM_Encoder_MspInit+0xf0>)
 80031bc:	f7fd fb16 	bl	80007ec <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80031c0:	e030      	b.n	8003224 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM8)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1c      	ldr	r2, [pc, #112]	; (8003238 <HAL_TIM_Encoder_MspInit+0xf4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d12b      	bne.n	8003224 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80031cc:	2300      	movs	r3, #0
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	4a17      	ldr	r2, [pc, #92]	; (8003230 <HAL_TIM_Encoder_MspInit+0xec>)
 80031d2:	4b17      	ldr	r3, [pc, #92]	; (8003230 <HAL_TIM_Encoder_MspInit+0xec>)
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	f043 0302 	orr.w	r3, r3, #2
 80031da:	6453      	str	r3, [r2, #68]	; 0x44
 80031dc:	4b14      	ldr	r3, [pc, #80]	; (8003230 <HAL_TIM_Encoder_MspInit+0xec>)
 80031de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	4a10      	ldr	r2, [pc, #64]	; (8003230 <HAL_TIM_Encoder_MspInit+0xec>)
 80031ee:	4b10      	ldr	r3, [pc, #64]	; (8003230 <HAL_TIM_Encoder_MspInit+0xec>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	f043 0304 	orr.w	r3, r3, #4
 80031f6:	6313      	str	r3, [r2, #48]	; 0x30
 80031f8:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <HAL_TIM_Encoder_MspInit+0xec>)
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003204:	23c0      	movs	r3, #192	; 0xc0
 8003206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003208:	2302      	movs	r3, #2
 800320a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003210:	2300      	movs	r3, #0
 8003212:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003214:	2303      	movs	r3, #3
 8003216:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003218:	f107 031c 	add.w	r3, r7, #28
 800321c:	4619      	mov	r1, r3
 800321e:	4807      	ldr	r0, [pc, #28]	; (800323c <HAL_TIM_Encoder_MspInit+0xf8>)
 8003220:	f7fd fae4 	bl	80007ec <HAL_GPIO_Init>
}
 8003224:	bf00      	nop
 8003226:	3730      	adds	r7, #48	; 0x30
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40000800 	.word	0x40000800
 8003230:	40023800 	.word	0x40023800
 8003234:	40020c00 	.word	0x40020c00
 8003238:	40010400 	.word	0x40010400
 800323c:	40020800 	.word	0x40020800

08003240 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a15      	ldr	r2, [pc, #84]	; (80032a4 <HAL_TIM_Base_MspInit+0x64>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d10e      	bne.n	8003270 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	4a14      	ldr	r2, [pc, #80]	; (80032a8 <HAL_TIM_Base_MspInit+0x68>)
 8003258:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <HAL_TIM_Base_MspInit+0x68>)
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003260:	6413      	str	r3, [r2, #64]	; 0x40
 8003262:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <HAL_TIM_Base_MspInit+0x68>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800326e:	e012      	b.n	8003296 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM14)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0d      	ldr	r2, [pc, #52]	; (80032ac <HAL_TIM_Base_MspInit+0x6c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d10d      	bne.n	8003296 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <HAL_TIM_Base_MspInit+0x68>)
 8003280:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <HAL_TIM_Base_MspInit+0x68>)
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003288:	6413      	str	r3, [r2, #64]	; 0x40
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HAL_TIM_Base_MspInit+0x68>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
}
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40001c00 	.word	0x40001c00
 80032a8:	40023800 	.word	0x40023800
 80032ac:	40002000 	.word	0x40002000

080032b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b8:	f107 0314 	add.w	r3, r7, #20
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	60da      	str	r2, [r3, #12]
 80032c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a25      	ldr	r2, [pc, #148]	; (8003364 <HAL_TIM_MspPostInit+0xb4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d11f      	bne.n	8003312 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	4a24      	ldr	r2, [pc, #144]	; (8003368 <HAL_TIM_MspPostInit+0xb8>)
 80032d8:	4b23      	ldr	r3, [pc, #140]	; (8003368 <HAL_TIM_MspPostInit+0xb8>)
 80032da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032dc:	f043 0320 	orr.w	r3, r3, #32
 80032e0:	6313      	str	r3, [r2, #48]	; 0x30
 80032e2:	4b21      	ldr	r3, [pc, #132]	; (8003368 <HAL_TIM_MspPostInit+0xb8>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration    
    PF8     ------> TIM13_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f4:	2302      	movs	r3, #2
 80032f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fc:	2300      	movs	r3, #0
 80032fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003300:	2309      	movs	r3, #9
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003304:	f107 0314 	add.w	r3, r7, #20
 8003308:	4619      	mov	r1, r3
 800330a:	4818      	ldr	r0, [pc, #96]	; (800336c <HAL_TIM_MspPostInit+0xbc>)
 800330c:	f7fd fa6e 	bl	80007ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8003310:	e023      	b.n	800335a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM14)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a16      	ldr	r2, [pc, #88]	; (8003370 <HAL_TIM_MspPostInit+0xc0>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d11e      	bne.n	800335a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	4a11      	ldr	r2, [pc, #68]	; (8003368 <HAL_TIM_MspPostInit+0xb8>)
 8003322:	4b11      	ldr	r3, [pc, #68]	; (8003368 <HAL_TIM_MspPostInit+0xb8>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	f043 0320 	orr.w	r3, r3, #32
 800332a:	6313      	str	r3, [r2, #48]	; 0x30
 800332c:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <HAL_TIM_MspPostInit+0xb8>)
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800333c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333e:	2302      	movs	r3, #2
 8003340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003346:	2300      	movs	r3, #0
 8003348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800334a:	2309      	movs	r3, #9
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800334e:	f107 0314 	add.w	r3, r7, #20
 8003352:	4619      	mov	r1, r3
 8003354:	4805      	ldr	r0, [pc, #20]	; (800336c <HAL_TIM_MspPostInit+0xbc>)
 8003356:	f7fd fa49 	bl	80007ec <HAL_GPIO_Init>
}
 800335a:	bf00      	nop
 800335c:	3728      	adds	r7, #40	; 0x28
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40001c00 	.word	0x40001c00
 8003368:	40023800 	.word	0x40023800
 800336c:	40021400 	.word	0x40021400
 8003370:	40002000 	.word	0x40002000

08003374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033ac <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003378:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800337a:	e003      	b.n	8003384 <LoopCopyDataInit>

0800337c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800337c:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800337e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003380:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003382:	3104      	adds	r1, #4

08003384 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003384:	480b      	ldr	r0, [pc, #44]	; (80033b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003386:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003388:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800338a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800338c:	d3f6      	bcc.n	800337c <CopyDataInit>
  ldr  r2, =_sbss
 800338e:	4a0b      	ldr	r2, [pc, #44]	; (80033bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003390:	e002      	b.n	8003398 <LoopFillZerobss>

08003392 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003392:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003394:	f842 3b04 	str.w	r3, [r2], #4

08003398 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003398:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800339a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800339c:	d3f9      	bcc.n	8003392 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800339e:	f7ff fd53 	bl	8002e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033a2:	f000 f817 	bl	80033d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033a6:	f7ff faaf 	bl	8002908 <main>
  bx  lr    
 80033aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80033ac:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80033b0:	08003e0c 	.word	0x08003e0c
  ldr  r0, =_sdata
 80033b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80033b8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80033bc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80033c0:	20000600 	.word	0x20000600

080033c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033c4:	e7fe      	b.n	80033c4 <ADC_IRQHandler>
	...

080033c8 <__errno>:
 80033c8:	4b01      	ldr	r3, [pc, #4]	; (80033d0 <__errno+0x8>)
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	2000000c 	.word	0x2000000c

080033d4 <__libc_init_array>:
 80033d4:	b570      	push	{r4, r5, r6, lr}
 80033d6:	4e0d      	ldr	r6, [pc, #52]	; (800340c <__libc_init_array+0x38>)
 80033d8:	4c0d      	ldr	r4, [pc, #52]	; (8003410 <__libc_init_array+0x3c>)
 80033da:	1ba4      	subs	r4, r4, r6
 80033dc:	10a4      	asrs	r4, r4, #2
 80033de:	2500      	movs	r5, #0
 80033e0:	42a5      	cmp	r5, r4
 80033e2:	d109      	bne.n	80033f8 <__libc_init_array+0x24>
 80033e4:	4e0b      	ldr	r6, [pc, #44]	; (8003414 <__libc_init_array+0x40>)
 80033e6:	4c0c      	ldr	r4, [pc, #48]	; (8003418 <__libc_init_array+0x44>)
 80033e8:	f000 fc8e 	bl	8003d08 <_init>
 80033ec:	1ba4      	subs	r4, r4, r6
 80033ee:	10a4      	asrs	r4, r4, #2
 80033f0:	2500      	movs	r5, #0
 80033f2:	42a5      	cmp	r5, r4
 80033f4:	d105      	bne.n	8003402 <__libc_init_array+0x2e>
 80033f6:	bd70      	pop	{r4, r5, r6, pc}
 80033f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033fc:	4798      	blx	r3
 80033fe:	3501      	adds	r5, #1
 8003400:	e7ee      	b.n	80033e0 <__libc_init_array+0xc>
 8003402:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003406:	4798      	blx	r3
 8003408:	3501      	adds	r5, #1
 800340a:	e7f2      	b.n	80033f2 <__libc_init_array+0x1e>
 800340c:	08003e04 	.word	0x08003e04
 8003410:	08003e04 	.word	0x08003e04
 8003414:	08003e04 	.word	0x08003e04
 8003418:	08003e08 	.word	0x08003e08

0800341c <memset>:
 800341c:	4402      	add	r2, r0
 800341e:	4603      	mov	r3, r0
 8003420:	4293      	cmp	r3, r2
 8003422:	d100      	bne.n	8003426 <memset+0xa>
 8003424:	4770      	bx	lr
 8003426:	f803 1b01 	strb.w	r1, [r3], #1
 800342a:	e7f9      	b.n	8003420 <memset+0x4>

0800342c <_puts_r>:
 800342c:	b570      	push	{r4, r5, r6, lr}
 800342e:	460e      	mov	r6, r1
 8003430:	4605      	mov	r5, r0
 8003432:	b118      	cbz	r0, 800343c <_puts_r+0x10>
 8003434:	6983      	ldr	r3, [r0, #24]
 8003436:	b90b      	cbnz	r3, 800343c <_puts_r+0x10>
 8003438:	f000 fa0e 	bl	8003858 <__sinit>
 800343c:	69ab      	ldr	r3, [r5, #24]
 800343e:	68ac      	ldr	r4, [r5, #8]
 8003440:	b913      	cbnz	r3, 8003448 <_puts_r+0x1c>
 8003442:	4628      	mov	r0, r5
 8003444:	f000 fa08 	bl	8003858 <__sinit>
 8003448:	4b23      	ldr	r3, [pc, #140]	; (80034d8 <_puts_r+0xac>)
 800344a:	429c      	cmp	r4, r3
 800344c:	d117      	bne.n	800347e <_puts_r+0x52>
 800344e:	686c      	ldr	r4, [r5, #4]
 8003450:	89a3      	ldrh	r3, [r4, #12]
 8003452:	071b      	lsls	r3, r3, #28
 8003454:	d51d      	bpl.n	8003492 <_puts_r+0x66>
 8003456:	6923      	ldr	r3, [r4, #16]
 8003458:	b1db      	cbz	r3, 8003492 <_puts_r+0x66>
 800345a:	3e01      	subs	r6, #1
 800345c:	68a3      	ldr	r3, [r4, #8]
 800345e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003462:	3b01      	subs	r3, #1
 8003464:	60a3      	str	r3, [r4, #8]
 8003466:	b9e9      	cbnz	r1, 80034a4 <_puts_r+0x78>
 8003468:	2b00      	cmp	r3, #0
 800346a:	da2e      	bge.n	80034ca <_puts_r+0x9e>
 800346c:	4622      	mov	r2, r4
 800346e:	210a      	movs	r1, #10
 8003470:	4628      	mov	r0, r5
 8003472:	f000 f83f 	bl	80034f4 <__swbuf_r>
 8003476:	3001      	adds	r0, #1
 8003478:	d011      	beq.n	800349e <_puts_r+0x72>
 800347a:	200a      	movs	r0, #10
 800347c:	bd70      	pop	{r4, r5, r6, pc}
 800347e:	4b17      	ldr	r3, [pc, #92]	; (80034dc <_puts_r+0xb0>)
 8003480:	429c      	cmp	r4, r3
 8003482:	d101      	bne.n	8003488 <_puts_r+0x5c>
 8003484:	68ac      	ldr	r4, [r5, #8]
 8003486:	e7e3      	b.n	8003450 <_puts_r+0x24>
 8003488:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <_puts_r+0xb4>)
 800348a:	429c      	cmp	r4, r3
 800348c:	bf08      	it	eq
 800348e:	68ec      	ldreq	r4, [r5, #12]
 8003490:	e7de      	b.n	8003450 <_puts_r+0x24>
 8003492:	4621      	mov	r1, r4
 8003494:	4628      	mov	r0, r5
 8003496:	f000 f87f 	bl	8003598 <__swsetup_r>
 800349a:	2800      	cmp	r0, #0
 800349c:	d0dd      	beq.n	800345a <_puts_r+0x2e>
 800349e:	f04f 30ff 	mov.w	r0, #4294967295
 80034a2:	bd70      	pop	{r4, r5, r6, pc}
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	da04      	bge.n	80034b2 <_puts_r+0x86>
 80034a8:	69a2      	ldr	r2, [r4, #24]
 80034aa:	4293      	cmp	r3, r2
 80034ac:	db06      	blt.n	80034bc <_puts_r+0x90>
 80034ae:	290a      	cmp	r1, #10
 80034b0:	d004      	beq.n	80034bc <_puts_r+0x90>
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	6022      	str	r2, [r4, #0]
 80034b8:	7019      	strb	r1, [r3, #0]
 80034ba:	e7cf      	b.n	800345c <_puts_r+0x30>
 80034bc:	4622      	mov	r2, r4
 80034be:	4628      	mov	r0, r5
 80034c0:	f000 f818 	bl	80034f4 <__swbuf_r>
 80034c4:	3001      	adds	r0, #1
 80034c6:	d1c9      	bne.n	800345c <_puts_r+0x30>
 80034c8:	e7e9      	b.n	800349e <_puts_r+0x72>
 80034ca:	6823      	ldr	r3, [r4, #0]
 80034cc:	200a      	movs	r0, #10
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	6022      	str	r2, [r4, #0]
 80034d2:	7018      	strb	r0, [r3, #0]
 80034d4:	bd70      	pop	{r4, r5, r6, pc}
 80034d6:	bf00      	nop
 80034d8:	08003dbc 	.word	0x08003dbc
 80034dc:	08003ddc 	.word	0x08003ddc
 80034e0:	08003d9c 	.word	0x08003d9c

080034e4 <puts>:
 80034e4:	4b02      	ldr	r3, [pc, #8]	; (80034f0 <puts+0xc>)
 80034e6:	4601      	mov	r1, r0
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	f7ff bf9f 	b.w	800342c <_puts_r>
 80034ee:	bf00      	nop
 80034f0:	2000000c 	.word	0x2000000c

080034f4 <__swbuf_r>:
 80034f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f6:	460e      	mov	r6, r1
 80034f8:	4614      	mov	r4, r2
 80034fa:	4605      	mov	r5, r0
 80034fc:	b118      	cbz	r0, 8003506 <__swbuf_r+0x12>
 80034fe:	6983      	ldr	r3, [r0, #24]
 8003500:	b90b      	cbnz	r3, 8003506 <__swbuf_r+0x12>
 8003502:	f000 f9a9 	bl	8003858 <__sinit>
 8003506:	4b21      	ldr	r3, [pc, #132]	; (800358c <__swbuf_r+0x98>)
 8003508:	429c      	cmp	r4, r3
 800350a:	d12a      	bne.n	8003562 <__swbuf_r+0x6e>
 800350c:	686c      	ldr	r4, [r5, #4]
 800350e:	69a3      	ldr	r3, [r4, #24]
 8003510:	60a3      	str	r3, [r4, #8]
 8003512:	89a3      	ldrh	r3, [r4, #12]
 8003514:	071a      	lsls	r2, r3, #28
 8003516:	d52e      	bpl.n	8003576 <__swbuf_r+0x82>
 8003518:	6923      	ldr	r3, [r4, #16]
 800351a:	b363      	cbz	r3, 8003576 <__swbuf_r+0x82>
 800351c:	6923      	ldr	r3, [r4, #16]
 800351e:	6820      	ldr	r0, [r4, #0]
 8003520:	1ac0      	subs	r0, r0, r3
 8003522:	6963      	ldr	r3, [r4, #20]
 8003524:	b2f6      	uxtb	r6, r6
 8003526:	4298      	cmp	r0, r3
 8003528:	4637      	mov	r7, r6
 800352a:	db04      	blt.n	8003536 <__swbuf_r+0x42>
 800352c:	4621      	mov	r1, r4
 800352e:	4628      	mov	r0, r5
 8003530:	f000 f928 	bl	8003784 <_fflush_r>
 8003534:	bb28      	cbnz	r0, 8003582 <__swbuf_r+0x8e>
 8003536:	68a3      	ldr	r3, [r4, #8]
 8003538:	3b01      	subs	r3, #1
 800353a:	60a3      	str	r3, [r4, #8]
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	6022      	str	r2, [r4, #0]
 8003542:	701e      	strb	r6, [r3, #0]
 8003544:	6963      	ldr	r3, [r4, #20]
 8003546:	3001      	adds	r0, #1
 8003548:	4298      	cmp	r0, r3
 800354a:	d004      	beq.n	8003556 <__swbuf_r+0x62>
 800354c:	89a3      	ldrh	r3, [r4, #12]
 800354e:	07db      	lsls	r3, r3, #31
 8003550:	d519      	bpl.n	8003586 <__swbuf_r+0x92>
 8003552:	2e0a      	cmp	r6, #10
 8003554:	d117      	bne.n	8003586 <__swbuf_r+0x92>
 8003556:	4621      	mov	r1, r4
 8003558:	4628      	mov	r0, r5
 800355a:	f000 f913 	bl	8003784 <_fflush_r>
 800355e:	b190      	cbz	r0, 8003586 <__swbuf_r+0x92>
 8003560:	e00f      	b.n	8003582 <__swbuf_r+0x8e>
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <__swbuf_r+0x9c>)
 8003564:	429c      	cmp	r4, r3
 8003566:	d101      	bne.n	800356c <__swbuf_r+0x78>
 8003568:	68ac      	ldr	r4, [r5, #8]
 800356a:	e7d0      	b.n	800350e <__swbuf_r+0x1a>
 800356c:	4b09      	ldr	r3, [pc, #36]	; (8003594 <__swbuf_r+0xa0>)
 800356e:	429c      	cmp	r4, r3
 8003570:	bf08      	it	eq
 8003572:	68ec      	ldreq	r4, [r5, #12]
 8003574:	e7cb      	b.n	800350e <__swbuf_r+0x1a>
 8003576:	4621      	mov	r1, r4
 8003578:	4628      	mov	r0, r5
 800357a:	f000 f80d 	bl	8003598 <__swsetup_r>
 800357e:	2800      	cmp	r0, #0
 8003580:	d0cc      	beq.n	800351c <__swbuf_r+0x28>
 8003582:	f04f 37ff 	mov.w	r7, #4294967295
 8003586:	4638      	mov	r0, r7
 8003588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800358a:	bf00      	nop
 800358c:	08003dbc 	.word	0x08003dbc
 8003590:	08003ddc 	.word	0x08003ddc
 8003594:	08003d9c 	.word	0x08003d9c

08003598 <__swsetup_r>:
 8003598:	4b32      	ldr	r3, [pc, #200]	; (8003664 <__swsetup_r+0xcc>)
 800359a:	b570      	push	{r4, r5, r6, lr}
 800359c:	681d      	ldr	r5, [r3, #0]
 800359e:	4606      	mov	r6, r0
 80035a0:	460c      	mov	r4, r1
 80035a2:	b125      	cbz	r5, 80035ae <__swsetup_r+0x16>
 80035a4:	69ab      	ldr	r3, [r5, #24]
 80035a6:	b913      	cbnz	r3, 80035ae <__swsetup_r+0x16>
 80035a8:	4628      	mov	r0, r5
 80035aa:	f000 f955 	bl	8003858 <__sinit>
 80035ae:	4b2e      	ldr	r3, [pc, #184]	; (8003668 <__swsetup_r+0xd0>)
 80035b0:	429c      	cmp	r4, r3
 80035b2:	d10f      	bne.n	80035d4 <__swsetup_r+0x3c>
 80035b4:	686c      	ldr	r4, [r5, #4]
 80035b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	0715      	lsls	r5, r2, #28
 80035be:	d42c      	bmi.n	800361a <__swsetup_r+0x82>
 80035c0:	06d0      	lsls	r0, r2, #27
 80035c2:	d411      	bmi.n	80035e8 <__swsetup_r+0x50>
 80035c4:	2209      	movs	r2, #9
 80035c6:	6032      	str	r2, [r6, #0]
 80035c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035cc:	81a3      	strh	r3, [r4, #12]
 80035ce:	f04f 30ff 	mov.w	r0, #4294967295
 80035d2:	bd70      	pop	{r4, r5, r6, pc}
 80035d4:	4b25      	ldr	r3, [pc, #148]	; (800366c <__swsetup_r+0xd4>)
 80035d6:	429c      	cmp	r4, r3
 80035d8:	d101      	bne.n	80035de <__swsetup_r+0x46>
 80035da:	68ac      	ldr	r4, [r5, #8]
 80035dc:	e7eb      	b.n	80035b6 <__swsetup_r+0x1e>
 80035de:	4b24      	ldr	r3, [pc, #144]	; (8003670 <__swsetup_r+0xd8>)
 80035e0:	429c      	cmp	r4, r3
 80035e2:	bf08      	it	eq
 80035e4:	68ec      	ldreq	r4, [r5, #12]
 80035e6:	e7e6      	b.n	80035b6 <__swsetup_r+0x1e>
 80035e8:	0751      	lsls	r1, r2, #29
 80035ea:	d512      	bpl.n	8003612 <__swsetup_r+0x7a>
 80035ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035ee:	b141      	cbz	r1, 8003602 <__swsetup_r+0x6a>
 80035f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035f4:	4299      	cmp	r1, r3
 80035f6:	d002      	beq.n	80035fe <__swsetup_r+0x66>
 80035f8:	4630      	mov	r0, r6
 80035fa:	f000 fa1b 	bl	8003a34 <_free_r>
 80035fe:	2300      	movs	r3, #0
 8003600:	6363      	str	r3, [r4, #52]	; 0x34
 8003602:	89a3      	ldrh	r3, [r4, #12]
 8003604:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003608:	81a3      	strh	r3, [r4, #12]
 800360a:	2300      	movs	r3, #0
 800360c:	6063      	str	r3, [r4, #4]
 800360e:	6923      	ldr	r3, [r4, #16]
 8003610:	6023      	str	r3, [r4, #0]
 8003612:	89a3      	ldrh	r3, [r4, #12]
 8003614:	f043 0308 	orr.w	r3, r3, #8
 8003618:	81a3      	strh	r3, [r4, #12]
 800361a:	6923      	ldr	r3, [r4, #16]
 800361c:	b94b      	cbnz	r3, 8003632 <__swsetup_r+0x9a>
 800361e:	89a3      	ldrh	r3, [r4, #12]
 8003620:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003628:	d003      	beq.n	8003632 <__swsetup_r+0x9a>
 800362a:	4621      	mov	r1, r4
 800362c:	4630      	mov	r0, r6
 800362e:	f000 f9c1 	bl	80039b4 <__smakebuf_r>
 8003632:	89a2      	ldrh	r2, [r4, #12]
 8003634:	f012 0301 	ands.w	r3, r2, #1
 8003638:	d00c      	beq.n	8003654 <__swsetup_r+0xbc>
 800363a:	2300      	movs	r3, #0
 800363c:	60a3      	str	r3, [r4, #8]
 800363e:	6963      	ldr	r3, [r4, #20]
 8003640:	425b      	negs	r3, r3
 8003642:	61a3      	str	r3, [r4, #24]
 8003644:	6923      	ldr	r3, [r4, #16]
 8003646:	b953      	cbnz	r3, 800365e <__swsetup_r+0xc6>
 8003648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800364c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003650:	d1ba      	bne.n	80035c8 <__swsetup_r+0x30>
 8003652:	bd70      	pop	{r4, r5, r6, pc}
 8003654:	0792      	lsls	r2, r2, #30
 8003656:	bf58      	it	pl
 8003658:	6963      	ldrpl	r3, [r4, #20]
 800365a:	60a3      	str	r3, [r4, #8]
 800365c:	e7f2      	b.n	8003644 <__swsetup_r+0xac>
 800365e:	2000      	movs	r0, #0
 8003660:	e7f7      	b.n	8003652 <__swsetup_r+0xba>
 8003662:	bf00      	nop
 8003664:	2000000c 	.word	0x2000000c
 8003668:	08003dbc 	.word	0x08003dbc
 800366c:	08003ddc 	.word	0x08003ddc
 8003670:	08003d9c 	.word	0x08003d9c

08003674 <__sflush_r>:
 8003674:	898a      	ldrh	r2, [r1, #12]
 8003676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800367a:	4605      	mov	r5, r0
 800367c:	0710      	lsls	r0, r2, #28
 800367e:	460c      	mov	r4, r1
 8003680:	d45a      	bmi.n	8003738 <__sflush_r+0xc4>
 8003682:	684b      	ldr	r3, [r1, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	dc05      	bgt.n	8003694 <__sflush_r+0x20>
 8003688:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	dc02      	bgt.n	8003694 <__sflush_r+0x20>
 800368e:	2000      	movs	r0, #0
 8003690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003696:	2e00      	cmp	r6, #0
 8003698:	d0f9      	beq.n	800368e <__sflush_r+0x1a>
 800369a:	2300      	movs	r3, #0
 800369c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036a0:	682f      	ldr	r7, [r5, #0]
 80036a2:	602b      	str	r3, [r5, #0]
 80036a4:	d033      	beq.n	800370e <__sflush_r+0x9a>
 80036a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036a8:	89a3      	ldrh	r3, [r4, #12]
 80036aa:	075a      	lsls	r2, r3, #29
 80036ac:	d505      	bpl.n	80036ba <__sflush_r+0x46>
 80036ae:	6863      	ldr	r3, [r4, #4]
 80036b0:	1ac0      	subs	r0, r0, r3
 80036b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036b4:	b10b      	cbz	r3, 80036ba <__sflush_r+0x46>
 80036b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036b8:	1ac0      	subs	r0, r0, r3
 80036ba:	2300      	movs	r3, #0
 80036bc:	4602      	mov	r2, r0
 80036be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036c0:	6a21      	ldr	r1, [r4, #32]
 80036c2:	4628      	mov	r0, r5
 80036c4:	47b0      	blx	r6
 80036c6:	1c43      	adds	r3, r0, #1
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	d106      	bne.n	80036da <__sflush_r+0x66>
 80036cc:	6829      	ldr	r1, [r5, #0]
 80036ce:	291d      	cmp	r1, #29
 80036d0:	d84b      	bhi.n	800376a <__sflush_r+0xf6>
 80036d2:	4a2b      	ldr	r2, [pc, #172]	; (8003780 <__sflush_r+0x10c>)
 80036d4:	40ca      	lsrs	r2, r1
 80036d6:	07d6      	lsls	r6, r2, #31
 80036d8:	d547      	bpl.n	800376a <__sflush_r+0xf6>
 80036da:	2200      	movs	r2, #0
 80036dc:	6062      	str	r2, [r4, #4]
 80036de:	04d9      	lsls	r1, r3, #19
 80036e0:	6922      	ldr	r2, [r4, #16]
 80036e2:	6022      	str	r2, [r4, #0]
 80036e4:	d504      	bpl.n	80036f0 <__sflush_r+0x7c>
 80036e6:	1c42      	adds	r2, r0, #1
 80036e8:	d101      	bne.n	80036ee <__sflush_r+0x7a>
 80036ea:	682b      	ldr	r3, [r5, #0]
 80036ec:	b903      	cbnz	r3, 80036f0 <__sflush_r+0x7c>
 80036ee:	6560      	str	r0, [r4, #84]	; 0x54
 80036f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036f2:	602f      	str	r7, [r5, #0]
 80036f4:	2900      	cmp	r1, #0
 80036f6:	d0ca      	beq.n	800368e <__sflush_r+0x1a>
 80036f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036fc:	4299      	cmp	r1, r3
 80036fe:	d002      	beq.n	8003706 <__sflush_r+0x92>
 8003700:	4628      	mov	r0, r5
 8003702:	f000 f997 	bl	8003a34 <_free_r>
 8003706:	2000      	movs	r0, #0
 8003708:	6360      	str	r0, [r4, #52]	; 0x34
 800370a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800370e:	6a21      	ldr	r1, [r4, #32]
 8003710:	2301      	movs	r3, #1
 8003712:	4628      	mov	r0, r5
 8003714:	47b0      	blx	r6
 8003716:	1c41      	adds	r1, r0, #1
 8003718:	d1c6      	bne.n	80036a8 <__sflush_r+0x34>
 800371a:	682b      	ldr	r3, [r5, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0c3      	beq.n	80036a8 <__sflush_r+0x34>
 8003720:	2b1d      	cmp	r3, #29
 8003722:	d001      	beq.n	8003728 <__sflush_r+0xb4>
 8003724:	2b16      	cmp	r3, #22
 8003726:	d101      	bne.n	800372c <__sflush_r+0xb8>
 8003728:	602f      	str	r7, [r5, #0]
 800372a:	e7b0      	b.n	800368e <__sflush_r+0x1a>
 800372c:	89a3      	ldrh	r3, [r4, #12]
 800372e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003732:	81a3      	strh	r3, [r4, #12]
 8003734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003738:	690f      	ldr	r7, [r1, #16]
 800373a:	2f00      	cmp	r7, #0
 800373c:	d0a7      	beq.n	800368e <__sflush_r+0x1a>
 800373e:	0793      	lsls	r3, r2, #30
 8003740:	680e      	ldr	r6, [r1, #0]
 8003742:	bf08      	it	eq
 8003744:	694b      	ldreq	r3, [r1, #20]
 8003746:	600f      	str	r7, [r1, #0]
 8003748:	bf18      	it	ne
 800374a:	2300      	movne	r3, #0
 800374c:	eba6 0807 	sub.w	r8, r6, r7
 8003750:	608b      	str	r3, [r1, #8]
 8003752:	f1b8 0f00 	cmp.w	r8, #0
 8003756:	dd9a      	ble.n	800368e <__sflush_r+0x1a>
 8003758:	4643      	mov	r3, r8
 800375a:	463a      	mov	r2, r7
 800375c:	6a21      	ldr	r1, [r4, #32]
 800375e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003760:	4628      	mov	r0, r5
 8003762:	47b0      	blx	r6
 8003764:	2800      	cmp	r0, #0
 8003766:	dc07      	bgt.n	8003778 <__sflush_r+0x104>
 8003768:	89a3      	ldrh	r3, [r4, #12]
 800376a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800376e:	81a3      	strh	r3, [r4, #12]
 8003770:	f04f 30ff 	mov.w	r0, #4294967295
 8003774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003778:	4407      	add	r7, r0
 800377a:	eba8 0800 	sub.w	r8, r8, r0
 800377e:	e7e8      	b.n	8003752 <__sflush_r+0xde>
 8003780:	20400001 	.word	0x20400001

08003784 <_fflush_r>:
 8003784:	b538      	push	{r3, r4, r5, lr}
 8003786:	690b      	ldr	r3, [r1, #16]
 8003788:	4605      	mov	r5, r0
 800378a:	460c      	mov	r4, r1
 800378c:	b1db      	cbz	r3, 80037c6 <_fflush_r+0x42>
 800378e:	b118      	cbz	r0, 8003798 <_fflush_r+0x14>
 8003790:	6983      	ldr	r3, [r0, #24]
 8003792:	b90b      	cbnz	r3, 8003798 <_fflush_r+0x14>
 8003794:	f000 f860 	bl	8003858 <__sinit>
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <_fflush_r+0x48>)
 800379a:	429c      	cmp	r4, r3
 800379c:	d109      	bne.n	80037b2 <_fflush_r+0x2e>
 800379e:	686c      	ldr	r4, [r5, #4]
 80037a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037a4:	b17b      	cbz	r3, 80037c6 <_fflush_r+0x42>
 80037a6:	4621      	mov	r1, r4
 80037a8:	4628      	mov	r0, r5
 80037aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037ae:	f7ff bf61 	b.w	8003674 <__sflush_r>
 80037b2:	4b07      	ldr	r3, [pc, #28]	; (80037d0 <_fflush_r+0x4c>)
 80037b4:	429c      	cmp	r4, r3
 80037b6:	d101      	bne.n	80037bc <_fflush_r+0x38>
 80037b8:	68ac      	ldr	r4, [r5, #8]
 80037ba:	e7f1      	b.n	80037a0 <_fflush_r+0x1c>
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <_fflush_r+0x50>)
 80037be:	429c      	cmp	r4, r3
 80037c0:	bf08      	it	eq
 80037c2:	68ec      	ldreq	r4, [r5, #12]
 80037c4:	e7ec      	b.n	80037a0 <_fflush_r+0x1c>
 80037c6:	2000      	movs	r0, #0
 80037c8:	bd38      	pop	{r3, r4, r5, pc}
 80037ca:	bf00      	nop
 80037cc:	08003dbc 	.word	0x08003dbc
 80037d0:	08003ddc 	.word	0x08003ddc
 80037d4:	08003d9c 	.word	0x08003d9c

080037d8 <_cleanup_r>:
 80037d8:	4901      	ldr	r1, [pc, #4]	; (80037e0 <_cleanup_r+0x8>)
 80037da:	f000 b8a9 	b.w	8003930 <_fwalk_reent>
 80037de:	bf00      	nop
 80037e0:	08003785 	.word	0x08003785

080037e4 <std.isra.0>:
 80037e4:	2300      	movs	r3, #0
 80037e6:	b510      	push	{r4, lr}
 80037e8:	4604      	mov	r4, r0
 80037ea:	6003      	str	r3, [r0, #0]
 80037ec:	6043      	str	r3, [r0, #4]
 80037ee:	6083      	str	r3, [r0, #8]
 80037f0:	8181      	strh	r1, [r0, #12]
 80037f2:	6643      	str	r3, [r0, #100]	; 0x64
 80037f4:	81c2      	strh	r2, [r0, #14]
 80037f6:	6103      	str	r3, [r0, #16]
 80037f8:	6143      	str	r3, [r0, #20]
 80037fa:	6183      	str	r3, [r0, #24]
 80037fc:	4619      	mov	r1, r3
 80037fe:	2208      	movs	r2, #8
 8003800:	305c      	adds	r0, #92	; 0x5c
 8003802:	f7ff fe0b 	bl	800341c <memset>
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <std.isra.0+0x38>)
 8003808:	6263      	str	r3, [r4, #36]	; 0x24
 800380a:	4b05      	ldr	r3, [pc, #20]	; (8003820 <std.isra.0+0x3c>)
 800380c:	62a3      	str	r3, [r4, #40]	; 0x28
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <std.isra.0+0x40>)
 8003810:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003812:	4b05      	ldr	r3, [pc, #20]	; (8003828 <std.isra.0+0x44>)
 8003814:	6224      	str	r4, [r4, #32]
 8003816:	6323      	str	r3, [r4, #48]	; 0x30
 8003818:	bd10      	pop	{r4, pc}
 800381a:	bf00      	nop
 800381c:	08003bad 	.word	0x08003bad
 8003820:	08003bcf 	.word	0x08003bcf
 8003824:	08003c07 	.word	0x08003c07
 8003828:	08003c2b 	.word	0x08003c2b

0800382c <__sfmoreglue>:
 800382c:	b570      	push	{r4, r5, r6, lr}
 800382e:	1e4a      	subs	r2, r1, #1
 8003830:	2568      	movs	r5, #104	; 0x68
 8003832:	4355      	muls	r5, r2
 8003834:	460e      	mov	r6, r1
 8003836:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800383a:	f000 f949 	bl	8003ad0 <_malloc_r>
 800383e:	4604      	mov	r4, r0
 8003840:	b140      	cbz	r0, 8003854 <__sfmoreglue+0x28>
 8003842:	2100      	movs	r1, #0
 8003844:	e880 0042 	stmia.w	r0, {r1, r6}
 8003848:	300c      	adds	r0, #12
 800384a:	60a0      	str	r0, [r4, #8]
 800384c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003850:	f7ff fde4 	bl	800341c <memset>
 8003854:	4620      	mov	r0, r4
 8003856:	bd70      	pop	{r4, r5, r6, pc}

08003858 <__sinit>:
 8003858:	6983      	ldr	r3, [r0, #24]
 800385a:	b510      	push	{r4, lr}
 800385c:	4604      	mov	r4, r0
 800385e:	bb33      	cbnz	r3, 80038ae <__sinit+0x56>
 8003860:	6483      	str	r3, [r0, #72]	; 0x48
 8003862:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003864:	6503      	str	r3, [r0, #80]	; 0x50
 8003866:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <__sinit+0x58>)
 8003868:	4a12      	ldr	r2, [pc, #72]	; (80038b4 <__sinit+0x5c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6282      	str	r2, [r0, #40]	; 0x28
 800386e:	4298      	cmp	r0, r3
 8003870:	bf04      	itt	eq
 8003872:	2301      	moveq	r3, #1
 8003874:	6183      	streq	r3, [r0, #24]
 8003876:	f000 f81f 	bl	80038b8 <__sfp>
 800387a:	6060      	str	r0, [r4, #4]
 800387c:	4620      	mov	r0, r4
 800387e:	f000 f81b 	bl	80038b8 <__sfp>
 8003882:	60a0      	str	r0, [r4, #8]
 8003884:	4620      	mov	r0, r4
 8003886:	f000 f817 	bl	80038b8 <__sfp>
 800388a:	2200      	movs	r2, #0
 800388c:	60e0      	str	r0, [r4, #12]
 800388e:	2104      	movs	r1, #4
 8003890:	6860      	ldr	r0, [r4, #4]
 8003892:	f7ff ffa7 	bl	80037e4 <std.isra.0>
 8003896:	2201      	movs	r2, #1
 8003898:	2109      	movs	r1, #9
 800389a:	68a0      	ldr	r0, [r4, #8]
 800389c:	f7ff ffa2 	bl	80037e4 <std.isra.0>
 80038a0:	2202      	movs	r2, #2
 80038a2:	2112      	movs	r1, #18
 80038a4:	68e0      	ldr	r0, [r4, #12]
 80038a6:	f7ff ff9d 	bl	80037e4 <std.isra.0>
 80038aa:	2301      	movs	r3, #1
 80038ac:	61a3      	str	r3, [r4, #24]
 80038ae:	bd10      	pop	{r4, pc}
 80038b0:	08003d98 	.word	0x08003d98
 80038b4:	080037d9 	.word	0x080037d9

080038b8 <__sfp>:
 80038b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ba:	4b1c      	ldr	r3, [pc, #112]	; (800392c <__sfp+0x74>)
 80038bc:	681e      	ldr	r6, [r3, #0]
 80038be:	69b3      	ldr	r3, [r6, #24]
 80038c0:	4607      	mov	r7, r0
 80038c2:	b913      	cbnz	r3, 80038ca <__sfp+0x12>
 80038c4:	4630      	mov	r0, r6
 80038c6:	f7ff ffc7 	bl	8003858 <__sinit>
 80038ca:	3648      	adds	r6, #72	; 0x48
 80038cc:	68b4      	ldr	r4, [r6, #8]
 80038ce:	6873      	ldr	r3, [r6, #4]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	d503      	bpl.n	80038dc <__sfp+0x24>
 80038d4:	6833      	ldr	r3, [r6, #0]
 80038d6:	b133      	cbz	r3, 80038e6 <__sfp+0x2e>
 80038d8:	6836      	ldr	r6, [r6, #0]
 80038da:	e7f7      	b.n	80038cc <__sfp+0x14>
 80038dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80038e0:	b16d      	cbz	r5, 80038fe <__sfp+0x46>
 80038e2:	3468      	adds	r4, #104	; 0x68
 80038e4:	e7f4      	b.n	80038d0 <__sfp+0x18>
 80038e6:	2104      	movs	r1, #4
 80038e8:	4638      	mov	r0, r7
 80038ea:	f7ff ff9f 	bl	800382c <__sfmoreglue>
 80038ee:	6030      	str	r0, [r6, #0]
 80038f0:	2800      	cmp	r0, #0
 80038f2:	d1f1      	bne.n	80038d8 <__sfp+0x20>
 80038f4:	230c      	movs	r3, #12
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	4604      	mov	r4, r0
 80038fa:	4620      	mov	r0, r4
 80038fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003902:	81e3      	strh	r3, [r4, #14]
 8003904:	2301      	movs	r3, #1
 8003906:	81a3      	strh	r3, [r4, #12]
 8003908:	6665      	str	r5, [r4, #100]	; 0x64
 800390a:	6025      	str	r5, [r4, #0]
 800390c:	60a5      	str	r5, [r4, #8]
 800390e:	6065      	str	r5, [r4, #4]
 8003910:	6125      	str	r5, [r4, #16]
 8003912:	6165      	str	r5, [r4, #20]
 8003914:	61a5      	str	r5, [r4, #24]
 8003916:	2208      	movs	r2, #8
 8003918:	4629      	mov	r1, r5
 800391a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800391e:	f7ff fd7d 	bl	800341c <memset>
 8003922:	6365      	str	r5, [r4, #52]	; 0x34
 8003924:	63a5      	str	r5, [r4, #56]	; 0x38
 8003926:	64a5      	str	r5, [r4, #72]	; 0x48
 8003928:	64e5      	str	r5, [r4, #76]	; 0x4c
 800392a:	e7e6      	b.n	80038fa <__sfp+0x42>
 800392c:	08003d98 	.word	0x08003d98

08003930 <_fwalk_reent>:
 8003930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003934:	4680      	mov	r8, r0
 8003936:	4689      	mov	r9, r1
 8003938:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800393c:	2600      	movs	r6, #0
 800393e:	b914      	cbnz	r4, 8003946 <_fwalk_reent+0x16>
 8003940:	4630      	mov	r0, r6
 8003942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003946:	68a5      	ldr	r5, [r4, #8]
 8003948:	6867      	ldr	r7, [r4, #4]
 800394a:	3f01      	subs	r7, #1
 800394c:	d501      	bpl.n	8003952 <_fwalk_reent+0x22>
 800394e:	6824      	ldr	r4, [r4, #0]
 8003950:	e7f5      	b.n	800393e <_fwalk_reent+0xe>
 8003952:	89ab      	ldrh	r3, [r5, #12]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d907      	bls.n	8003968 <_fwalk_reent+0x38>
 8003958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800395c:	3301      	adds	r3, #1
 800395e:	d003      	beq.n	8003968 <_fwalk_reent+0x38>
 8003960:	4629      	mov	r1, r5
 8003962:	4640      	mov	r0, r8
 8003964:	47c8      	blx	r9
 8003966:	4306      	orrs	r6, r0
 8003968:	3568      	adds	r5, #104	; 0x68
 800396a:	e7ee      	b.n	800394a <_fwalk_reent+0x1a>

0800396c <__swhatbuf_r>:
 800396c:	b570      	push	{r4, r5, r6, lr}
 800396e:	460e      	mov	r6, r1
 8003970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003974:	2900      	cmp	r1, #0
 8003976:	b090      	sub	sp, #64	; 0x40
 8003978:	4614      	mov	r4, r2
 800397a:	461d      	mov	r5, r3
 800397c:	da07      	bge.n	800398e <__swhatbuf_r+0x22>
 800397e:	2300      	movs	r3, #0
 8003980:	602b      	str	r3, [r5, #0]
 8003982:	89b3      	ldrh	r3, [r6, #12]
 8003984:	061a      	lsls	r2, r3, #24
 8003986:	d410      	bmi.n	80039aa <__swhatbuf_r+0x3e>
 8003988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800398c:	e00e      	b.n	80039ac <__swhatbuf_r+0x40>
 800398e:	aa01      	add	r2, sp, #4
 8003990:	f000 f972 	bl	8003c78 <_fstat_r>
 8003994:	2800      	cmp	r0, #0
 8003996:	dbf2      	blt.n	800397e <__swhatbuf_r+0x12>
 8003998:	9a02      	ldr	r2, [sp, #8]
 800399a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800399e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80039a2:	425a      	negs	r2, r3
 80039a4:	415a      	adcs	r2, r3
 80039a6:	602a      	str	r2, [r5, #0]
 80039a8:	e7ee      	b.n	8003988 <__swhatbuf_r+0x1c>
 80039aa:	2340      	movs	r3, #64	; 0x40
 80039ac:	2000      	movs	r0, #0
 80039ae:	6023      	str	r3, [r4, #0]
 80039b0:	b010      	add	sp, #64	; 0x40
 80039b2:	bd70      	pop	{r4, r5, r6, pc}

080039b4 <__smakebuf_r>:
 80039b4:	898b      	ldrh	r3, [r1, #12]
 80039b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039b8:	079d      	lsls	r5, r3, #30
 80039ba:	4606      	mov	r6, r0
 80039bc:	460c      	mov	r4, r1
 80039be:	d507      	bpl.n	80039d0 <__smakebuf_r+0x1c>
 80039c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039c4:	6023      	str	r3, [r4, #0]
 80039c6:	6123      	str	r3, [r4, #16]
 80039c8:	2301      	movs	r3, #1
 80039ca:	6163      	str	r3, [r4, #20]
 80039cc:	b002      	add	sp, #8
 80039ce:	bd70      	pop	{r4, r5, r6, pc}
 80039d0:	ab01      	add	r3, sp, #4
 80039d2:	466a      	mov	r2, sp
 80039d4:	f7ff ffca 	bl	800396c <__swhatbuf_r>
 80039d8:	9900      	ldr	r1, [sp, #0]
 80039da:	4605      	mov	r5, r0
 80039dc:	4630      	mov	r0, r6
 80039de:	f000 f877 	bl	8003ad0 <_malloc_r>
 80039e2:	b948      	cbnz	r0, 80039f8 <__smakebuf_r+0x44>
 80039e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039e8:	059a      	lsls	r2, r3, #22
 80039ea:	d4ef      	bmi.n	80039cc <__smakebuf_r+0x18>
 80039ec:	f023 0303 	bic.w	r3, r3, #3
 80039f0:	f043 0302 	orr.w	r3, r3, #2
 80039f4:	81a3      	strh	r3, [r4, #12]
 80039f6:	e7e3      	b.n	80039c0 <__smakebuf_r+0xc>
 80039f8:	4b0d      	ldr	r3, [pc, #52]	; (8003a30 <__smakebuf_r+0x7c>)
 80039fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80039fc:	89a3      	ldrh	r3, [r4, #12]
 80039fe:	6020      	str	r0, [r4, #0]
 8003a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a04:	81a3      	strh	r3, [r4, #12]
 8003a06:	9b00      	ldr	r3, [sp, #0]
 8003a08:	6163      	str	r3, [r4, #20]
 8003a0a:	9b01      	ldr	r3, [sp, #4]
 8003a0c:	6120      	str	r0, [r4, #16]
 8003a0e:	b15b      	cbz	r3, 8003a28 <__smakebuf_r+0x74>
 8003a10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a14:	4630      	mov	r0, r6
 8003a16:	f000 f941 	bl	8003c9c <_isatty_r>
 8003a1a:	b128      	cbz	r0, 8003a28 <__smakebuf_r+0x74>
 8003a1c:	89a3      	ldrh	r3, [r4, #12]
 8003a1e:	f023 0303 	bic.w	r3, r3, #3
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	81a3      	strh	r3, [r4, #12]
 8003a28:	89a3      	ldrh	r3, [r4, #12]
 8003a2a:	431d      	orrs	r5, r3
 8003a2c:	81a5      	strh	r5, [r4, #12]
 8003a2e:	e7cd      	b.n	80039cc <__smakebuf_r+0x18>
 8003a30:	080037d9 	.word	0x080037d9

08003a34 <_free_r>:
 8003a34:	b538      	push	{r3, r4, r5, lr}
 8003a36:	4605      	mov	r5, r0
 8003a38:	2900      	cmp	r1, #0
 8003a3a:	d045      	beq.n	8003ac8 <_free_r+0x94>
 8003a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a40:	1f0c      	subs	r4, r1, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	bfb8      	it	lt
 8003a46:	18e4      	addlt	r4, r4, r3
 8003a48:	f000 f94a 	bl	8003ce0 <__malloc_lock>
 8003a4c:	4a1f      	ldr	r2, [pc, #124]	; (8003acc <_free_r+0x98>)
 8003a4e:	6813      	ldr	r3, [r2, #0]
 8003a50:	4610      	mov	r0, r2
 8003a52:	b933      	cbnz	r3, 8003a62 <_free_r+0x2e>
 8003a54:	6063      	str	r3, [r4, #4]
 8003a56:	6014      	str	r4, [r2, #0]
 8003a58:	4628      	mov	r0, r5
 8003a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a5e:	f000 b940 	b.w	8003ce2 <__malloc_unlock>
 8003a62:	42a3      	cmp	r3, r4
 8003a64:	d90c      	bls.n	8003a80 <_free_r+0x4c>
 8003a66:	6821      	ldr	r1, [r4, #0]
 8003a68:	1862      	adds	r2, r4, r1
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	bf04      	itt	eq
 8003a6e:	681a      	ldreq	r2, [r3, #0]
 8003a70:	685b      	ldreq	r3, [r3, #4]
 8003a72:	6063      	str	r3, [r4, #4]
 8003a74:	bf04      	itt	eq
 8003a76:	1852      	addeq	r2, r2, r1
 8003a78:	6022      	streq	r2, [r4, #0]
 8003a7a:	6004      	str	r4, [r0, #0]
 8003a7c:	e7ec      	b.n	8003a58 <_free_r+0x24>
 8003a7e:	4613      	mov	r3, r2
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	b10a      	cbz	r2, 8003a88 <_free_r+0x54>
 8003a84:	42a2      	cmp	r2, r4
 8003a86:	d9fa      	bls.n	8003a7e <_free_r+0x4a>
 8003a88:	6819      	ldr	r1, [r3, #0]
 8003a8a:	1858      	adds	r0, r3, r1
 8003a8c:	42a0      	cmp	r0, r4
 8003a8e:	d10b      	bne.n	8003aa8 <_free_r+0x74>
 8003a90:	6820      	ldr	r0, [r4, #0]
 8003a92:	4401      	add	r1, r0
 8003a94:	1858      	adds	r0, r3, r1
 8003a96:	4282      	cmp	r2, r0
 8003a98:	6019      	str	r1, [r3, #0]
 8003a9a:	d1dd      	bne.n	8003a58 <_free_r+0x24>
 8003a9c:	6810      	ldr	r0, [r2, #0]
 8003a9e:	6852      	ldr	r2, [r2, #4]
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	4401      	add	r1, r0
 8003aa4:	6019      	str	r1, [r3, #0]
 8003aa6:	e7d7      	b.n	8003a58 <_free_r+0x24>
 8003aa8:	d902      	bls.n	8003ab0 <_free_r+0x7c>
 8003aaa:	230c      	movs	r3, #12
 8003aac:	602b      	str	r3, [r5, #0]
 8003aae:	e7d3      	b.n	8003a58 <_free_r+0x24>
 8003ab0:	6820      	ldr	r0, [r4, #0]
 8003ab2:	1821      	adds	r1, r4, r0
 8003ab4:	428a      	cmp	r2, r1
 8003ab6:	bf04      	itt	eq
 8003ab8:	6811      	ldreq	r1, [r2, #0]
 8003aba:	6852      	ldreq	r2, [r2, #4]
 8003abc:	6062      	str	r2, [r4, #4]
 8003abe:	bf04      	itt	eq
 8003ac0:	1809      	addeq	r1, r1, r0
 8003ac2:	6021      	streq	r1, [r4, #0]
 8003ac4:	605c      	str	r4, [r3, #4]
 8003ac6:	e7c7      	b.n	8003a58 <_free_r+0x24>
 8003ac8:	bd38      	pop	{r3, r4, r5, pc}
 8003aca:	bf00      	nop
 8003acc:	20000490 	.word	0x20000490

08003ad0 <_malloc_r>:
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	1ccd      	adds	r5, r1, #3
 8003ad4:	f025 0503 	bic.w	r5, r5, #3
 8003ad8:	3508      	adds	r5, #8
 8003ada:	2d0c      	cmp	r5, #12
 8003adc:	bf38      	it	cc
 8003ade:	250c      	movcc	r5, #12
 8003ae0:	2d00      	cmp	r5, #0
 8003ae2:	4606      	mov	r6, r0
 8003ae4:	db01      	blt.n	8003aea <_malloc_r+0x1a>
 8003ae6:	42a9      	cmp	r1, r5
 8003ae8:	d903      	bls.n	8003af2 <_malloc_r+0x22>
 8003aea:	230c      	movs	r3, #12
 8003aec:	6033      	str	r3, [r6, #0]
 8003aee:	2000      	movs	r0, #0
 8003af0:	bd70      	pop	{r4, r5, r6, pc}
 8003af2:	f000 f8f5 	bl	8003ce0 <__malloc_lock>
 8003af6:	4a23      	ldr	r2, [pc, #140]	; (8003b84 <_malloc_r+0xb4>)
 8003af8:	6814      	ldr	r4, [r2, #0]
 8003afa:	4621      	mov	r1, r4
 8003afc:	b991      	cbnz	r1, 8003b24 <_malloc_r+0x54>
 8003afe:	4c22      	ldr	r4, [pc, #136]	; (8003b88 <_malloc_r+0xb8>)
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	b91b      	cbnz	r3, 8003b0c <_malloc_r+0x3c>
 8003b04:	4630      	mov	r0, r6
 8003b06:	f000 f841 	bl	8003b8c <_sbrk_r>
 8003b0a:	6020      	str	r0, [r4, #0]
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	4630      	mov	r0, r6
 8003b10:	f000 f83c 	bl	8003b8c <_sbrk_r>
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	d126      	bne.n	8003b66 <_malloc_r+0x96>
 8003b18:	230c      	movs	r3, #12
 8003b1a:	6033      	str	r3, [r6, #0]
 8003b1c:	4630      	mov	r0, r6
 8003b1e:	f000 f8e0 	bl	8003ce2 <__malloc_unlock>
 8003b22:	e7e4      	b.n	8003aee <_malloc_r+0x1e>
 8003b24:	680b      	ldr	r3, [r1, #0]
 8003b26:	1b5b      	subs	r3, r3, r5
 8003b28:	d41a      	bmi.n	8003b60 <_malloc_r+0x90>
 8003b2a:	2b0b      	cmp	r3, #11
 8003b2c:	d90f      	bls.n	8003b4e <_malloc_r+0x7e>
 8003b2e:	600b      	str	r3, [r1, #0]
 8003b30:	50cd      	str	r5, [r1, r3]
 8003b32:	18cc      	adds	r4, r1, r3
 8003b34:	4630      	mov	r0, r6
 8003b36:	f000 f8d4 	bl	8003ce2 <__malloc_unlock>
 8003b3a:	f104 000b 	add.w	r0, r4, #11
 8003b3e:	1d23      	adds	r3, r4, #4
 8003b40:	f020 0007 	bic.w	r0, r0, #7
 8003b44:	1ac3      	subs	r3, r0, r3
 8003b46:	d01b      	beq.n	8003b80 <_malloc_r+0xb0>
 8003b48:	425a      	negs	r2, r3
 8003b4a:	50e2      	str	r2, [r4, r3]
 8003b4c:	bd70      	pop	{r4, r5, r6, pc}
 8003b4e:	428c      	cmp	r4, r1
 8003b50:	bf0d      	iteet	eq
 8003b52:	6863      	ldreq	r3, [r4, #4]
 8003b54:	684b      	ldrne	r3, [r1, #4]
 8003b56:	6063      	strne	r3, [r4, #4]
 8003b58:	6013      	streq	r3, [r2, #0]
 8003b5a:	bf18      	it	ne
 8003b5c:	460c      	movne	r4, r1
 8003b5e:	e7e9      	b.n	8003b34 <_malloc_r+0x64>
 8003b60:	460c      	mov	r4, r1
 8003b62:	6849      	ldr	r1, [r1, #4]
 8003b64:	e7ca      	b.n	8003afc <_malloc_r+0x2c>
 8003b66:	1cc4      	adds	r4, r0, #3
 8003b68:	f024 0403 	bic.w	r4, r4, #3
 8003b6c:	42a0      	cmp	r0, r4
 8003b6e:	d005      	beq.n	8003b7c <_malloc_r+0xac>
 8003b70:	1a21      	subs	r1, r4, r0
 8003b72:	4630      	mov	r0, r6
 8003b74:	f000 f80a 	bl	8003b8c <_sbrk_r>
 8003b78:	3001      	adds	r0, #1
 8003b7a:	d0cd      	beq.n	8003b18 <_malloc_r+0x48>
 8003b7c:	6025      	str	r5, [r4, #0]
 8003b7e:	e7d9      	b.n	8003b34 <_malloc_r+0x64>
 8003b80:	bd70      	pop	{r4, r5, r6, pc}
 8003b82:	bf00      	nop
 8003b84:	20000490 	.word	0x20000490
 8003b88:	20000494 	.word	0x20000494

08003b8c <_sbrk_r>:
 8003b8c:	b538      	push	{r3, r4, r5, lr}
 8003b8e:	4c06      	ldr	r4, [pc, #24]	; (8003ba8 <_sbrk_r+0x1c>)
 8003b90:	2300      	movs	r3, #0
 8003b92:	4605      	mov	r5, r0
 8003b94:	4608      	mov	r0, r1
 8003b96:	6023      	str	r3, [r4, #0]
 8003b98:	f7ff f8f6 	bl	8002d88 <_sbrk>
 8003b9c:	1c43      	adds	r3, r0, #1
 8003b9e:	d102      	bne.n	8003ba6 <_sbrk_r+0x1a>
 8003ba0:	6823      	ldr	r3, [r4, #0]
 8003ba2:	b103      	cbz	r3, 8003ba6 <_sbrk_r+0x1a>
 8003ba4:	602b      	str	r3, [r5, #0]
 8003ba6:	bd38      	pop	{r3, r4, r5, pc}
 8003ba8:	200005fc 	.word	0x200005fc

08003bac <__sread>:
 8003bac:	b510      	push	{r4, lr}
 8003bae:	460c      	mov	r4, r1
 8003bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bb4:	f000 f896 	bl	8003ce4 <_read_r>
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	bfab      	itete	ge
 8003bbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003bbe:	89a3      	ldrhlt	r3, [r4, #12]
 8003bc0:	181b      	addge	r3, r3, r0
 8003bc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003bc6:	bfac      	ite	ge
 8003bc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003bca:	81a3      	strhlt	r3, [r4, #12]
 8003bcc:	bd10      	pop	{r4, pc}

08003bce <__swrite>:
 8003bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bd2:	461f      	mov	r7, r3
 8003bd4:	898b      	ldrh	r3, [r1, #12]
 8003bd6:	05db      	lsls	r3, r3, #23
 8003bd8:	4605      	mov	r5, r0
 8003bda:	460c      	mov	r4, r1
 8003bdc:	4616      	mov	r6, r2
 8003bde:	d505      	bpl.n	8003bec <__swrite+0x1e>
 8003be0:	2302      	movs	r3, #2
 8003be2:	2200      	movs	r2, #0
 8003be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003be8:	f000 f868 	bl	8003cbc <_lseek_r>
 8003bec:	89a3      	ldrh	r3, [r4, #12]
 8003bee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bf6:	81a3      	strh	r3, [r4, #12]
 8003bf8:	4632      	mov	r2, r6
 8003bfa:	463b      	mov	r3, r7
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c02:	f000 b817 	b.w	8003c34 <_write_r>

08003c06 <__sseek>:
 8003c06:	b510      	push	{r4, lr}
 8003c08:	460c      	mov	r4, r1
 8003c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c0e:	f000 f855 	bl	8003cbc <_lseek_r>
 8003c12:	1c43      	adds	r3, r0, #1
 8003c14:	89a3      	ldrh	r3, [r4, #12]
 8003c16:	bf15      	itete	ne
 8003c18:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c22:	81a3      	strheq	r3, [r4, #12]
 8003c24:	bf18      	it	ne
 8003c26:	81a3      	strhne	r3, [r4, #12]
 8003c28:	bd10      	pop	{r4, pc}

08003c2a <__sclose>:
 8003c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c2e:	f000 b813 	b.w	8003c58 <_close_r>
	...

08003c34 <_write_r>:
 8003c34:	b538      	push	{r3, r4, r5, lr}
 8003c36:	4c07      	ldr	r4, [pc, #28]	; (8003c54 <_write_r+0x20>)
 8003c38:	4605      	mov	r5, r0
 8003c3a:	4608      	mov	r0, r1
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	2200      	movs	r2, #0
 8003c40:	6022      	str	r2, [r4, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	f7ff f884 	bl	8002d50 <_write>
 8003c48:	1c43      	adds	r3, r0, #1
 8003c4a:	d102      	bne.n	8003c52 <_write_r+0x1e>
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	b103      	cbz	r3, 8003c52 <_write_r+0x1e>
 8003c50:	602b      	str	r3, [r5, #0]
 8003c52:	bd38      	pop	{r3, r4, r5, pc}
 8003c54:	200005fc 	.word	0x200005fc

08003c58 <_close_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	4c06      	ldr	r4, [pc, #24]	; (8003c74 <_close_r+0x1c>)
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	4605      	mov	r5, r0
 8003c60:	4608      	mov	r0, r1
 8003c62:	6023      	str	r3, [r4, #0]
 8003c64:	f7ff f8bc 	bl	8002de0 <_close>
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	d102      	bne.n	8003c72 <_close_r+0x1a>
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	b103      	cbz	r3, 8003c72 <_close_r+0x1a>
 8003c70:	602b      	str	r3, [r5, #0]
 8003c72:	bd38      	pop	{r3, r4, r5, pc}
 8003c74:	200005fc 	.word	0x200005fc

08003c78 <_fstat_r>:
 8003c78:	b538      	push	{r3, r4, r5, lr}
 8003c7a:	4c07      	ldr	r4, [pc, #28]	; (8003c98 <_fstat_r+0x20>)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	4605      	mov	r5, r0
 8003c80:	4608      	mov	r0, r1
 8003c82:	4611      	mov	r1, r2
 8003c84:	6023      	str	r3, [r4, #0]
 8003c86:	f7ff f8b7 	bl	8002df8 <_fstat>
 8003c8a:	1c43      	adds	r3, r0, #1
 8003c8c:	d102      	bne.n	8003c94 <_fstat_r+0x1c>
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	b103      	cbz	r3, 8003c94 <_fstat_r+0x1c>
 8003c92:	602b      	str	r3, [r5, #0]
 8003c94:	bd38      	pop	{r3, r4, r5, pc}
 8003c96:	bf00      	nop
 8003c98:	200005fc 	.word	0x200005fc

08003c9c <_isatty_r>:
 8003c9c:	b538      	push	{r3, r4, r5, lr}
 8003c9e:	4c06      	ldr	r4, [pc, #24]	; (8003cb8 <_isatty_r+0x1c>)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	4605      	mov	r5, r0
 8003ca4:	4608      	mov	r0, r1
 8003ca6:	6023      	str	r3, [r4, #0]
 8003ca8:	f7ff f8b6 	bl	8002e18 <_isatty>
 8003cac:	1c43      	adds	r3, r0, #1
 8003cae:	d102      	bne.n	8003cb6 <_isatty_r+0x1a>
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	b103      	cbz	r3, 8003cb6 <_isatty_r+0x1a>
 8003cb4:	602b      	str	r3, [r5, #0]
 8003cb6:	bd38      	pop	{r3, r4, r5, pc}
 8003cb8:	200005fc 	.word	0x200005fc

08003cbc <_lseek_r>:
 8003cbc:	b538      	push	{r3, r4, r5, lr}
 8003cbe:	4c07      	ldr	r4, [pc, #28]	; (8003cdc <_lseek_r+0x20>)
 8003cc0:	4605      	mov	r5, r0
 8003cc2:	4608      	mov	r0, r1
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	6022      	str	r2, [r4, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f7ff f8af 	bl	8002e2e <_lseek>
 8003cd0:	1c43      	adds	r3, r0, #1
 8003cd2:	d102      	bne.n	8003cda <_lseek_r+0x1e>
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	b103      	cbz	r3, 8003cda <_lseek_r+0x1e>
 8003cd8:	602b      	str	r3, [r5, #0]
 8003cda:	bd38      	pop	{r3, r4, r5, pc}
 8003cdc:	200005fc 	.word	0x200005fc

08003ce0 <__malloc_lock>:
 8003ce0:	4770      	bx	lr

08003ce2 <__malloc_unlock>:
 8003ce2:	4770      	bx	lr

08003ce4 <_read_r>:
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	4c07      	ldr	r4, [pc, #28]	; (8003d04 <_read_r+0x20>)
 8003ce8:	4605      	mov	r5, r0
 8003cea:	4608      	mov	r0, r1
 8003cec:	4611      	mov	r1, r2
 8003cee:	2200      	movs	r2, #0
 8003cf0:	6022      	str	r2, [r4, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f7ff f80f 	bl	8002d16 <_read>
 8003cf8:	1c43      	adds	r3, r0, #1
 8003cfa:	d102      	bne.n	8003d02 <_read_r+0x1e>
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	b103      	cbz	r3, 8003d02 <_read_r+0x1e>
 8003d00:	602b      	str	r3, [r5, #0]
 8003d02:	bd38      	pop	{r3, r4, r5, pc}
 8003d04:	200005fc 	.word	0x200005fc

08003d08 <_init>:
 8003d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0a:	bf00      	nop
 8003d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d0e:	bc08      	pop	{r3}
 8003d10:	469e      	mov	lr, r3
 8003d12:	4770      	bx	lr

08003d14 <_fini>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	bf00      	nop
 8003d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1a:	bc08      	pop	{r3}
 8003d1c:	469e      	mov	lr, r3
 8003d1e:	4770      	bx	lr
