
Magisterka_normal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba4  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800621c  0800621c  0001621c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006224  08006224  00016224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800622c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          00000674  20000070  20000070  00020070  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  200006e4  200006e4  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   000117a9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002a09  00000000  00000000  00031849  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f50  00000000  00000000  00034258  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000de0  00000000  00000000  000351a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000259e0  00000000  00000000  00035f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000bb15  00000000  00000000  0005b968  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d977f  00000000  00000000  0006747d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00140bfc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004484  00000000  00000000  00140c78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005660 	.word	0x08005660

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005660 	.word	0x08005660

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005a4:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 f94b 	bl	8000864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 f808 	bl	80005e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d4:	f003 fc82 	bl	8003edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023c00 	.word	0x40023c00

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_InitTick+0x54>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_InitTick+0x58>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f963 	bl	80008ce <HAL_SYSTICK_Config>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e00e      	b.n	8000630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d80a      	bhi.n	800062e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 f92b 	bl	800087a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <HAL_InitTick+0x5c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800062a:	2300      	movs	r3, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000008 	.word	0x20000008
 800063c:	20000004 	.word	0x20000004
 8000640:	20000000 	.word	0x20000000

08000644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_IncTick+0x20>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_IncTick+0x24>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <HAL_IncTick+0x24>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000004 	.word	0x20000004
 8000668:	20000498 	.word	0x20000498

0800066c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return uwTick;
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <HAL_GetTick+0x14>)
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000498 	.word	0x20000498

08000684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800068c:	f7ff ffee 	bl	800066c <HAL_GetTick>
 8000690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800069c:	d005      	beq.n	80006aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <HAL_Delay+0x40>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4413      	add	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006aa:	bf00      	nop
 80006ac:	f7ff ffde 	bl	800066c <HAL_GetTick>
 80006b0:	4602      	mov	r2, r0
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	1ad2      	subs	r2, r2, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d3f7      	bcc.n	80006ac <HAL_Delay+0x28>
  {
  }
}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000004 	.word	0x20000004

080006c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e4:	4013      	ands	r3, r2
 80006e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fa:	4a04      	ldr	r2, [pc, #16]	; (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	60d3      	str	r3, [r2, #12]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <__NVIC_GetPriorityGrouping+0x18>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	f003 0307 	and.w	r3, r3, #7
}
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	2b00      	cmp	r3, #0
 800073c:	db0b      	blt.n	8000756 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800073e:	4909      	ldr	r1, [pc, #36]	; (8000764 <__NVIC_EnableIRQ+0x38>)
 8000740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000744:	095b      	lsrs	r3, r3, #5
 8000746:	79fa      	ldrb	r2, [r7, #7]
 8000748:	f002 021f 	and.w	r2, r2, #31
 800074c:	2001      	movs	r0, #1
 800074e:	fa00 f202 	lsl.w	r2, r0, r2
 8000752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000e100 	.word	0xe000e100

08000768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	6039      	str	r1, [r7, #0]
 8000772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000778:	2b00      	cmp	r3, #0
 800077a:	db0a      	blt.n	8000792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077c:	490d      	ldr	r1, [pc, #52]	; (80007b4 <__NVIC_SetPriority+0x4c>)
 800077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000782:	683a      	ldr	r2, [r7, #0]
 8000784:	b2d2      	uxtb	r2, r2
 8000786:	0112      	lsls	r2, r2, #4
 8000788:	b2d2      	uxtb	r2, r2
 800078a:	440b      	add	r3, r1
 800078c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000790:	e00a      	b.n	80007a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000792:	4909      	ldr	r1, [pc, #36]	; (80007b8 <__NVIC_SetPriority+0x50>)
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	f003 030f 	and.w	r3, r3, #15
 800079a:	3b04      	subs	r3, #4
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	b2d2      	uxtb	r2, r2
 80007a0:	0112      	lsls	r2, r2, #4
 80007a2:	b2d2      	uxtb	r2, r2
 80007a4:	440b      	add	r3, r1
 80007a6:	761a      	strb	r2, [r3, #24]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000e100 	.word	0xe000e100
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007bc:	b480      	push	{r7}
 80007be:	b089      	sub	sp, #36	; 0x24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	f1c3 0307 	rsb	r3, r3, #7
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	bf28      	it	cs
 80007da:	2304      	movcs	r3, #4
 80007dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3304      	adds	r3, #4
 80007e2:	2b06      	cmp	r3, #6
 80007e4:	d902      	bls.n	80007ec <NVIC_EncodePriority+0x30>
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3b03      	subs	r3, #3
 80007ea:	e000      	b.n	80007ee <NVIC_EncodePriority+0x32>
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f0:	2201      	movs	r2, #1
 80007f2:	69bb      	ldr	r3, [r7, #24]
 80007f4:	fa02 f303 	lsl.w	r3, r2, r3
 80007f8:	1e5a      	subs	r2, r3, #1
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	401a      	ands	r2, r3
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000802:	2101      	movs	r1, #1
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	fa01 f303 	lsl.w	r3, r1, r3
 800080a:	1e59      	subs	r1, r3, #1
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000810:	4313      	orrs	r3, r2
         );
}
 8000812:	4618      	mov	r0, r3
 8000814:	3724      	adds	r7, #36	; 0x24
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
	...

08000820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3b01      	subs	r3, #1
 800082c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000830:	d301      	bcc.n	8000836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000832:	2301      	movs	r3, #1
 8000834:	e00f      	b.n	8000856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <SysTick_Config+0x40>)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3b01      	subs	r3, #1
 800083c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800083e:	210f      	movs	r1, #15
 8000840:	f04f 30ff 	mov.w	r0, #4294967295
 8000844:	f7ff ff90 	bl	8000768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <SysTick_Config+0x40>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800084e:	4b04      	ldr	r3, [pc, #16]	; (8000860 <SysTick_Config+0x40>)
 8000850:	2207      	movs	r2, #7
 8000852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	e000e010 	.word	0xe000e010

08000864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff ff2b 	bl	80006c8 <__NVIC_SetPriorityGrouping>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800087a:	b580      	push	{r7, lr}
 800087c:	b086      	sub	sp, #24
 800087e:	af00      	add	r7, sp, #0
 8000880:	4603      	mov	r3, r0
 8000882:	60b9      	str	r1, [r7, #8]
 8000884:	607a      	str	r2, [r7, #4]
 8000886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800088c:	f7ff ff40 	bl	8000710 <__NVIC_GetPriorityGrouping>
 8000890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	68b9      	ldr	r1, [r7, #8]
 8000896:	6978      	ldr	r0, [r7, #20]
 8000898:	f7ff ff90 	bl	80007bc <NVIC_EncodePriority>
 800089c:	4602      	mov	r2, r0
 800089e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a2:	4611      	mov	r1, r2
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff5f 	bl	8000768 <__NVIC_SetPriority>
}
 80008aa:	bf00      	nop
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	4603      	mov	r3, r0
 80008ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff33 	bl	800072c <__NVIC_EnableIRQ>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ffa2 	bl	8000820 <SysTick_Config>
 80008dc:	4603      	mov	r3, r0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
 8000902:	e177      	b.n	8000bf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000904:	2201      	movs	r2, #1
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	4013      	ands	r3, r2
 8000916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	429a      	cmp	r2, r3
 800091e:	f040 8166 	bne.w	8000bee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	2b02      	cmp	r3, #2
 8000928:	d003      	beq.n	8000932 <HAL_GPIO_Init+0x4a>
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	2b12      	cmp	r3, #18
 8000930:	d123      	bne.n	800097a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	08da      	lsrs	r2, r3, #3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3208      	adds	r2, #8
 800093a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800093e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	220f      	movs	r2, #15
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	4013      	ands	r3, r2
 8000954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	691a      	ldr	r2, [r3, #16]
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	f003 0307 	and.w	r3, r3, #7
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	4313      	orrs	r3, r2
 800096a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	08da      	lsrs	r2, r3, #3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3208      	adds	r2, #8
 8000974:	69b9      	ldr	r1, [r7, #24]
 8000976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	2203      	movs	r2, #3
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	4013      	ands	r3, r2
 8000990:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f003 0203 	and.w	r2, r3, #3
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d00b      	beq.n	80009ce <HAL_GPIO_Init+0xe6>
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d007      	beq.n	80009ce <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009c2:	2b11      	cmp	r3, #17
 80009c4:	d003      	beq.n	80009ce <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	2b12      	cmp	r3, #18
 80009cc:	d130      	bne.n	8000a30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	2203      	movs	r2, #3
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	4013      	ands	r3, r2
 80009e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	68da      	ldr	r2, [r3, #12]
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a04:	2201      	movs	r2, #1
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	4013      	ands	r3, r2
 8000a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	091b      	lsrs	r3, r3, #4
 8000a1a:	f003 0201 	and.w	r2, r3, #1
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	4013      	ands	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	689a      	ldr	r2, [r3, #8]
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	f000 80c0 	beq.w	8000bee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4a65      	ldr	r2, [pc, #404]	; (8000c08 <HAL_GPIO_Init+0x320>)
 8000a74:	4b64      	ldr	r3, [pc, #400]	; (8000c08 <HAL_GPIO_Init+0x320>)
 8000a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7e:	4b62      	ldr	r3, [pc, #392]	; (8000c08 <HAL_GPIO_Init+0x320>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a8a:	4a60      	ldr	r2, [pc, #384]	; (8000c0c <HAL_GPIO_Init+0x324>)
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	3302      	adds	r3, #2
 8000a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	f003 0303 	and.w	r3, r3, #3
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	220f      	movs	r2, #15
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a57      	ldr	r2, [pc, #348]	; (8000c10 <HAL_GPIO_Init+0x328>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d037      	beq.n	8000b26 <HAL_GPIO_Init+0x23e>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a56      	ldr	r2, [pc, #344]	; (8000c14 <HAL_GPIO_Init+0x32c>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d031      	beq.n	8000b22 <HAL_GPIO_Init+0x23a>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a55      	ldr	r2, [pc, #340]	; (8000c18 <HAL_GPIO_Init+0x330>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d02b      	beq.n	8000b1e <HAL_GPIO_Init+0x236>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a54      	ldr	r2, [pc, #336]	; (8000c1c <HAL_GPIO_Init+0x334>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d025      	beq.n	8000b1a <HAL_GPIO_Init+0x232>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a53      	ldr	r2, [pc, #332]	; (8000c20 <HAL_GPIO_Init+0x338>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d01f      	beq.n	8000b16 <HAL_GPIO_Init+0x22e>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a52      	ldr	r2, [pc, #328]	; (8000c24 <HAL_GPIO_Init+0x33c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d019      	beq.n	8000b12 <HAL_GPIO_Init+0x22a>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a51      	ldr	r2, [pc, #324]	; (8000c28 <HAL_GPIO_Init+0x340>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d013      	beq.n	8000b0e <HAL_GPIO_Init+0x226>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a50      	ldr	r2, [pc, #320]	; (8000c2c <HAL_GPIO_Init+0x344>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d00d      	beq.n	8000b0a <HAL_GPIO_Init+0x222>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a4f      	ldr	r2, [pc, #316]	; (8000c30 <HAL_GPIO_Init+0x348>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d007      	beq.n	8000b06 <HAL_GPIO_Init+0x21e>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a4e      	ldr	r2, [pc, #312]	; (8000c34 <HAL_GPIO_Init+0x34c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d101      	bne.n	8000b02 <HAL_GPIO_Init+0x21a>
 8000afe:	2309      	movs	r3, #9
 8000b00:	e012      	b.n	8000b28 <HAL_GPIO_Init+0x240>
 8000b02:	230a      	movs	r3, #10
 8000b04:	e010      	b.n	8000b28 <HAL_GPIO_Init+0x240>
 8000b06:	2308      	movs	r3, #8
 8000b08:	e00e      	b.n	8000b28 <HAL_GPIO_Init+0x240>
 8000b0a:	2307      	movs	r3, #7
 8000b0c:	e00c      	b.n	8000b28 <HAL_GPIO_Init+0x240>
 8000b0e:	2306      	movs	r3, #6
 8000b10:	e00a      	b.n	8000b28 <HAL_GPIO_Init+0x240>
 8000b12:	2305      	movs	r3, #5
 8000b14:	e008      	b.n	8000b28 <HAL_GPIO_Init+0x240>
 8000b16:	2304      	movs	r3, #4
 8000b18:	e006      	b.n	8000b28 <HAL_GPIO_Init+0x240>
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	e004      	b.n	8000b28 <HAL_GPIO_Init+0x240>
 8000b1e:	2302      	movs	r3, #2
 8000b20:	e002      	b.n	8000b28 <HAL_GPIO_Init+0x240>
 8000b22:	2301      	movs	r3, #1
 8000b24:	e000      	b.n	8000b28 <HAL_GPIO_Init+0x240>
 8000b26:	2300      	movs	r3, #0
 8000b28:	69fa      	ldr	r2, [r7, #28]
 8000b2a:	f002 0203 	and.w	r2, r2, #3
 8000b2e:	0092      	lsls	r2, r2, #2
 8000b30:	4093      	lsls	r3, r2
 8000b32:	69ba      	ldr	r2, [r7, #24]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b38:	4934      	ldr	r1, [pc, #208]	; (8000c0c <HAL_GPIO_Init+0x324>)
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	089b      	lsrs	r3, r3, #2
 8000b3e:	3302      	adds	r3, #2
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b46:	4b3c      	ldr	r3, [pc, #240]	; (8000c38 <HAL_GPIO_Init+0x350>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	4013      	ands	r3, r2
 8000b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d003      	beq.n	8000b6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b6a:	4a33      	ldr	r2, [pc, #204]	; (8000c38 <HAL_GPIO_Init+0x350>)
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b70:	4b31      	ldr	r3, [pc, #196]	; (8000c38 <HAL_GPIO_Init+0x350>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	69ba      	ldr	r2, [r7, #24]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d003      	beq.n	8000b94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b94:	4a28      	ldr	r2, [pc, #160]	; (8000c38 <HAL_GPIO_Init+0x350>)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b9a:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <HAL_GPIO_Init+0x350>)
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bbe:	4a1e      	ldr	r2, [pc, #120]	; (8000c38 <HAL_GPIO_Init+0x350>)
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <HAL_GPIO_Init+0x350>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000be8:	4a13      	ldr	r2, [pc, #76]	; (8000c38 <HAL_GPIO_Init+0x350>)
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	61fb      	str	r3, [r7, #28]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	2b0f      	cmp	r3, #15
 8000bf8:	f67f ae84 	bls.w	8000904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	3724      	adds	r7, #36	; 0x24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40013800 	.word	0x40013800
 8000c10:	40020000 	.word	0x40020000
 8000c14:	40020400 	.word	0x40020400
 8000c18:	40020800 	.word	0x40020800
 8000c1c:	40020c00 	.word	0x40020c00
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40021400 	.word	0x40021400
 8000c28:	40021800 	.word	0x40021800
 8000c2c:	40021c00 	.word	0x40021c00
 8000c30:	40022000 	.word	0x40022000
 8000c34:	40022400 	.word	0x40022400
 8000c38:	40013c00 	.word	0x40013c00

08000c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	807b      	strh	r3, [r7, #2]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c4c:	787b      	ldrb	r3, [r7, #1]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d003      	beq.n	8000c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c52:	887a      	ldrh	r2, [r7, #2]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c58:	e003      	b.n	8000c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c5a:	887b      	ldrh	r3, [r7, #2]
 8000c5c:	041a      	lsls	r2, r3, #16
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	619a      	str	r2, [r3, #24]
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4a20      	ldr	r2, [pc, #128]	; (8000d00 <HAL_PWREx_EnableOverDrive+0x90>)
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <HAL_PWREx_EnableOverDrive+0x90>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <HAL_PWREx_EnableOverDrive+0x90>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000c96:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <HAL_PWREx_EnableOverDrive+0x94>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c9c:	f7ff fce6 	bl	800066c <HAL_GetTick>
 8000ca0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ca2:	e009      	b.n	8000cb8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ca4:	f7ff fce2 	bl	800066c <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cb2:	d901      	bls.n	8000cb8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	e01f      	b.n	8000cf8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <HAL_PWREx_EnableOverDrive+0x98>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cc4:	d1ee      	bne.n	8000ca4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ccc:	f7ff fcce 	bl	800066c <HAL_GetTick>
 8000cd0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000cd2:	e009      	b.n	8000ce8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000cd4:	f7ff fcca 	bl	800066c <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ce2:	d901      	bls.n	8000ce8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e007      	b.n	8000cf8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <HAL_PWREx_EnableOverDrive+0x98>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000cf4:	d1ee      	bne.n	8000cd4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40023800 	.word	0x40023800
 8000d04:	420e0040 	.word	0x420e0040
 8000d08:	40007000 	.word	0x40007000
 8000d0c:	420e0044 	.word	0x420e0044

08000d10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e22d      	b.n	800117e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d075      	beq.n	8000e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d2e:	4ba3      	ldr	r3, [pc, #652]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f003 030c 	and.w	r3, r3, #12
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	d00c      	beq.n	8000d54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d3a:	4ba0      	ldr	r3, [pc, #640]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d42:	2b08      	cmp	r3, #8
 8000d44:	d112      	bne.n	8000d6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d46:	4b9d      	ldr	r3, [pc, #628]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000d52:	d10b      	bne.n	8000d6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d54:	4b99      	ldr	r3, [pc, #612]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d05b      	beq.n	8000e18 <HAL_RCC_OscConfig+0x108>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d157      	bne.n	8000e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e208      	b.n	800117e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d74:	d106      	bne.n	8000d84 <HAL_RCC_OscConfig+0x74>
 8000d76:	4a91      	ldr	r2, [pc, #580]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000d78:	4b90      	ldr	r3, [pc, #576]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e01d      	b.n	8000dc0 <HAL_RCC_OscConfig+0xb0>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d8c:	d10c      	bne.n	8000da8 <HAL_RCC_OscConfig+0x98>
 8000d8e:	4a8b      	ldr	r2, [pc, #556]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000d90:	4b8a      	ldr	r3, [pc, #552]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	4a88      	ldr	r2, [pc, #544]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000d9c:	4b87      	ldr	r3, [pc, #540]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	e00b      	b.n	8000dc0 <HAL_RCC_OscConfig+0xb0>
 8000da8:	4a84      	ldr	r2, [pc, #528]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000daa:	4b84      	ldr	r3, [pc, #528]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4a81      	ldr	r2, [pc, #516]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000db6:	4b81      	ldr	r3, [pc, #516]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d013      	beq.n	8000df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc8:	f7ff fc50 	bl	800066c <HAL_GetTick>
 8000dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dce:	e008      	b.n	8000de2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dd0:	f7ff fc4c 	bl	800066c <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b64      	cmp	r3, #100	; 0x64
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e1cd      	b.n	800117e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de2:	4b76      	ldr	r3, [pc, #472]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f0      	beq.n	8000dd0 <HAL_RCC_OscConfig+0xc0>
 8000dee:	e014      	b.n	8000e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df0:	f7ff fc3c 	bl	800066c <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000df8:	f7ff fc38 	bl	800066c <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b64      	cmp	r3, #100	; 0x64
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e1b9      	b.n	800117e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e0a:	4b6c      	ldr	r3, [pc, #432]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f0      	bne.n	8000df8 <HAL_RCC_OscConfig+0xe8>
 8000e16:	e000      	b.n	8000e1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d063      	beq.n	8000eee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e26:	4b65      	ldr	r3, [pc, #404]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f003 030c 	and.w	r3, r3, #12
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d00b      	beq.n	8000e4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e32:	4b62      	ldr	r3, [pc, #392]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e3a:	2b08      	cmp	r3, #8
 8000e3c:	d11c      	bne.n	8000e78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e3e:	4b5f      	ldr	r3, [pc, #380]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d116      	bne.n	8000e78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e4a:	4b5c      	ldr	r3, [pc, #368]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d005      	beq.n	8000e62 <HAL_RCC_OscConfig+0x152>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d001      	beq.n	8000e62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e18d      	b.n	800117e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e62:	4956      	ldr	r1, [pc, #344]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000e64:	4b55      	ldr	r3, [pc, #340]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	691b      	ldr	r3, [r3, #16]
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	4313      	orrs	r3, r2
 8000e74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e76:	e03a      	b.n	8000eee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d020      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e80:	4b4f      	ldr	r3, [pc, #316]	; (8000fc0 <HAL_RCC_OscConfig+0x2b0>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e86:	f7ff fbf1 	bl	800066c <HAL_GetTick>
 8000e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e8c:	e008      	b.n	8000ea0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e8e:	f7ff fbed 	bl	800066c <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d901      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e16e      	b.n	800117e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea0:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d0f0      	beq.n	8000e8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eac:	4943      	ldr	r1, [pc, #268]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000eae:	4b43      	ldr	r3, [pc, #268]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	600b      	str	r3, [r1, #0]
 8000ec0:	e015      	b.n	8000eee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ec2:	4b3f      	ldr	r3, [pc, #252]	; (8000fc0 <HAL_RCC_OscConfig+0x2b0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec8:	f7ff fbd0 	bl	800066c <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ed0:	f7ff fbcc 	bl	800066c <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e14d      	b.n	800117e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ee2:	4b36      	ldr	r3, [pc, #216]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1f0      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d030      	beq.n	8000f5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d016      	beq.n	8000f30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f02:	4b30      	ldr	r3, [pc, #192]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f08:	f7ff fbb0 	bl	800066c <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f10:	f7ff fbac 	bl	800066c <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e12d      	b.n	800117e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f22:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0f0      	beq.n	8000f10 <HAL_RCC_OscConfig+0x200>
 8000f2e:	e015      	b.n	8000f5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f30:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <HAL_RCC_OscConfig+0x2b4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f36:	f7ff fb99 	bl	800066c <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f3e:	f7ff fb95 	bl	800066c <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e116      	b.n	800117e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1f0      	bne.n	8000f3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f000 80a0 	beq.w	80010aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10f      	bne.n	8000f9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f88:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <HAL_RCC_OscConfig+0x2ac>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f96:	2301      	movs	r3, #1
 8000f98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_RCC_OscConfig+0x2b8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d121      	bne.n	8000fea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fa6:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <HAL_RCC_OscConfig+0x2b8>)
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <HAL_RCC_OscConfig+0x2b8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fb2:	f7ff fb5b 	bl	800066c <HAL_GetTick>
 8000fb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb8:	e011      	b.n	8000fde <HAL_RCC_OscConfig+0x2ce>
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	42470000 	.word	0x42470000
 8000fc4:	42470e80 	.word	0x42470e80
 8000fc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fcc:	f7ff fb4e 	bl	800066c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e0cf      	b.n	800117e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fde:	4b6a      	ldr	r3, [pc, #424]	; (8001188 <HAL_RCC_OscConfig+0x478>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f0      	beq.n	8000fcc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d106      	bne.n	8001000 <HAL_RCC_OscConfig+0x2f0>
 8000ff2:	4a66      	ldr	r2, [pc, #408]	; (800118c <HAL_RCC_OscConfig+0x47c>)
 8000ff4:	4b65      	ldr	r3, [pc, #404]	; (800118c <HAL_RCC_OscConfig+0x47c>)
 8000ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8000ffe:	e01c      	b.n	800103a <HAL_RCC_OscConfig+0x32a>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	2b05      	cmp	r3, #5
 8001006:	d10c      	bne.n	8001022 <HAL_RCC_OscConfig+0x312>
 8001008:	4a60      	ldr	r2, [pc, #384]	; (800118c <HAL_RCC_OscConfig+0x47c>)
 800100a:	4b60      	ldr	r3, [pc, #384]	; (800118c <HAL_RCC_OscConfig+0x47c>)
 800100c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	6713      	str	r3, [r2, #112]	; 0x70
 8001014:	4a5d      	ldr	r2, [pc, #372]	; (800118c <HAL_RCC_OscConfig+0x47c>)
 8001016:	4b5d      	ldr	r3, [pc, #372]	; (800118c <HAL_RCC_OscConfig+0x47c>)
 8001018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	6713      	str	r3, [r2, #112]	; 0x70
 8001020:	e00b      	b.n	800103a <HAL_RCC_OscConfig+0x32a>
 8001022:	4a5a      	ldr	r2, [pc, #360]	; (800118c <HAL_RCC_OscConfig+0x47c>)
 8001024:	4b59      	ldr	r3, [pc, #356]	; (800118c <HAL_RCC_OscConfig+0x47c>)
 8001026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001028:	f023 0301 	bic.w	r3, r3, #1
 800102c:	6713      	str	r3, [r2, #112]	; 0x70
 800102e:	4a57      	ldr	r2, [pc, #348]	; (800118c <HAL_RCC_OscConfig+0x47c>)
 8001030:	4b56      	ldr	r3, [pc, #344]	; (800118c <HAL_RCC_OscConfig+0x47c>)
 8001032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001034:	f023 0304 	bic.w	r3, r3, #4
 8001038:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d015      	beq.n	800106e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001042:	f7ff fb13 	bl	800066c <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001048:	e00a      	b.n	8001060 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800104a:	f7ff fb0f 	bl	800066c <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	f241 3288 	movw	r2, #5000	; 0x1388
 8001058:	4293      	cmp	r3, r2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e08e      	b.n	800117e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001060:	4b4a      	ldr	r3, [pc, #296]	; (800118c <HAL_RCC_OscConfig+0x47c>)
 8001062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0ee      	beq.n	800104a <HAL_RCC_OscConfig+0x33a>
 800106c:	e014      	b.n	8001098 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106e:	f7ff fafd 	bl	800066c <HAL_GetTick>
 8001072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001074:	e00a      	b.n	800108c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001076:	f7ff faf9 	bl	800066c <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	f241 3288 	movw	r2, #5000	; 0x1388
 8001084:	4293      	cmp	r3, r2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e078      	b.n	800117e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800108c:	4b3f      	ldr	r3, [pc, #252]	; (800118c <HAL_RCC_OscConfig+0x47c>)
 800108e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1ee      	bne.n	8001076 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001098:	7dfb      	ldrb	r3, [r7, #23]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d105      	bne.n	80010aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800109e:	4a3b      	ldr	r2, [pc, #236]	; (800118c <HAL_RCC_OscConfig+0x47c>)
 80010a0:	4b3a      	ldr	r3, [pc, #232]	; (800118c <HAL_RCC_OscConfig+0x47c>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d064      	beq.n	800117c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80010b2:	4b36      	ldr	r3, [pc, #216]	; (800118c <HAL_RCC_OscConfig+0x47c>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	2b08      	cmp	r3, #8
 80010bc:	d05c      	beq.n	8001178 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d141      	bne.n	800114a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c6:	4b32      	ldr	r3, [pc, #200]	; (8001190 <HAL_RCC_OscConfig+0x480>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010cc:	f7ff face 	bl	800066c <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010d4:	f7ff faca 	bl	800066c <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e04b      	b.n	800117e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010e6:	4b29      	ldr	r3, [pc, #164]	; (800118c <HAL_RCC_OscConfig+0x47c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f0      	bne.n	80010d4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80010f2:	4926      	ldr	r1, [pc, #152]	; (800118c <HAL_RCC_OscConfig+0x47c>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69da      	ldr	r2, [r3, #28]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	431a      	orrs	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	019b      	lsls	r3, r3, #6
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110a:	085b      	lsrs	r3, r3, #1
 800110c:	3b01      	subs	r3, #1
 800110e:	041b      	lsls	r3, r3, #16
 8001110:	431a      	orrs	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001116:	061b      	lsls	r3, r3, #24
 8001118:	4313      	orrs	r3, r2
 800111a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <HAL_RCC_OscConfig+0x480>)
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001122:	f7ff faa3 	bl	800066c <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800112a:	f7ff fa9f 	bl	800066c <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e020      	b.n	800117e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <HAL_RCC_OscConfig+0x47c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x41a>
 8001148:	e018      	b.n	800117c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_RCC_OscConfig+0x480>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fa8c 	bl	800066c <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001158:	f7ff fa88 	bl	800066c <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e009      	b.n	800117e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <HAL_RCC_OscConfig+0x47c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x448>
 8001176:	e001      	b.n	800117c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40007000 	.word	0x40007000
 800118c:	40023800 	.word	0x40023800
 8001190:	42470060 	.word	0x42470060

08001194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e0ca      	b.n	800133e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011a8:	4b67      	ldr	r3, [pc, #412]	; (8001348 <HAL_RCC_ClockConfig+0x1b4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 020f 	and.w	r2, r3, #15
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d20c      	bcs.n	80011d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b6:	4b64      	ldr	r3, [pc, #400]	; (8001348 <HAL_RCC_ClockConfig+0x1b4>)
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011be:	4b62      	ldr	r3, [pc, #392]	; (8001348 <HAL_RCC_ClockConfig+0x1b4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 020f 	and.w	r2, r3, #15
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d001      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e0b6      	b.n	800133e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d020      	beq.n	800121e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d005      	beq.n	80011f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011e8:	4a58      	ldr	r2, [pc, #352]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 80011ea:	4b58      	ldr	r3, [pc, #352]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d005      	beq.n	800120c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001200:	4a52      	ldr	r2, [pc, #328]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 8001202:	4b52      	ldr	r3, [pc, #328]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800120a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800120c:	494f      	ldr	r1, [pc, #316]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 800120e:	4b4f      	ldr	r3, [pc, #316]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	4313      	orrs	r3, r2
 800121c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d044      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d107      	bne.n	8001242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001232:	4b46      	ldr	r3, [pc, #280]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d119      	bne.n	8001272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e07d      	b.n	800133e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b02      	cmp	r3, #2
 8001248:	d003      	beq.n	8001252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800124e:	2b03      	cmp	r3, #3
 8001250:	d107      	bne.n	8001262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001252:	4b3e      	ldr	r3, [pc, #248]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d109      	bne.n	8001272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e06d      	b.n	800133e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001262:	4b3a      	ldr	r3, [pc, #232]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e065      	b.n	800133e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001272:	4936      	ldr	r1, [pc, #216]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 8001274:	4b35      	ldr	r3, [pc, #212]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f023 0203 	bic.w	r2, r3, #3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	4313      	orrs	r3, r2
 8001282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001284:	f7ff f9f2 	bl	800066c <HAL_GetTick>
 8001288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800128a:	e00a      	b.n	80012a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800128c:	f7ff f9ee 	bl	800066c <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	f241 3288 	movw	r2, #5000	; 0x1388
 800129a:	4293      	cmp	r3, r2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e04d      	b.n	800133e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a2:	4b2a      	ldr	r3, [pc, #168]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 020c 	and.w	r2, r3, #12
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d1eb      	bne.n	800128c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012b4:	4b24      	ldr	r3, [pc, #144]	; (8001348 <HAL_RCC_ClockConfig+0x1b4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 020f 	and.w	r2, r3, #15
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d90c      	bls.n	80012dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c2:	4b21      	ldr	r3, [pc, #132]	; (8001348 <HAL_RCC_ClockConfig+0x1b4>)
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ca:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <HAL_RCC_ClockConfig+0x1b4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 020f 	and.w	r2, r3, #15
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e030      	b.n	800133e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d008      	beq.n	80012fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012e8:	4918      	ldr	r1, [pc, #96]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 80012ea:	4b18      	ldr	r3, [pc, #96]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	2b00      	cmp	r3, #0
 8001304:	d009      	beq.n	800131a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001306:	4911      	ldr	r1, [pc, #68]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	4313      	orrs	r3, r2
 8001318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800131a:	f000 f81d 	bl	8001358 <HAL_RCC_GetSysClockFreq>
 800131e:	4601      	mov	r1, r0
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <HAL_RCC_ClockConfig+0x1b8>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	091b      	lsrs	r3, r3, #4
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	4a09      	ldr	r2, [pc, #36]	; (8001350 <HAL_RCC_ClockConfig+0x1bc>)
 800132c:	5cd3      	ldrb	r3, [r2, r3]
 800132e:	fa21 f303 	lsr.w	r3, r1, r3
 8001332:	4a08      	ldr	r2, [pc, #32]	; (8001354 <HAL_RCC_ClockConfig+0x1c0>)
 8001334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001336:	2000      	movs	r0, #0
 8001338:	f7ff f954 	bl	80005e4 <HAL_InitTick>

  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023c00 	.word	0x40023c00
 800134c:	40023800 	.word	0x40023800
 8001350:	08006174 	.word	0x08006174
 8001354:	20000008 	.word	0x20000008

08001358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800135c:	b087      	sub	sp, #28
 800135e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001360:	2200      	movs	r2, #0
 8001362:	60fa      	str	r2, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	617a      	str	r2, [r7, #20]
 8001368:	2200      	movs	r2, #0
 800136a:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 800136c:	2200      	movs	r2, #0
 800136e:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001370:	4a51      	ldr	r2, [pc, #324]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001372:	6892      	ldr	r2, [r2, #8]
 8001374:	f002 020c 	and.w	r2, r2, #12
 8001378:	2a04      	cmp	r2, #4
 800137a:	d007      	beq.n	800138c <HAL_RCC_GetSysClockFreq+0x34>
 800137c:	2a08      	cmp	r2, #8
 800137e:	d008      	beq.n	8001392 <HAL_RCC_GetSysClockFreq+0x3a>
 8001380:	2a00      	cmp	r2, #0
 8001382:	f040 8090 	bne.w	80014a6 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001386:	4b4d      	ldr	r3, [pc, #308]	; (80014bc <HAL_RCC_GetSysClockFreq+0x164>)
 8001388:	613b      	str	r3, [r7, #16]
       break;
 800138a:	e08f      	b.n	80014ac <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800138c:	4b4c      	ldr	r3, [pc, #304]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x168>)
 800138e:	613b      	str	r3, [r7, #16]
      break;
 8001390:	e08c      	b.n	80014ac <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001392:	4a49      	ldr	r2, [pc, #292]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001394:	6852      	ldr	r2, [r2, #4]
 8001396:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800139a:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800139c:	4a46      	ldr	r2, [pc, #280]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800139e:	6852      	ldr	r2, [r2, #4]
 80013a0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80013a4:	2a00      	cmp	r2, #0
 80013a6:	d023      	beq.n	80013f0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013a8:	4b43      	ldr	r3, [pc, #268]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	099b      	lsrs	r3, r3, #6
 80013ae:	f04f 0400 	mov.w	r4, #0
 80013b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	ea03 0301 	and.w	r3, r3, r1
 80013be:	ea04 0402 	and.w	r4, r4, r2
 80013c2:	4a3f      	ldr	r2, [pc, #252]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80013c4:	fb02 f104 	mul.w	r1, r2, r4
 80013c8:	2200      	movs	r2, #0
 80013ca:	fb02 f203 	mul.w	r2, r2, r3
 80013ce:	440a      	add	r2, r1
 80013d0:	493b      	ldr	r1, [pc, #236]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80013d2:	fba3 0101 	umull	r0, r1, r3, r1
 80013d6:	1853      	adds	r3, r2, r1
 80013d8:	4619      	mov	r1, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f04f 0400 	mov.w	r4, #0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4623      	mov	r3, r4
 80013e4:	f7fe ff54 	bl	8000290 <__aeabi_uldivmod>
 80013e8:	4603      	mov	r3, r0
 80013ea:	460c      	mov	r4, r1
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	e04c      	b.n	800148a <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013f0:	4a31      	ldr	r2, [pc, #196]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80013f2:	6852      	ldr	r2, [r2, #4]
 80013f4:	0992      	lsrs	r2, r2, #6
 80013f6:	4611      	mov	r1, r2
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	f240 15ff 	movw	r5, #511	; 0x1ff
 8001400:	f04f 0600 	mov.w	r6, #0
 8001404:	ea05 0501 	and.w	r5, r5, r1
 8001408:	ea06 0602 	and.w	r6, r6, r2
 800140c:	4629      	mov	r1, r5
 800140e:	4632      	mov	r2, r6
 8001410:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8001414:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8001418:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 800141c:	4651      	mov	r1, sl
 800141e:	465a      	mov	r2, fp
 8001420:	46aa      	mov	sl, r5
 8001422:	46b3      	mov	fp, r6
 8001424:	4655      	mov	r5, sl
 8001426:	465e      	mov	r6, fp
 8001428:	1b4d      	subs	r5, r1, r5
 800142a:	eb62 0606 	sbc.w	r6, r2, r6
 800142e:	4629      	mov	r1, r5
 8001430:	4632      	mov	r2, r6
 8001432:	0194      	lsls	r4, r2, #6
 8001434:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001438:	018b      	lsls	r3, r1, #6
 800143a:	1a5b      	subs	r3, r3, r1
 800143c:	eb64 0402 	sbc.w	r4, r4, r2
 8001440:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8001444:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8001448:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800144c:	4643      	mov	r3, r8
 800144e:	464c      	mov	r4, r9
 8001450:	4655      	mov	r5, sl
 8001452:	465e      	mov	r6, fp
 8001454:	18ed      	adds	r5, r5, r3
 8001456:	eb46 0604 	adc.w	r6, r6, r4
 800145a:	462b      	mov	r3, r5
 800145c:	4634      	mov	r4, r6
 800145e:	02a2      	lsls	r2, r4, #10
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001468:	607a      	str	r2, [r7, #4]
 800146a:	029b      	lsls	r3, r3, #10
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8001472:	4618      	mov	r0, r3
 8001474:	4621      	mov	r1, r4
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f04f 0400 	mov.w	r4, #0
 800147c:	461a      	mov	r2, r3
 800147e:	4623      	mov	r3, r4
 8001480:	f7fe ff06 	bl	8000290 <__aeabi_uldivmod>
 8001484:	4603      	mov	r3, r0
 8001486:	460c      	mov	r4, r1
 8001488:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	0c1b      	lsrs	r3, r3, #16
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	3301      	adds	r3, #1
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a2:	613b      	str	r3, [r7, #16]
      break;
 80014a4:	e002      	b.n	80014ac <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <HAL_RCC_GetSysClockFreq+0x164>)
 80014a8:	613b      	str	r3, [r7, #16]
      break;
 80014aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ac:	693b      	ldr	r3, [r7, #16]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	371c      	adds	r7, #28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014b8:	40023800 	.word	0x40023800
 80014bc:	00f42400 	.word	0x00f42400
 80014c0:	017d7840 	.word	0x017d7840

080014c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e055      	b.n	8001582 <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d106      	bne.n	80014f6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f002 fc73 	bl	8003ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2202      	movs	r2, #2
 80014fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800150c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6851      	ldr	r1, [r2, #4]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	6892      	ldr	r2, [r2, #8]
 800151a:	4311      	orrs	r1, r2
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	68d2      	ldr	r2, [r2, #12]
 8001520:	4311      	orrs	r1, r2
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6912      	ldr	r2, [r2, #16]
 8001526:	4311      	orrs	r1, r2
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6952      	ldr	r2, [r2, #20]
 800152c:	4311      	orrs	r1, r2
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6992      	ldr	r2, [r2, #24]
 8001532:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001536:	4311      	orrs	r1, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	69d2      	ldr	r2, [r2, #28]
 800153c:	4311      	orrs	r1, r2
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6a12      	ldr	r2, [r2, #32]
 8001542:	4311      	orrs	r1, r2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001548:	430a      	orrs	r2, r1
 800154a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6992      	ldr	r2, [r2, #24]
 8001554:	0c12      	lsrs	r2, r2, #16
 8001556:	f002 0104 	and.w	r1, r2, #4
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800155e:	430a      	orrs	r2, r1
 8001560:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6812      	ldr	r2, [r2, #0]
 800156a:	69d2      	ldr	r2, [r2, #28]
 800156c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001570:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b088      	sub	sp, #32
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	4613      	mov	r3, r2
 8001598:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d101      	bne.n	80015ac <HAL_SPI_Transmit+0x22>
 80015a8:	2302      	movs	r3, #2
 80015aa:	e11c      	b.n	80017e6 <HAL_SPI_Transmit+0x25c>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80015b4:	f7ff f85a 	bl	800066c <HAL_GetTick>
 80015b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d002      	beq.n	80015d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80015ca:	2302      	movs	r3, #2
 80015cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80015ce:	e101      	b.n	80017d4 <HAL_SPI_Transmit+0x24a>
  }

  if ((pData == NULL) || (Size == 0U))
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d002      	beq.n	80015dc <HAL_SPI_Transmit+0x52>
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80015e0:	e0f8      	b.n	80017d4 <HAL_SPI_Transmit+0x24a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2203      	movs	r2, #3
 80015e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	88fa      	ldrh	r2, [r7, #6]
 80015fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	88fa      	ldrh	r2, [r7, #6]
 8001600:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001628:	d107      	bne.n	800163a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001638:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001644:	2b40      	cmp	r3, #64	; 0x40
 8001646:	d007      	beq.n	8001658 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001656:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001660:	d14b      	bne.n	80016fa <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d002      	beq.n	8001670 <HAL_SPI_Transmit+0xe6>
 800166a:	8afb      	ldrh	r3, [r7, #22]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d13e      	bne.n	80016ee <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001678:	8812      	ldrh	r2, [r2, #0]
 800167a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	1c9a      	adds	r2, r3, #2
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800168a:	b29b      	uxth	r3, r3
 800168c:	3b01      	subs	r3, #1
 800168e:	b29a      	uxth	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001694:	e02b      	b.n	80016ee <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d112      	bne.n	80016ca <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016ac:	8812      	ldrh	r2, [r2, #0]
 80016ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	1c9a      	adds	r2, r3, #2
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016be:	b29b      	uxth	r3, r3
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80016c8:	e011      	b.n	80016ee <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80016ca:	f7fe ffcf 	bl	800066c <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	1ad2      	subs	r2, r2, r3
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d303      	bcc.n	80016e2 <HAL_SPI_Transmit+0x158>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e0:	d102      	bne.n	80016e8 <HAL_SPI_Transmit+0x15e>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d102      	bne.n	80016ee <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80016ec:	e072      	b.n	80017d4 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1ce      	bne.n	8001696 <HAL_SPI_Transmit+0x10c>
 80016f8:	e04c      	b.n	8001794 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <HAL_SPI_Transmit+0x17e>
 8001702:	8afb      	ldrh	r3, [r7, #22]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d140      	bne.n	800178a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	330c      	adds	r3, #12
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001712:	7812      	ldrb	r2, [r2, #0]
 8001714:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001724:	b29b      	uxth	r3, r3
 8001726:	3b01      	subs	r3, #1
 8001728:	b29a      	uxth	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800172e:	e02c      	b.n	800178a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b02      	cmp	r3, #2
 800173c:	d113      	bne.n	8001766 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	330c      	adds	r3, #12
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001748:	7812      	ldrb	r2, [r2, #0]
 800174a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800175a:	b29b      	uxth	r3, r3
 800175c:	3b01      	subs	r3, #1
 800175e:	b29a      	uxth	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	86da      	strh	r2, [r3, #54]	; 0x36
 8001764:	e011      	b.n	800178a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001766:	f7fe ff81 	bl	800066c <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	1ad2      	subs	r2, r2, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d303      	bcc.n	800177e <HAL_SPI_Transmit+0x1f4>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177c:	d102      	bne.n	8001784 <HAL_SPI_Transmit+0x1fa>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001788:	e024      	b.n	80017d4 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800178e:	b29b      	uxth	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1cd      	bne.n	8001730 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	6839      	ldr	r1, [r7, #0]
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f000 fa32 	bl	8001c02 <SPI_EndRxTxTransaction>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d002      	beq.n	80017aa <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2220      	movs	r2, #32
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10a      	bne.n	80017c8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_SPI_Transmit+0x24a>
  {
    errorcode = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80017e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3720      	adds	r7, #32
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b08c      	sub	sp, #48	; 0x30
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	60f8      	str	r0, [r7, #12]
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80017fc:	2301      	movs	r3, #1
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_SPI_TransmitReceive+0x26>
 8001810:	2302      	movs	r3, #2
 8001812:	e188      	b.n	8001b26 <HAL_SPI_TransmitReceive+0x338>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800181c:	f7fe ff26 	bl	800066c <HAL_GetTick>
 8001820:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001836:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800183a:	2b01      	cmp	r3, #1
 800183c:	d00f      	beq.n	800185e <HAL_SPI_TransmitReceive+0x70>
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001844:	d107      	bne.n	8001856 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d103      	bne.n	8001856 <HAL_SPI_TransmitReceive+0x68>
 800184e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001852:	2b04      	cmp	r3, #4
 8001854:	d003      	beq.n	800185e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001856:	2302      	movs	r3, #2
 8001858:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800185c:	e159      	b.n	8001b12 <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_SPI_TransmitReceive+0x82>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <HAL_SPI_TransmitReceive+0x82>
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d103      	bne.n	8001878 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001876:	e14c      	b.n	8001b12 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b04      	cmp	r3, #4
 8001882:	d003      	beq.n	800188c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2205      	movs	r2, #5
 8001888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	887a      	ldrh	r2, [r7, #2]
 800189c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	887a      	ldrh	r2, [r7, #2]
 80018a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	887a      	ldrh	r2, [r7, #2]
 80018ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	887a      	ldrh	r2, [r7, #2]
 80018b4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018cc:	2b40      	cmp	r3, #64	; 0x40
 80018ce:	d007      	beq.n	80018e0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	6812      	ldr	r2, [r2, #0]
 80018da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018e8:	d178      	bne.n	80019dc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <HAL_SPI_TransmitReceive+0x10a>
 80018f2:	8b7b      	ldrh	r3, [r7, #26]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d166      	bne.n	80019c6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001900:	8812      	ldrh	r2, [r2, #0]
 8001902:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	1c9a      	adds	r2, r3, #2
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b29a      	uxth	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800191c:	e053      	b.n	80019c6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b02      	cmp	r3, #2
 800192a:	d11b      	bne.n	8001964 <HAL_SPI_TransmitReceive+0x176>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001930:	b29b      	uxth	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d016      	beq.n	8001964 <HAL_SPI_TransmitReceive+0x176>
 8001936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001938:	2b01      	cmp	r3, #1
 800193a:	d113      	bne.n	8001964 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001944:	8812      	ldrh	r2, [r2, #0]
 8001946:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	1c9a      	adds	r2, r3, #2
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001956:	b29b      	uxth	r3, r3
 8001958:	3b01      	subs	r3, #1
 800195a:	b29a      	uxth	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b01      	cmp	r3, #1
 8001970:	d119      	bne.n	80019a6 <HAL_SPI_TransmitReceive+0x1b8>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001976:	b29b      	uxth	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d014      	beq.n	80019a6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	68d2      	ldr	r2, [r2, #12]
 8001986:	b292      	uxth	r2, r2
 8001988:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198e:	1c9a      	adds	r2, r3, #2
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001998:	b29b      	uxth	r3, r3
 800199a:	3b01      	subs	r3, #1
 800199c:	b29a      	uxth	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80019a2:	2301      	movs	r3, #1
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80019a6:	f7fe fe61 	bl	800066c <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	1ad2      	subs	r2, r2, r3
 80019b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d307      	bcc.n	80019c6 <HAL_SPI_TransmitReceive+0x1d8>
 80019b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019bc:	d003      	beq.n	80019c6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80019c4:	e0a5      	b.n	8001b12 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1a6      	bne.n	800191e <HAL_SPI_TransmitReceive+0x130>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1a1      	bne.n	800191e <HAL_SPI_TransmitReceive+0x130>
 80019da:	e07c      	b.n	8001ad6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <HAL_SPI_TransmitReceive+0x1fc>
 80019e4:	8b7b      	ldrh	r3, [r7, #26]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d16b      	bne.n	8001ac2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	330c      	adds	r3, #12
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019f4:	7812      	ldrb	r2, [r2, #0]
 80019f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a10:	e057      	b.n	8001ac2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d11c      	bne.n	8001a5a <HAL_SPI_TransmitReceive+0x26c>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d017      	beq.n	8001a5a <HAL_SPI_TransmitReceive+0x26c>
 8001a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d114      	bne.n	8001a5a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	330c      	adds	r3, #12
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a3a:	7812      	ldrb	r2, [r2, #0]
 8001a3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d119      	bne.n	8001a9c <HAL_SPI_TransmitReceive+0x2ae>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d014      	beq.n	8001a9c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	68d2      	ldr	r2, [r2, #12]
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001a9c:	f7fe fde6 	bl	800066c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	1ad2      	subs	r2, r2, r3
 8001aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d303      	bcc.n	8001ab4 <HAL_SPI_TransmitReceive+0x2c6>
 8001aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab2:	d102      	bne.n	8001aba <HAL_SPI_TransmitReceive+0x2cc>
 8001ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d103      	bne.n	8001ac2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001ac0:	e027      	b.n	8001b12 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1a2      	bne.n	8001a12 <HAL_SPI_TransmitReceive+0x224>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d19d      	bne.n	8001a12 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 f891 	bl	8001c02 <SPI_EndRxTxTransaction>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d006      	beq.n	8001af4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2220      	movs	r2, #32
 8001af0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001af2:	e00e      	b.n	8001b12 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10a      	bne.n	8001b12 <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001b22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3730      	adds	r7, #48	; 0x30
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b084      	sub	sp, #16
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b3e:	e04c      	b.n	8001bda <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b46:	d048      	beq.n	8001bda <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001b48:	f7fe fd90 	bl	800066c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	1ad2      	subs	r2, r2, r3
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d202      	bcs.n	8001b5e <SPI_WaitFlagStateUntilTimeout+0x30>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d13d      	bne.n	8001bda <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	6852      	ldr	r2, [r2, #4]
 8001b68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001b6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b76:	d111      	bne.n	8001b9c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b80:	d004      	beq.n	8001b8c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b8a:	d107      	bne.n	8001b9c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ba4:	d10f      	bne.n	8001bc6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	6812      	ldr	r2, [r2, #0]
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e00f      	b.n	8001bfa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	401a      	ands	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	bf0c      	ite	eq
 8001bea:	2301      	moveq	r3, #1
 8001bec:	2300      	movne	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d1a3      	bne.n	8001b40 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af02      	add	r7, sp, #8
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2200      	movs	r2, #0
 8001c16:	2180      	movs	r1, #128	; 0x80
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f7ff ff88 	bl	8001b2e <SPI_WaitFlagStateUntilTimeout>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d007      	beq.n	8001c34 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c28:	f043 0220 	orr.w	r2, r3, #32
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e000      	b.n	8001c36 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e01d      	b.n	8001c8c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d106      	bne.n	8001c6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f002 fc93 	bl	8004590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	f000 fc19 	bl	80024b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	68d2      	ldr	r2, [r2, #12]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b06      	cmp	r3, #6
 8001cbc:	d007      	beq.n	8001cce <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	f042 0201 	orr.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e01d      	b.n	8001d2a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d106      	bne.n	8001d08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f815 	bl	8001d32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3304      	adds	r3, #4
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	f000 fbca 	bl	80024b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2201      	movs	r2, #1
 8001d58:	6839      	ldr	r1, [r7, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 fe94 	bl	8002a88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a15      	ldr	r2, [pc, #84]	; (8001dbc <HAL_TIM_PWM_Start+0x74>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d004      	beq.n	8001d74 <HAL_TIM_PWM_Start+0x2c>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <HAL_TIM_PWM_Start+0x78>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d101      	bne.n	8001d78 <HAL_TIM_PWM_Start+0x30>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_TIM_PWM_Start+0x32>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d007      	beq.n	8001d8e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b06      	cmp	r3, #6
 8001d9e:	d007      	beq.n	8001db0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	6812      	ldr	r2, [r2, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	40010400 	.word	0x40010400

08001dc4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e083      	b.n	8001ee0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d106      	bne.n	8001df2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f002 fb51 	bl	8004494 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2202      	movs	r2, #2
 8001df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e08:	f023 0307 	bic.w	r3, r3, #7
 8001e0c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3304      	adds	r3, #4
 8001e16:	4619      	mov	r1, r3
 8001e18:	4610      	mov	r0, r2
 8001e1a:	f000 fb4b 	bl	80024b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e46:	f023 0303 	bic.w	r3, r3, #3
 8001e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	4313      	orrs	r3, r2
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001e64:	f023 030c 	bic.w	r3, r3, #12
 8001e68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	4313      	orrs	r3, r2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	011a      	lsls	r2, r3, #4
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	031b      	lsls	r3, r3, #12
 8001e94:	4313      	orrs	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001ea2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8001eaa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <HAL_TIM_Encoder_Start+0x16>
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d008      	beq.n	8001f0e <HAL_TIM_Encoder_Start+0x26>
 8001efc:	e00f      	b.n	8001f1e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2201      	movs	r2, #1
 8001f04:	2100      	movs	r1, #0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 fdbe 	bl	8002a88 <TIM_CCxChannelCmd>
      break;
 8001f0c:	e016      	b.n	8001f3c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2201      	movs	r2, #1
 8001f14:	2104      	movs	r1, #4
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 fdb6 	bl	8002a88 <TIM_CCxChannelCmd>
      break;
 8001f1c:	e00e      	b.n	8001f3c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2201      	movs	r2, #1
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 fdae 	bl	8002a88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2201      	movs	r2, #1
 8001f32:	2104      	movs	r1, #4
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 fda7 	bl	8002a88 <TIM_CCxChannelCmd>
      break;
 8001f3a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d122      	bne.n	8001fb2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d11b      	bne.n	8001fb2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f06f 0202 	mvn.w	r2, #2
 8001f82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 fa6c 	bl	8002476 <HAL_TIM_IC_CaptureCallback>
 8001f9e:	e005      	b.n	8001fac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 fa5e 	bl	8002462 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 fa6f 	bl	800248a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d122      	bne.n	8002006 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d11b      	bne.n	8002006 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f06f 0204 	mvn.w	r2, #4
 8001fd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 fa42 	bl	8002476 <HAL_TIM_IC_CaptureCallback>
 8001ff2:	e005      	b.n	8002000 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fa34 	bl	8002462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 fa45 	bl	800248a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	2b08      	cmp	r3, #8
 8002012:	d122      	bne.n	800205a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b08      	cmp	r3, #8
 8002020:	d11b      	bne.n	800205a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f06f 0208 	mvn.w	r2, #8
 800202a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2204      	movs	r2, #4
 8002030:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 fa18 	bl	8002476 <HAL_TIM_IC_CaptureCallback>
 8002046:	e005      	b.n	8002054 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 fa0a 	bl	8002462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fa1b 	bl	800248a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	f003 0310 	and.w	r3, r3, #16
 8002064:	2b10      	cmp	r3, #16
 8002066:	d122      	bne.n	80020ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2b10      	cmp	r3, #16
 8002074:	d11b      	bne.n	80020ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f06f 0210 	mvn.w	r2, #16
 800207e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2208      	movs	r2, #8
 8002084:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f9ee 	bl	8002476 <HAL_TIM_IC_CaptureCallback>
 800209a:	e005      	b.n	80020a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f9e0 	bl	8002462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f9f1 	bl	800248a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d10e      	bne.n	80020da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d107      	bne.n	80020da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f06f 0201 	mvn.w	r2, #1
 80020d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f001 fde9 	bl	8003cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e4:	2b80      	cmp	r3, #128	; 0x80
 80020e6:	d10e      	bne.n	8002106 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f2:	2b80      	cmp	r3, #128	; 0x80
 80020f4:	d107      	bne.n	8002106 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 fd35 	bl	8002b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002110:	2b40      	cmp	r3, #64	; 0x40
 8002112:	d10e      	bne.n	8002132 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211e:	2b40      	cmp	r3, #64	; 0x40
 8002120:	d107      	bne.n	8002132 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800212a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f9b6 	bl	800249e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	f003 0320 	and.w	r3, r3, #32
 800213c:	2b20      	cmp	r3, #32
 800213e:	d10e      	bne.n	800215e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	2b20      	cmp	r3, #32
 800214c:	d107      	bne.n	800215e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f06f 0220 	mvn.w	r2, #32
 8002156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 fcff 	bl	8002b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800217e:	2302      	movs	r3, #2
 8002180:	e0b4      	b.n	80022ec <HAL_TIM_PWM_ConfigChannel+0x184>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2202      	movs	r2, #2
 800218e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b0c      	cmp	r3, #12
 8002196:	f200 809f 	bhi.w	80022d8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800219a:	a201      	add	r2, pc, #4	; (adr r2, 80021a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800219c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a0:	080021d5 	.word	0x080021d5
 80021a4:	080022d9 	.word	0x080022d9
 80021a8:	080022d9 	.word	0x080022d9
 80021ac:	080022d9 	.word	0x080022d9
 80021b0:	08002215 	.word	0x08002215
 80021b4:	080022d9 	.word	0x080022d9
 80021b8:	080022d9 	.word	0x080022d9
 80021bc:	080022d9 	.word	0x080022d9
 80021c0:	08002257 	.word	0x08002257
 80021c4:	080022d9 	.word	0x080022d9
 80021c8:	080022d9 	.word	0x080022d9
 80021cc:	080022d9 	.word	0x080022d9
 80021d0:	08002297 	.word	0x08002297
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 fa0a 	bl	80025f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	6992      	ldr	r2, [r2, #24]
 80021ea:	f042 0208 	orr.w	r2, r2, #8
 80021ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	6992      	ldr	r2, [r2, #24]
 80021fa:	f022 0204 	bic.w	r2, r2, #4
 80021fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	6991      	ldr	r1, [r2, #24]
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	6912      	ldr	r2, [r2, #16]
 800220e:	430a      	orrs	r2, r1
 8002210:	619a      	str	r2, [r3, #24]
      break;
 8002212:	e062      	b.n	80022da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	4618      	mov	r0, r3
 800221c:	f000 fa5a 	bl	80026d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	6992      	ldr	r2, [r2, #24]
 800222a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800222e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	6992      	ldr	r2, [r2, #24]
 800223a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800223e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	6991      	ldr	r1, [r2, #24]
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	6912      	ldr	r2, [r2, #16]
 800224e:	0212      	lsls	r2, r2, #8
 8002250:	430a      	orrs	r2, r1
 8002252:	619a      	str	r2, [r3, #24]
      break;
 8002254:	e041      	b.n	80022da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68b9      	ldr	r1, [r7, #8]
 800225c:	4618      	mov	r0, r3
 800225e:	f000 faaf 	bl	80027c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	69d2      	ldr	r2, [r2, #28]
 800226c:	f042 0208 	orr.w	r2, r2, #8
 8002270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	69d2      	ldr	r2, [r2, #28]
 800227c:	f022 0204 	bic.w	r2, r2, #4
 8002280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	6812      	ldr	r2, [r2, #0]
 800228a:	69d1      	ldr	r1, [r2, #28]
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	6912      	ldr	r2, [r2, #16]
 8002290:	430a      	orrs	r2, r1
 8002292:	61da      	str	r2, [r3, #28]
      break;
 8002294:	e021      	b.n	80022da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68b9      	ldr	r1, [r7, #8]
 800229c:	4618      	mov	r0, r3
 800229e:	f000 fb03 	bl	80028a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	69d2      	ldr	r2, [r2, #28]
 80022ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	69d2      	ldr	r2, [r2, #28]
 80022bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	69d1      	ldr	r1, [r2, #28]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	6912      	ldr	r2, [r2, #16]
 80022d0:	0212      	lsls	r2, r2, #8
 80022d2:	430a      	orrs	r2, r1
 80022d4:	61da      	str	r2, [r3, #28]
      break;
 80022d6:	e000      	b.n	80022da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80022d8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_TIM_ConfigClockSource+0x18>
 8002308:	2302      	movs	r3, #2
 800230a:	e0a6      	b.n	800245a <HAL_TIM_ConfigClockSource+0x166>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2202      	movs	r2, #2
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800232a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002332:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b40      	cmp	r3, #64	; 0x40
 8002342:	d067      	beq.n	8002414 <HAL_TIM_ConfigClockSource+0x120>
 8002344:	2b40      	cmp	r3, #64	; 0x40
 8002346:	d80b      	bhi.n	8002360 <HAL_TIM_ConfigClockSource+0x6c>
 8002348:	2b10      	cmp	r3, #16
 800234a:	d073      	beq.n	8002434 <HAL_TIM_ConfigClockSource+0x140>
 800234c:	2b10      	cmp	r3, #16
 800234e:	d802      	bhi.n	8002356 <HAL_TIM_ConfigClockSource+0x62>
 8002350:	2b00      	cmp	r3, #0
 8002352:	d06f      	beq.n	8002434 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002354:	e078      	b.n	8002448 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002356:	2b20      	cmp	r3, #32
 8002358:	d06c      	beq.n	8002434 <HAL_TIM_ConfigClockSource+0x140>
 800235a:	2b30      	cmp	r3, #48	; 0x30
 800235c:	d06a      	beq.n	8002434 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800235e:	e073      	b.n	8002448 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002360:	2b70      	cmp	r3, #112	; 0x70
 8002362:	d00d      	beq.n	8002380 <HAL_TIM_ConfigClockSource+0x8c>
 8002364:	2b70      	cmp	r3, #112	; 0x70
 8002366:	d804      	bhi.n	8002372 <HAL_TIM_ConfigClockSource+0x7e>
 8002368:	2b50      	cmp	r3, #80	; 0x50
 800236a:	d033      	beq.n	80023d4 <HAL_TIM_ConfigClockSource+0xe0>
 800236c:	2b60      	cmp	r3, #96	; 0x60
 800236e:	d041      	beq.n	80023f4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002370:	e06a      	b.n	8002448 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002376:	d066      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0x152>
 8002378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800237c:	d017      	beq.n	80023ae <HAL_TIM_ConfigClockSource+0xba>
      break;
 800237e:	e063      	b.n	8002448 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6899      	ldr	r1, [r3, #8]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f000 fb5a 	bl	8002a48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	609a      	str	r2, [r3, #8]
      break;
 80023ac:	e04c      	b.n	8002448 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6899      	ldr	r1, [r3, #8]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f000 fb43 	bl	8002a48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	6892      	ldr	r2, [r2, #8]
 80023cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023d0:	609a      	str	r2, [r3, #8]
      break;
 80023d2:	e039      	b.n	8002448 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	461a      	mov	r2, r3
 80023e2:	f000 fab7 	bl	8002954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2150      	movs	r1, #80	; 0x50
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fb10 	bl	8002a12 <TIM_ITRx_SetConfig>
      break;
 80023f2:	e029      	b.n	8002448 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	6859      	ldr	r1, [r3, #4]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	461a      	mov	r2, r3
 8002402:	f000 fad6 	bl	80029b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2160      	movs	r1, #96	; 0x60
 800240c:	4618      	mov	r0, r3
 800240e:	f000 fb00 	bl	8002a12 <TIM_ITRx_SetConfig>
      break;
 8002412:	e019      	b.n	8002448 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	6859      	ldr	r1, [r3, #4]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	461a      	mov	r2, r3
 8002422:	f000 fa97 	bl	8002954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2140      	movs	r1, #64	; 0x40
 800242c:	4618      	mov	r0, r3
 800242e:	f000 faf0 	bl	8002a12 <TIM_ITRx_SetConfig>
      break;
 8002432:	e009      	b.n	8002448 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4619      	mov	r1, r3
 800243e:	4610      	mov	r0, r2
 8002440:	f000 fae7 	bl	8002a12 <TIM_ITRx_SetConfig>
      break;
 8002444:	e000      	b.n	8002448 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002446:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a40      	ldr	r2, [pc, #256]	; (80025c8 <TIM_Base_SetConfig+0x114>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d013      	beq.n	80024f4 <TIM_Base_SetConfig+0x40>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d2:	d00f      	beq.n	80024f4 <TIM_Base_SetConfig+0x40>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a3d      	ldr	r2, [pc, #244]	; (80025cc <TIM_Base_SetConfig+0x118>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d00b      	beq.n	80024f4 <TIM_Base_SetConfig+0x40>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a3c      	ldr	r2, [pc, #240]	; (80025d0 <TIM_Base_SetConfig+0x11c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d007      	beq.n	80024f4 <TIM_Base_SetConfig+0x40>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a3b      	ldr	r2, [pc, #236]	; (80025d4 <TIM_Base_SetConfig+0x120>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d003      	beq.n	80024f4 <TIM_Base_SetConfig+0x40>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a3a      	ldr	r2, [pc, #232]	; (80025d8 <TIM_Base_SetConfig+0x124>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d108      	bne.n	8002506 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a2f      	ldr	r2, [pc, #188]	; (80025c8 <TIM_Base_SetConfig+0x114>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d02b      	beq.n	8002566 <TIM_Base_SetConfig+0xb2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002514:	d027      	beq.n	8002566 <TIM_Base_SetConfig+0xb2>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a2c      	ldr	r2, [pc, #176]	; (80025cc <TIM_Base_SetConfig+0x118>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d023      	beq.n	8002566 <TIM_Base_SetConfig+0xb2>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a2b      	ldr	r2, [pc, #172]	; (80025d0 <TIM_Base_SetConfig+0x11c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d01f      	beq.n	8002566 <TIM_Base_SetConfig+0xb2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a2a      	ldr	r2, [pc, #168]	; (80025d4 <TIM_Base_SetConfig+0x120>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d01b      	beq.n	8002566 <TIM_Base_SetConfig+0xb2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a29      	ldr	r2, [pc, #164]	; (80025d8 <TIM_Base_SetConfig+0x124>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d017      	beq.n	8002566 <TIM_Base_SetConfig+0xb2>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a28      	ldr	r2, [pc, #160]	; (80025dc <TIM_Base_SetConfig+0x128>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <TIM_Base_SetConfig+0xb2>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a27      	ldr	r2, [pc, #156]	; (80025e0 <TIM_Base_SetConfig+0x12c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00f      	beq.n	8002566 <TIM_Base_SetConfig+0xb2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a26      	ldr	r2, [pc, #152]	; (80025e4 <TIM_Base_SetConfig+0x130>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00b      	beq.n	8002566 <TIM_Base_SetConfig+0xb2>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a25      	ldr	r2, [pc, #148]	; (80025e8 <TIM_Base_SetConfig+0x134>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d007      	beq.n	8002566 <TIM_Base_SetConfig+0xb2>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a24      	ldr	r2, [pc, #144]	; (80025ec <TIM_Base_SetConfig+0x138>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d003      	beq.n	8002566 <TIM_Base_SetConfig+0xb2>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a23      	ldr	r2, [pc, #140]	; (80025f0 <TIM_Base_SetConfig+0x13c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d108      	bne.n	8002578 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800256c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	4313      	orrs	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <TIM_Base_SetConfig+0x114>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d003      	beq.n	80025ac <TIM_Base_SetConfig+0xf8>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a0c      	ldr	r2, [pc, #48]	; (80025d8 <TIM_Base_SetConfig+0x124>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d103      	bne.n	80025b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	615a      	str	r2, [r3, #20]
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40010000 	.word	0x40010000
 80025cc:	40000400 	.word	0x40000400
 80025d0:	40000800 	.word	0x40000800
 80025d4:	40000c00 	.word	0x40000c00
 80025d8:	40010400 	.word	0x40010400
 80025dc:	40014000 	.word	0x40014000
 80025e0:	40014400 	.word	0x40014400
 80025e4:	40014800 	.word	0x40014800
 80025e8:	40001800 	.word	0x40001800
 80025ec:	40001c00 	.word	0x40001c00
 80025f0:	40002000 	.word	0x40002000

080025f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	f023 0201 	bic.w	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f023 0303 	bic.w	r3, r3, #3
 800262a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f023 0302 	bic.w	r3, r3, #2
 800263c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4313      	orrs	r3, r2
 8002646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a20      	ldr	r2, [pc, #128]	; (80026cc <TIM_OC1_SetConfig+0xd8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d003      	beq.n	8002658 <TIM_OC1_SetConfig+0x64>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a1f      	ldr	r2, [pc, #124]	; (80026d0 <TIM_OC1_SetConfig+0xdc>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d10c      	bne.n	8002672 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f023 0308 	bic.w	r3, r3, #8
 800265e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	4313      	orrs	r3, r2
 8002668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f023 0304 	bic.w	r3, r3, #4
 8002670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a15      	ldr	r2, [pc, #84]	; (80026cc <TIM_OC1_SetConfig+0xd8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d003      	beq.n	8002682 <TIM_OC1_SetConfig+0x8e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a14      	ldr	r2, [pc, #80]	; (80026d0 <TIM_OC1_SetConfig+0xdc>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d111      	bne.n	80026a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	621a      	str	r2, [r3, #32]
}
 80026c0:	bf00      	nop
 80026c2:	371c      	adds	r7, #28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	40010000 	.word	0x40010000
 80026d0:	40010400 	.word	0x40010400

080026d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	f023 0210 	bic.w	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800270a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f023 0320 	bic.w	r3, r3, #32
 800271e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a22      	ldr	r2, [pc, #136]	; (80027b8 <TIM_OC2_SetConfig+0xe4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d003      	beq.n	800273c <TIM_OC2_SetConfig+0x68>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a21      	ldr	r2, [pc, #132]	; (80027bc <TIM_OC2_SetConfig+0xe8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d10d      	bne.n	8002758 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4313      	orrs	r3, r2
 800274e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002756:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <TIM_OC2_SetConfig+0xe4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d003      	beq.n	8002768 <TIM_OC2_SetConfig+0x94>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a16      	ldr	r2, [pc, #88]	; (80027bc <TIM_OC2_SetConfig+0xe8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d113      	bne.n	8002790 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800276e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002776:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	621a      	str	r2, [r3, #32]
}
 80027aa:	bf00      	nop
 80027ac:	371c      	adds	r7, #28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40010000 	.word	0x40010000
 80027bc:	40010400 	.word	0x40010400

080027c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 0303 	bic.w	r3, r3, #3
 80027f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	4313      	orrs	r3, r2
 8002814:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a21      	ldr	r2, [pc, #132]	; (80028a0 <TIM_OC3_SetConfig+0xe0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d003      	beq.n	8002826 <TIM_OC3_SetConfig+0x66>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a20      	ldr	r2, [pc, #128]	; (80028a4 <TIM_OC3_SetConfig+0xe4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d10d      	bne.n	8002842 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800282c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	4313      	orrs	r3, r2
 8002838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a16      	ldr	r2, [pc, #88]	; (80028a0 <TIM_OC3_SetConfig+0xe0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d003      	beq.n	8002852 <TIM_OC3_SetConfig+0x92>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a15      	ldr	r2, [pc, #84]	; (80028a4 <TIM_OC3_SetConfig+0xe4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d113      	bne.n	800287a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	621a      	str	r2, [r3, #32]
}
 8002894:	bf00      	nop
 8002896:	371c      	adds	r7, #28
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	40010000 	.word	0x40010000
 80028a4:	40010400 	.word	0x40010400

080028a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	031b      	lsls	r3, r3, #12
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a12      	ldr	r2, [pc, #72]	; (800294c <TIM_OC4_SetConfig+0xa4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d003      	beq.n	8002910 <TIM_OC4_SetConfig+0x68>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a11      	ldr	r2, [pc, #68]	; (8002950 <TIM_OC4_SetConfig+0xa8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d109      	bne.n	8002924 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002916:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	019b      	lsls	r3, r3, #6
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4313      	orrs	r3, r2
 8002922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	621a      	str	r2, [r3, #32]
}
 800293e:	bf00      	nop
 8002940:	371c      	adds	r7, #28
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40010000 	.word	0x40010000
 8002950:	40010400 	.word	0x40010400

08002954 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	f023 0201 	bic.w	r2, r3, #1
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800297e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f023 030a 	bic.w	r3, r3, #10
 8002990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	621a      	str	r2, [r3, #32]
}
 80029a6:	bf00      	nop
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b087      	sub	sp, #28
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	f023 0210 	bic.w	r2, r3, #16
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	031b      	lsls	r3, r3, #12
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	621a      	str	r2, [r3, #32]
}
 8002a06:	bf00      	nop
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b085      	sub	sp, #20
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f043 0307 	orr.w	r3, r3, #7
 8002a34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	609a      	str	r2, [r3, #8]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	021a      	lsls	r2, r3, #8
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	609a      	str	r2, [r3, #8]
}
 8002a7c:	bf00      	nop
 8002a7e:	371c      	adds	r7, #28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a1a      	ldr	r2, [r3, #32]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	401a      	ands	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a1a      	ldr	r2, [r3, #32]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f003 031f 	and.w	r3, r3, #31
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	621a      	str	r2, [r3, #32]
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e032      	b.n	8002b50 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2202      	movs	r2, #2
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b22:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <vLedStrip_Init>:
 */

#include "LED_Strip.h"
#include "Motor_Control.h"

void vLedStrip_Init(LedStrip_InitTypeDef* ledStrip_InitTypeDef) {
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  ledStrip_InitTypeDef->pivot = 0;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	729a      	strb	r2, [r3, #10]
  ledStrip_InitTypeDef->Led_StatusPin = 0;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	731a      	strb	r2, [r3, #12]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <vMotor_init>:
  }
  return Status;
}

void vMotor_init(Motor_InitTypeDef* Motor_InitStruct1,
    Motor_InitTypeDef* Motor_InitStruct2) {
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  Motor_InitStruct1->Motor_GPIO_int1 = MotorLeft_GPIO_pin1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a1c      	ldr	r2, [pc, #112]	; (8002c24 <vMotor_init+0x80>)
 8002bb2:	609a      	str	r2, [r3, #8]
  Motor_InitStruct1->Motor_GPIO_int2 = MotorLeft_GPIO_pin2;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a1b      	ldr	r2, [pc, #108]	; (8002c24 <vMotor_init+0x80>)
 8002bb8:	611a      	str	r2, [r3, #16]
  Motor_InitStruct1->Motor_Pin_int1 = MotorLeft_Pin1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002bc0:	819a      	strh	r2, [r3, #12]
  Motor_InitStruct1->Motor_Pin_int2 = MotorLeft_Pin2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bc8:	829a      	strh	r2, [r3, #20]
  Motor_InitStruct1->number_turns = 0;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	61da      	str	r2, [r3, #28]
  Motor_InitStruct1->speed = 0;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	759a      	strb	r2, [r3, #22]
  Motor_InitStruct1->Tim_Encoder = MotorLeft_Encoder;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a13      	ldr	r2, [pc, #76]	; (8002c28 <vMotor_init+0x84>)
 8002bda:	601a      	str	r2, [r3, #0]
  Motor_InitStruct1->Tim_PWM = MotorLeft_PWM;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a13      	ldr	r2, [pc, #76]	; (8002c2c <vMotor_init+0x88>)
 8002be0:	605a      	str	r2, [r3, #4]

  Motor_InitStruct2->Motor_GPIO_int1 = MotorRight_GPIO_pin1;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <vMotor_init+0x80>)
 8002be6:	609a      	str	r2, [r3, #8]
  Motor_InitStruct2->Motor_GPIO_int2 = MotorRight_GPIO_pin2;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	4a0e      	ldr	r2, [pc, #56]	; (8002c24 <vMotor_init+0x80>)
 8002bec:	611a      	str	r2, [r3, #16]
  Motor_InitStruct2->Motor_Pin_int1 = MotorRight_Pin1;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bf4:	819a      	strh	r2, [r3, #12]
  Motor_InitStruct2->Motor_Pin_int2 = MotorRight_Pin2;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bfc:	829a      	strh	r2, [r3, #20]
  Motor_InitStruct2->number_turns = 0;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2200      	movs	r2, #0
 8002c02:	61da      	str	r2, [r3, #28]
  Motor_InitStruct2->speed = 0;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	2200      	movs	r2, #0
 8002c08:	759a      	strb	r2, [r3, #22]
  Motor_InitStruct2->Tim_Encoder = MotorRight_Encoder;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	4a08      	ldr	r2, [pc, #32]	; (8002c30 <vMotor_init+0x8c>)
 8002c0e:	601a      	str	r2, [r3, #0]
  Motor_InitStruct2->Tim_PWM = MotorRight_PWM;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4a08      	ldr	r2, [pc, #32]	; (8002c34 <vMotor_init+0x90>)
 8002c14:	605a      	str	r2, [r3, #4]
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40021800 	.word	0x40021800
 8002c28:	40000800 	.word	0x40000800
 8002c2c:	40001c00 	.word	0x40001c00
 8002c30:	40010400 	.word	0x40010400
 8002c34:	40002000 	.word	0x40002000

08002c38 <vMotorPID_init>:
void vMotor_SetPWM(Motor_InitTypeDef* motor, uint8_t dutyPWM) {
  motor->dutyPWM = (motor->Tim_PWM->ARR * dutyPWM) / 100.0;
  motor->Tim_PWM->CCR1 = motor->dutyPWM;
}

void vMotorPID_init(MotorPID_InitTypeDef* PID1, MotorPID_InitTypeDef* PID2) {
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  PID1->e_last = 0;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	611a      	str	r2, [r3, #16]
  PID1->e_sum = 0;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	829a      	strh	r2, [r3, #20]
  PID1->e_sumMax = MaxPIDki;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a16      	ldr	r2, [pc, #88]	; (8002cac <vMotorPID_init+0x74>)
 8002c54:	619a      	str	r2, [r3, #24]
  PID1->kp = KdValue1;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a15      	ldr	r2, [pc, #84]	; (8002cb0 <vMotorPID_init+0x78>)
 8002c5a:	601a      	str	r2, [r3, #0]
  PID1->ki = KiValue1;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002c62:	605a      	str	r2, [r3, #4]
  PID1->kd = KdValue1;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <vMotorPID_init+0x78>)
 8002c68:	609a      	str	r2, [r3, #8]
  PID1->ValueTask = 90;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a11      	ldr	r2, [pc, #68]	; (8002cb4 <vMotorPID_init+0x7c>)
 8002c6e:	61da      	str	r2, [r3, #28]

  PID2->e_last = 0;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
  PID2->e_sum = 0;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	829a      	strh	r2, [r3, #20]
  PID2->e_sumMax = MaxPIDki;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <vMotorPID_init+0x74>)
 8002c82:	619a      	str	r2, [r3, #24]
  PID2->kp = KdValue2;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	4a0a      	ldr	r2, [pc, #40]	; (8002cb0 <vMotorPID_init+0x78>)
 8002c88:	601a      	str	r2, [r3, #0]
  PID2->ki = KiValue2;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002c90:	605a      	str	r2, [r3, #4]
  PID2->kd = KdValue2;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	4a06      	ldr	r2, [pc, #24]	; (8002cb0 <vMotorPID_init+0x78>)
 8002c96:	609a      	str	r2, [r3, #8]
  PID2->ValueTask = 90;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	4a06      	ldr	r2, [pc, #24]	; (8002cb4 <vMotorPID_init+0x7c>)
 8002c9c:	61da      	str	r2, [r3, #28]
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	461c4000 	.word	0x461c4000
 8002cb0:	bcf5c28f 	.word	0xbcf5c28f
 8002cb4:	42b40000 	.word	0x42b40000

08002cb8 <MFRC522_CS_RESET>:

extern SPI_HandleTypeDef hspi2; /* extern hspi2 is in spi.h file */


void MFRC522_CS_RESET()
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_RFID_CS_GPIO_Port, SPI_RFID_CS_Pin, GPIO_PIN_RESET);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2102      	movs	r1, #2
 8002cc0:	4802      	ldr	r0, [pc, #8]	; (8002ccc <MFRC522_CS_RESET+0x14>)
 8002cc2:	f7fd ffbb 	bl	8000c3c <HAL_GPIO_WritePin>
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40020400 	.word	0x40020400

08002cd0 <MFRC522_CS_SET>:

void MFRC522_CS_SET()
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_RFID_CS_GPIO_Port, SPI_RFID_CS_Pin, GPIO_PIN_SET);
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	2102      	movs	r1, #2
 8002cd8:	4802      	ldr	r0, [pc, #8]	; (8002ce4 <MFRC522_CS_SET+0x14>)
 8002cda:	f7fd ffaf 	bl	8000c3c <HAL_GPIO_WritePin>
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40020400 	.word	0x40020400

08002ce8 <SPI1SendByte>:

uint8_t SPI1SendByte(uint8_t data)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	4603      	mov	r3, r0
 8002cf0:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];

	writeCommand[0] = data;
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &writeCommand,
 8002cf6:	f107 0208 	add.w	r2, r7, #8
 8002cfa:	f107 010c 	add.w	r1, r7, #12
 8002cfe:	230a      	movs	r3, #10
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	2301      	movs	r3, #1
 8002d04:	4803      	ldr	r0, [pc, #12]	; (8002d14 <SPI1SendByte+0x2c>)
 8002d06:	f7fe fd72 	bl	80017ee <HAL_SPI_TransmitReceive>
			(uint8_t*) &readValue, 1, 10);
	return readValue[0];
 8002d0a:	7a3b      	ldrb	r3, [r7, #8]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	200004f0 	.word	0x200004f0

08002d18 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	460a      	mov	r2, r1
 8002d22:	71fb      	strb	r3, [r7, #7]
 8002d24:	4613      	mov	r3, r2
 8002d26:	71bb      	strb	r3, [r7, #6]
	MFRC522_CS_RESET();
 8002d28:	f7ff ffc6 	bl	8002cb8 <MFRC522_CS_RESET>
	SPI1SendByte(address);
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff ffda 	bl	8002ce8 <SPI1SendByte>
	SPI1SendByte(value);
 8002d34:	79bb      	ldrb	r3, [r7, #6]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff ffd6 	bl	8002ce8 <SPI1SendByte>
	MFRC522_CS_SET();
 8002d3c:	f7ff ffc8 	bl	8002cd0 <MFRC522_CS_SET>
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	MFRC522_CS_RESET();
 8002d52:	f7ff ffb1 	bl	8002cb8 <MFRC522_CS_RESET>
	SPI1SendByte(address);
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ffc5 	bl	8002ce8 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f7ff ffc2 	bl	8002ce8 <SPI1SendByte>
 8002d64:	4603      	mov	r3, r0
 8002d66:	73fb      	strb	r3, [r7, #15]
	MFRC522_CS_SET();
 8002d68:	f7ff ffb2 	bl	8002cd0 <MFRC522_CS_SET>
	return val;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	460a      	mov	r2, r1
 8002d80:	71fb      	strb	r3, [r7, #7]
 8002d82:	4613      	mov	r3, r2
 8002d84:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;						// Address format: 0XXXXXX0
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002d90:	71fb      	strb	r3, [r7, #7]
	SPI1_WriteReg(addr, val);
 8002d92:	79ba      	ldrb	r2, [r7, #6]
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ffbd 	bl	8002d18 <SPI1_WriteReg>
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	4603      	mov	r3, r0
 8002dae:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	b25b      	sxtb	r3, r3
 8002db6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002dba:	b25b      	sxtb	r3, r3
 8002dbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002dc0:	b25b      	sxtb	r3, r3
 8002dc2:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff ffbe 	bl	8002d48 <SPI1_ReadReg>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	73fb      	strb	r3, [r7, #15]
	return val;
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);		// Find cards, return card type
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	2026      	movs	r0, #38	; 0x26
 8002de6:	f000 f849 	bl	8002e7c <MFRC522_Request>
 8002dea:	4603      	mov	r3, r0
 8002dec:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK)
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d104      	bne.n	8002dfe <MFRC522_Check+0x24>
		status = MFRC522_Anticoll(id);  // Card detected. Anti-collision, return card serial number 4 bytes
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f935 	bl	8003064 <MFRC522_Anticoll>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();																// Command card into hibernation
 8002dfe:	f000 f9f8 	bl	80031f2 <MFRC522_Halt>
	return status;
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <MFRC522_SetBitMask>:
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	460a      	mov	r2, r1
 8002e16:	71fb      	strb	r3, [r7, #7]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff ffc1 	bl	8002da6 <MFRC522_ReadRegister>
 8002e24:	4603      	mov	r3, r0
 8002e26:	461a      	mov	r2, r3
 8002e28:	79bb      	ldrb	r3, [r7, #6]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	4611      	mov	r1, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff ff9f 	bl	8002d76 <MFRC522_WriteRegister>
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	460a      	mov	r2, r1
 8002e4a:	71fb      	strb	r3, [r7, #7]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff ffa7 	bl	8002da6 <MFRC522_ReadRegister>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	b25a      	sxtb	r2, r3
 8002e5c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	b25b      	sxtb	r3, r3
 8002e64:	4013      	ands	r3, r2
 8002e66:	b25b      	sxtb	r3, r3
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ff81 	bl	8002d76 <MFRC522_WriteRegister>
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	4603      	mov	r3, r0
 8002e84:	6039      	str	r1, [r7, #0]
 8002e86:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t backBits;																	// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);	// TxLastBists = BitFramingReg[2..0]
 8002e88:	2107      	movs	r1, #7
 8002e8a:	200d      	movs	r0, #13
 8002e8c:	f7ff ff73 	bl	8002d76 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	79fa      	ldrb	r2, [r7, #7]
 8002e94:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8002e96:	f107 030c 	add.w	r3, r7, #12
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	6839      	ldr	r1, [r7, #0]
 8002ea2:	200c      	movs	r0, #12
 8002ea4:	f000 f80f 	bl	8002ec6 <MFRC522_ToCard>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10))
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d102      	bne.n	8002eb8 <MFRC522_Request+0x3c>
 8002eb2:	89bb      	ldrh	r3, [r7, #12]
 8002eb4:	2b10      	cmp	r3, #16
 8002eb6:	d001      	beq.n	8002ebc <MFRC522_Request+0x40>
		status = MI_ERR;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	73fb      	strb	r3, [r7, #15]
	return status;
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen,
		uint8_t* backData, uint16_t* backLen)
{
 8002ec6:	b590      	push	{r4, r7, lr}
 8002ec8:	b087      	sub	sp, #28
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	73fb      	strb	r3, [r7, #15]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8002edc:	2300      	movs	r3, #0
 8002ede:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command)
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	2b0c      	cmp	r3, #12
 8002ee8:	d007      	beq.n	8002efa <MFRC522_ToCard+0x34>
 8002eea:	2b0e      	cmp	r3, #14
 8002eec:	d000      	beq.n	8002ef0 <MFRC522_ToCard+0x2a>
		irqEn = 0x77;
		waitIRq = 0x30;
		break;
	}
	default:
		break;
 8002eee:	e009      	b.n	8002f04 <MFRC522_ToCard+0x3e>
		irqEn = 0x12;
 8002ef0:	2312      	movs	r3, #18
 8002ef2:	75bb      	strb	r3, [r7, #22]
		waitIRq = 0x10;
 8002ef4:	2310      	movs	r3, #16
 8002ef6:	757b      	strb	r3, [r7, #21]
		break;
 8002ef8:	e004      	b.n	8002f04 <MFRC522_ToCard+0x3e>
		irqEn = 0x77;
 8002efa:	2377      	movs	r3, #119	; 0x77
 8002efc:	75bb      	strb	r3, [r7, #22]
		waitIRq = 0x30;
 8002efe:	2330      	movs	r3, #48	; 0x30
 8002f00:	757b      	strb	r3, [r7, #21]
		break;
 8002f02:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8002f04:	7dbb      	ldrb	r3, [r7, #22]
 8002f06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	2002      	movs	r0, #2
 8002f10:	f7ff ff31 	bl	8002d76 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8002f14:	2180      	movs	r1, #128	; 0x80
 8002f16:	2004      	movs	r0, #4
 8002f18:	f7ff ff92 	bl	8002e40 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8002f1c:	2180      	movs	r1, #128	; 0x80
 8002f1e:	200a      	movs	r0, #10
 8002f20:	f7ff ff74 	bl	8002e0c <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8002f24:	2100      	movs	r1, #0
 8002f26:	2001      	movs	r0, #1
 8002f28:	f7ff ff25 	bl	8002d76 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++)
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	827b      	strh	r3, [r7, #18]
 8002f30:	e00a      	b.n	8002f48 <MFRC522_ToCard+0x82>
		MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8002f32:	8a7b      	ldrh	r3, [r7, #18]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	4413      	add	r3, r2
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	2009      	movs	r0, #9
 8002f3e:	f7ff ff1a 	bl	8002d76 <MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++)
 8002f42:	8a7b      	ldrh	r3, [r7, #18]
 8002f44:	3301      	adds	r3, #1
 8002f46:	827b      	strh	r3, [r7, #18]
 8002f48:	7bbb      	ldrb	r3, [r7, #14]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	8a7a      	ldrh	r2, [r7, #18]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d3ef      	bcc.n	8002f32 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	4619      	mov	r1, r3
 8002f56:	2001      	movs	r0, #1
 8002f58:	f7ff ff0d 	bl	8002d76 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b0c      	cmp	r3, #12
 8002f60:	d103      	bne.n	8002f6a <MFRC522_ToCard+0xa4>
		MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);	// StartSend=1,transmission of data starts
 8002f62:	2180      	movs	r1, #128	; 0x80
 8002f64:	200d      	movs	r0, #13
 8002f66:	f7ff ff51 	bl	8002e0c <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;  // i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8002f6a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002f6e:	827b      	strh	r3, [r7, #18]
	do
	{
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8002f70:	2004      	movs	r0, #4
 8002f72:	f7ff ff18 	bl	8002da6 <MFRC522_ReadRegister>
 8002f76:	4603      	mov	r3, r0
 8002f78:	753b      	strb	r3, [r7, #20]
		i--;
 8002f7a:	8a7b      	ldrh	r3, [r7, #18]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	827b      	strh	r3, [r7, #18]
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 8002f80:	8a7b      	ldrh	r3, [r7, #18]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <MFRC522_ToCard+0xd6>
 8002f86:	7d3b      	ldrb	r3, [r7, #20]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d105      	bne.n	8002f9c <MFRC522_ToCard+0xd6>
 8002f90:	7d3a      	ldrb	r2, [r7, #20]
 8002f92:	7d7b      	ldrb	r3, [r7, #21]
 8002f94:	4013      	ands	r3, r2
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0e9      	beq.n	8002f70 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);						// StartSend=0
 8002f9c:	2180      	movs	r1, #128	; 0x80
 8002f9e:	200d      	movs	r0, #13
 8002fa0:	f7ff ff4e 	bl	8002e40 <MFRC522_ClearBitMask>

	if (i != 0)
 8002fa4:	8a7b      	ldrh	r3, [r7, #18]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d057      	beq.n	800305a <MFRC522_ToCard+0x194>
	{
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B))
 8002faa:	2006      	movs	r0, #6
 8002fac:	f7ff fefb 	bl	8002da6 <MFRC522_ReadRegister>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f003 031b 	and.w	r3, r3, #27
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d14d      	bne.n	8003056 <MFRC522_ToCard+0x190>
		{
			status = MI_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01)
 8002fbe:	7d3a      	ldrb	r2, [r7, #20]
 8002fc0:	7dbb      	ldrb	r3, [r7, #22]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE)
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	2b0c      	cmp	r3, #12
 8002fd6:	d140      	bne.n	800305a <MFRC522_ToCard+0x194>
			{
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8002fd8:	200a      	movs	r0, #10
 8002fda:	f7ff fee4 	bl	8002da6 <MFRC522_ReadRegister>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8002fe2:	200c      	movs	r0, #12
 8002fe4:	f7ff fedf 	bl	8002da6 <MFRC522_ReadRegister>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	747b      	strb	r3, [r7, #17]
				if (lastBits)
 8002ff0:	7c7b      	ldrb	r3, [r7, #17]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00b      	beq.n	800300e <MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 8002ff6:	7d3b      	ldrb	r3, [r7, #20]
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	7c7b      	ldrb	r3, [r7, #17]
 8003002:	b29b      	uxth	r3, r3
 8003004:	4413      	add	r3, r2
 8003006:	b29a      	uxth	r2, r3
 8003008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300a:	801a      	strh	r2, [r3, #0]
 800300c:	e005      	b.n	800301a <MFRC522_ToCard+0x154>
				else
					*backLen = n * 8;
 800300e:	7d3b      	ldrb	r3, [r7, #20]
 8003010:	b29b      	uxth	r3, r3
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	b29a      	uxth	r2, r3
 8003016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003018:	801a      	strh	r2, [r3, #0]
				if (n == 0)
 800301a:	7d3b      	ldrb	r3, [r7, #20]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <MFRC522_ToCard+0x15e>
					n = 1;
 8003020:	2301      	movs	r3, #1
 8003022:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN)
 8003024:	7d3b      	ldrb	r3, [r7, #20]
 8003026:	2b10      	cmp	r3, #16
 8003028:	d901      	bls.n	800302e <MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 800302a:	2310      	movs	r3, #16
 800302c:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++)
 800302e:	2300      	movs	r3, #0
 8003030:	827b      	strh	r3, [r7, #18]
 8003032:	e00a      	b.n	800304a <MFRC522_ToCard+0x184>
					backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);	// Reading the received data in FIFO
 8003034:	8a7b      	ldrh	r3, [r7, #18]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	18d4      	adds	r4, r2, r3
 800303a:	2009      	movs	r0, #9
 800303c:	f7ff feb3 	bl	8002da6 <MFRC522_ReadRegister>
 8003040:	4603      	mov	r3, r0
 8003042:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++)
 8003044:	8a7b      	ldrh	r3, [r7, #18]
 8003046:	3301      	adds	r3, #1
 8003048:	827b      	strh	r3, [r7, #18]
 800304a:	7d3b      	ldrb	r3, [r7, #20]
 800304c:	b29b      	uxth	r3, r3
 800304e:	8a7a      	ldrh	r2, [r7, #18]
 8003050:	429a      	cmp	r2, r3
 8003052:	d3ef      	bcc.n	8003034 <MFRC522_ToCard+0x16e>
 8003054:	e001      	b.n	800305a <MFRC522_ToCard+0x194>
			}
		}
		else
			status = MI_ERR;
 8003056:	2302      	movs	r3, #2
 8003058:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 800305a:	7dfb      	ldrb	r3, [r7, #23]
}
 800305c:	4618      	mov	r0, r3
 800305e:	371c      	adds	r7, #28
 8003060:	46bd      	mov	sp, r7
 8003062:	bd90      	pop	{r4, r7, pc}

08003064 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af02      	add	r7, sp, #8
 800306a:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);	// TxLastBists=BitFramingReg[2..0]
 8003070:	2100      	movs	r1, #0
 8003072:	200d      	movs	r0, #13
 8003074:	f7ff fe7f 	bl	8002d76 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2293      	movs	r2, #147	; 0x93
 800307c:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3301      	adds	r3, #1
 8003082:	2220      	movs	r2, #32
 8003084:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8003086:	f107 030a 	add.w	r3, r7, #10
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	200c      	movs	r0, #12
 8003094:	f7ff ff17 	bl	8002ec6 <MFRC522_ToCard>
 8003098:	4603      	mov	r3, r0
 800309a:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK)
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d118      	bne.n	80030d4 <MFRC522_Anticoll+0x70>
	{
		// Check card serial number
		for (i = 0; i < 4; i++)
 80030a2:	2300      	movs	r3, #0
 80030a4:	73bb      	strb	r3, [r7, #14]
 80030a6:	e009      	b.n	80030bc <MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 80030a8:	7bbb      	ldrb	r3, [r7, #14]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	4413      	add	r3, r2
 80030ae:	781a      	ldrb	r2, [r3, #0]
 80030b0:	7b7b      	ldrb	r3, [r7, #13]
 80030b2:	4053      	eors	r3, r2
 80030b4:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++)
 80030b6:	7bbb      	ldrb	r3, [r7, #14]
 80030b8:	3301      	adds	r3, #1
 80030ba:	73bb      	strb	r3, [r7, #14]
 80030bc:	7bbb      	ldrb	r3, [r7, #14]
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d9f2      	bls.n	80030a8 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i])
 80030c2:	7bbb      	ldrb	r3, [r7, #14]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	4413      	add	r3, r2
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	7b7a      	ldrb	r2, [r7, #13]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d001      	beq.n	80030d4 <MFRC522_Anticoll+0x70>
			status = MI_ERR;
 80030d0:	2302      	movs	r3, #2
 80030d2:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t* pIndata, uint8_t len, uint8_t* pOutData)
{
 80030de:	b590      	push	{r4, r7, lr}
 80030e0:	b087      	sub	sp, #28
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	460b      	mov	r3, r1
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);								// CRCIrq = 0
 80030ec:	2104      	movs	r1, #4
 80030ee:	2005      	movs	r0, #5
 80030f0:	f7ff fea6 	bl	8002e40 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);		// Clear the FIFO pointer
 80030f4:	2180      	movs	r1, #128	; 0x80
 80030f6:	200a      	movs	r0, #10
 80030f8:	f7ff fe88 	bl	8002e0c <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO
	for (i = 0; i < len; i++)
 80030fc:	2300      	movs	r3, #0
 80030fe:	75fb      	strb	r3, [r7, #23]
 8003100:	e00a      	b.n	8003118 <MFRC522_CalculateCRC+0x3a>
		MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata + i));
 8003102:	7dfb      	ldrb	r3, [r7, #23]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	4619      	mov	r1, r3
 800310c:	2009      	movs	r0, #9
 800310e:	f7ff fe32 	bl	8002d76 <MFRC522_WriteRegister>
	for (i = 0; i < len; i++)
 8003112:	7dfb      	ldrb	r3, [r7, #23]
 8003114:	3301      	adds	r3, #1
 8003116:	75fb      	strb	r3, [r7, #23]
 8003118:	7dfa      	ldrb	r2, [r7, #23]
 800311a:	7afb      	ldrb	r3, [r7, #11]
 800311c:	429a      	cmp	r2, r3
 800311e:	d3f0      	bcc.n	8003102 <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8003120:	2103      	movs	r1, #3
 8003122:	2001      	movs	r0, #1
 8003124:	f7ff fe27 	bl	8002d76 <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 8003128:	23ff      	movs	r3, #255	; 0xff
 800312a:	75fb      	strb	r3, [r7, #23]
	do
	{
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 800312c:	2005      	movs	r0, #5
 800312e:	f7ff fe3a 	bl	8002da6 <MFRC522_ReadRegister>
 8003132:	4603      	mov	r3, r0
 8003134:	75bb      	strb	r3, [r7, #22]
		i--;
 8003136:	7dfb      	ldrb	r3, [r7, #23]
 8003138:	3b01      	subs	r3, #1
 800313a:	75fb      	strb	r3, [r7, #23]
	} while ((i != 0) && !(n & 0x04));															// CRCIrq = 1
 800313c:	7dfb      	ldrb	r3, [r7, #23]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d004      	beq.n	800314c <MFRC522_CalculateCRC+0x6e>
 8003142:	7dbb      	ldrb	r3, [r7, #22]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0ef      	beq.n	800312c <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 800314c:	2022      	movs	r0, #34	; 0x22
 800314e:	f7ff fe2a 	bl	8002da6 <MFRC522_ReadRegister>
 8003152:	4603      	mov	r3, r0
 8003154:	461a      	mov	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	1c5c      	adds	r4, r3, #1
 800315e:	2021      	movs	r0, #33	; 0x21
 8003160:	f7ff fe21 	bl	8002da6 <MFRC522_ReadRegister>
 8003164:	4603      	mov	r3, r0
 8003166:	7023      	strb	r3, [r4, #0]
}
 8003168:	bf00      	nop
 800316a:	371c      	adds	r7, #28
 800316c:	46bd      	mov	sp, r7
 800316e:	bd90      	pop	{r4, r7, pc}

08003170 <MFRC522_Init>:
	}
	return status;
}

void MFRC522_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8003174:	f000 f820 	bl	80031b8 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8003178:	218d      	movs	r1, #141	; 0x8d
 800317a:	202a      	movs	r0, #42	; 0x2a
 800317c:	f7ff fdfb 	bl	8002d76 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8003180:	213e      	movs	r1, #62	; 0x3e
 8003182:	202b      	movs	r0, #43	; 0x2b
 8003184:	f7ff fdf7 	bl	8002d76 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8003188:	211e      	movs	r1, #30
 800318a:	202d      	movs	r0, #45	; 0x2d
 800318c:	f7ff fdf3 	bl	8002d76 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8003190:	2100      	movs	r1, #0
 8003192:	202c      	movs	r0, #44	; 0x2c
 8003194:	f7ff fdef 	bl	8002d76 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain
 8003198:	2170      	movs	r1, #112	; 0x70
 800319a:	2026      	movs	r0, #38	; 0x26
 800319c:	f7ff fdeb 	bl	8002d76 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 80031a0:	2140      	movs	r1, #64	; 0x40
 80031a2:	2015      	movs	r0, #21
 80031a4:	f7ff fde7 	bl	8002d76 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 80031a8:	213d      	movs	r1, #61	; 0x3d
 80031aa:	2011      	movs	r0, #17
 80031ac:	f7ff fde3 	bl	8002d76 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 80031b0:	f000 f80a 	bl	80031c8 <MFRC522_AntennaOn>
}
 80031b4:	bf00      	nop
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <MFRC522_Reset>:

void MFRC522_Reset(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 80031bc:	210f      	movs	r1, #15
 80031be:	2001      	movs	r0, #1
 80031c0:	f7ff fdd9 	bl	8002d76 <MFRC522_WriteRegister>
}
 80031c4:	bf00      	nop
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 80031ce:	2014      	movs	r0, #20
 80031d0:	f7ff fde9 	bl	8002da6 <MFRC522_ReadRegister>
 80031d4:	4603      	mov	r3, r0
 80031d6:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03))
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d103      	bne.n	80031ea <MFRC522_AntennaOn+0x22>
		MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 80031e2:	2103      	movs	r1, #3
 80031e4:	2014      	movs	r0, #20
 80031e6:	f7ff fe11 	bl	8002e0c <MFRC522_SetBitMask>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <MFRC522_Halt>:
{
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 80031f8:	2350      	movs	r3, #80	; 0x50
 80031fa:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8003200:	463b      	mov	r3, r7
 8003202:	1c9a      	adds	r2, r3, #2
 8003204:	463b      	mov	r3, r7
 8003206:	2102      	movs	r1, #2
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff ff68 	bl	80030de <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 800320e:	463a      	mov	r2, r7
 8003210:	4639      	mov	r1, r7
 8003212:	1dbb      	adds	r3, r7, #6
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	4613      	mov	r3, r2
 8003218:	2204      	movs	r2, #4
 800321a:	200c      	movs	r0, #12
 800321c:	f7ff fe53 	bl	8002ec6 <MFRC522_ToCard>
}
 8003220:	bf00      	nop
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <ssd1306_write_byte>:
 *                           0: Writes to the command register
 *                           1: Writes to the display data ram
 * @retval None
 **/
static void ssd1306_write_byte(uint8_t chData, uint8_t chCmd)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	460a      	mov	r2, r1
 8003232:	71fb      	strb	r3, [r7, #7]
 8003234:	4613      	mov	r3, r2
 8003236:	71bb      	strb	r3, [r7, #6]
#ifdef INTERFACE_4WIRE_SPI

	SSD1306_CS_CLR();
 8003238:	f000 fa2e 	bl	8003698 <SSD1306_CS_CLR>

	if (chCmd)
 800323c:	79bb      	ldrb	r3, [r7, #6]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <ssd1306_write_byte+0x20>
	{
		SSD1306_DC_SET();
 8003242:	f000 fa41 	bl	80036c8 <SSD1306_DC_SET>
 8003246:	e001      	b.n	800324c <ssd1306_write_byte+0x24>
	} else
	{
		SSD1306_DC_CLR();
 8003248:	f000 fa4a 	bl	80036e0 <SSD1306_DC_CLR>
	}
	SSD1306_WRITE_BYTE(chData);
 800324c:	79fb      	ldrb	r3, [r7, #7]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fa52 	bl	80036f8 <SSD1306_WRITE_BYTE>

	SSD1306_DC_SET();
 8003254:	f000 fa38 	bl	80036c8 <SSD1306_DC_SET>
	SSD1306_CS_SET();
 8003258:	f000 fa12 	bl	8003680 <SSD1306_CS_SET>
	iic_wait_for_ack();

	iic_stop();

#endif
}
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <ssd1306_refresh_gram>:
 *
 * @retval  None
 **/

void ssd1306_refresh_gram(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
	uint8_t i, j;

	for (i = 0; i < 8; i++)
 800326a:	2300      	movs	r3, #0
 800326c:	71fb      	strb	r3, [r7, #7]
 800326e:	e026      	b.n	80032be <ssd1306_refresh_gram+0x5a>
	{
		ssd1306_write_byte(0xB0 + i, SSD1306_CMD);
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	3b50      	subs	r3, #80	; 0x50
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ffd5 	bl	8003228 <ssd1306_write_byte>
		__SET_COL_START_ADDR()
 800327e:	2100      	movs	r1, #0
 8003280:	2002      	movs	r0, #2
 8003282:	f7ff ffd1 	bl	8003228 <ssd1306_write_byte>
 8003286:	2100      	movs	r1, #0
 8003288:	2010      	movs	r0, #16
 800328a:	f7ff ffcd 	bl	8003228 <ssd1306_write_byte>
		;
		for (j = 0; j < 128; j++)
 800328e:	2300      	movs	r3, #0
 8003290:	71bb      	strb	r3, [r7, #6]
 8003292:	e00d      	b.n	80032b0 <ssd1306_refresh_gram+0x4c>
		{
			ssd1306_write_byte(s_chDispalyBuffer[j][i], SSD1306_DAT);
 8003294:	79ba      	ldrb	r2, [r7, #6]
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	490c      	ldr	r1, [pc, #48]	; (80032cc <ssd1306_refresh_gram+0x68>)
 800329a:	00d2      	lsls	r2, r2, #3
 800329c:	440a      	add	r2, r1
 800329e:	4413      	add	r3, r2
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2101      	movs	r1, #1
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff ffbf 	bl	8003228 <ssd1306_write_byte>
		for (j = 0; j < 128; j++)
 80032aa:	79bb      	ldrb	r3, [r7, #6]
 80032ac:	3301      	adds	r3, #1
 80032ae:	71bb      	strb	r3, [r7, #6]
 80032b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	daed      	bge.n	8003294 <ssd1306_refresh_gram+0x30>
	for (i = 0; i < 8; i++)
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	3301      	adds	r3, #1
 80032bc:	71fb      	strb	r3, [r7, #7]
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	2b07      	cmp	r3, #7
 80032c2:	d9d5      	bls.n	8003270 <ssd1306_refresh_gram+0xc>
		}
	}
}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	2000008c 	.word	0x2000008c

080032d0 <ssd1306_clear_screen>:
 *
 * @retval  None
 **/

void ssd1306_clear_screen(uint8_t chFill)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	71fb      	strb	r3, [r7, #7]
	uint8_t i, j;

	for (i = 0; i < 8; i++)
 80032da:	2300      	movs	r3, #0
 80032dc:	73fb      	strb	r3, [r7, #15]
 80032de:	e023      	b.n	8003328 <ssd1306_clear_screen+0x58>
	{
		ssd1306_write_byte(0xB0 + i, SSD1306_CMD);
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	3b50      	subs	r3, #80	; 0x50
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2100      	movs	r1, #0
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff9d 	bl	8003228 <ssd1306_write_byte>
		__SET_COL_START_ADDR()
 80032ee:	2100      	movs	r1, #0
 80032f0:	2002      	movs	r0, #2
 80032f2:	f7ff ff99 	bl	8003228 <ssd1306_write_byte>
 80032f6:	2100      	movs	r1, #0
 80032f8:	2010      	movs	r0, #16
 80032fa:	f7ff ff95 	bl	8003228 <ssd1306_write_byte>
		;
		for (j = 0; j < 128; j++)
 80032fe:	2300      	movs	r3, #0
 8003300:	73bb      	strb	r3, [r7, #14]
 8003302:	e00a      	b.n	800331a <ssd1306_clear_screen+0x4a>
		{
			s_chDispalyBuffer[j][i] = chFill;
 8003304:	7bba      	ldrb	r2, [r7, #14]
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	490c      	ldr	r1, [pc, #48]	; (800333c <ssd1306_clear_screen+0x6c>)
 800330a:	00d2      	lsls	r2, r2, #3
 800330c:	440a      	add	r2, r1
 800330e:	4413      	add	r3, r2
 8003310:	79fa      	ldrb	r2, [r7, #7]
 8003312:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 128; j++)
 8003314:	7bbb      	ldrb	r3, [r7, #14]
 8003316:	3301      	adds	r3, #1
 8003318:	73bb      	strb	r3, [r7, #14]
 800331a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800331e:	2b00      	cmp	r3, #0
 8003320:	daf0      	bge.n	8003304 <ssd1306_clear_screen+0x34>
	for (i = 0; i < 8; i++)
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	3301      	adds	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	2b07      	cmp	r3, #7
 800332c:	d9d8      	bls.n	80032e0 <ssd1306_clear_screen+0x10>
		}
	}

	ssd1306_refresh_gram();
 800332e:	f7ff ff99 	bl	8003264 <ssd1306_refresh_gram>
}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	2000008c 	.word	0x2000008c

08003340 <ssd1306_draw_point>:
 *
 * @retval None
 **/

void ssd1306_draw_point(uint8_t chXpos, uint8_t chYpos, uint8_t chPoint)
{
 8003340:	b490      	push	{r4, r7}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	71fb      	strb	r3, [r7, #7]
 800334a:	460b      	mov	r3, r1
 800334c:	71bb      	strb	r3, [r7, #6]
 800334e:	4613      	mov	r3, r2
 8003350:	717b      	strb	r3, [r7, #5]
	uint8_t chPos, chBx, chTemp = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	73fb      	strb	r3, [r7, #15]

	if (chXpos > 127 || chYpos > 63)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	2b00      	cmp	r3, #0
 800335c:	db41      	blt.n	80033e2 <ssd1306_draw_point+0xa2>
 800335e:	79bb      	ldrb	r3, [r7, #6]
 8003360:	2b3f      	cmp	r3, #63	; 0x3f
 8003362:	d83e      	bhi.n	80033e2 <ssd1306_draw_point+0xa2>
	{
		return;
	}
	chPos = 7 - chYpos / 8; // 
 8003364:	79bb      	ldrb	r3, [r7, #6]
 8003366:	08db      	lsrs	r3, r3, #3
 8003368:	b2db      	uxtb	r3, r3
 800336a:	f1c3 0307 	rsb	r3, r3, #7
 800336e:	73bb      	strb	r3, [r7, #14]
	chBx = chYpos % 8;
 8003370:	79bb      	ldrb	r3, [r7, #6]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	737b      	strb	r3, [r7, #13]
	chTemp = 1 << (7 - chBx);
 8003378:	7b7b      	ldrb	r3, [r7, #13]
 800337a:	f1c3 0307 	rsb	r3, r3, #7
 800337e:	2201      	movs	r2, #1
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	73fb      	strb	r3, [r7, #15]

	if (chPoint)
 8003386:	797b      	ldrb	r3, [r7, #5]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d012      	beq.n	80033b2 <ssd1306_draw_point+0x72>
	{
		s_chDispalyBuffer[chXpos][chPos] |= chTemp;
 800338c:	79fa      	ldrb	r2, [r7, #7]
 800338e:	7bbb      	ldrb	r3, [r7, #14]
 8003390:	79f8      	ldrb	r0, [r7, #7]
 8003392:	7bb9      	ldrb	r1, [r7, #14]
 8003394:	4c15      	ldr	r4, [pc, #84]	; (80033ec <ssd1306_draw_point+0xac>)
 8003396:	00c0      	lsls	r0, r0, #3
 8003398:	4420      	add	r0, r4
 800339a:	4401      	add	r1, r0
 800339c:	7808      	ldrb	r0, [r1, #0]
 800339e:	7bf9      	ldrb	r1, [r7, #15]
 80033a0:	4301      	orrs	r1, r0
 80033a2:	b2c8      	uxtb	r0, r1
 80033a4:	4911      	ldr	r1, [pc, #68]	; (80033ec <ssd1306_draw_point+0xac>)
 80033a6:	00d2      	lsls	r2, r2, #3
 80033a8:	440a      	add	r2, r1
 80033aa:	4413      	add	r3, r2
 80033ac:	4602      	mov	r2, r0
 80033ae:	701a      	strb	r2, [r3, #0]
 80033b0:	e018      	b.n	80033e4 <ssd1306_draw_point+0xa4>

	} else
	{
		s_chDispalyBuffer[chXpos][chPos] &= ~chTemp;
 80033b2:	79fa      	ldrb	r2, [r7, #7]
 80033b4:	7bbb      	ldrb	r3, [r7, #14]
 80033b6:	79f8      	ldrb	r0, [r7, #7]
 80033b8:	7bb9      	ldrb	r1, [r7, #14]
 80033ba:	4c0c      	ldr	r4, [pc, #48]	; (80033ec <ssd1306_draw_point+0xac>)
 80033bc:	00c0      	lsls	r0, r0, #3
 80033be:	4420      	add	r0, r4
 80033c0:	4401      	add	r1, r0
 80033c2:	7809      	ldrb	r1, [r1, #0]
 80033c4:	b248      	sxtb	r0, r1
 80033c6:	f997 100f 	ldrsb.w	r1, [r7, #15]
 80033ca:	43c9      	mvns	r1, r1
 80033cc:	b249      	sxtb	r1, r1
 80033ce:	4001      	ands	r1, r0
 80033d0:	b249      	sxtb	r1, r1
 80033d2:	b2c8      	uxtb	r0, r1
 80033d4:	4905      	ldr	r1, [pc, #20]	; (80033ec <ssd1306_draw_point+0xac>)
 80033d6:	00d2      	lsls	r2, r2, #3
 80033d8:	440a      	add	r2, r1
 80033da:	4413      	add	r3, r2
 80033dc:	4602      	mov	r2, r0
 80033de:	701a      	strb	r2, [r3, #0]
 80033e0:	e000      	b.n	80033e4 <ssd1306_draw_point+0xa4>
		return;
 80033e2:	bf00      	nop
	}
}
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc90      	pop	{r4, r7}
 80033ea:	4770      	bx	lr
 80033ec:	2000008c 	.word	0x2000008c

080033f0 <ssd1306_display_char>:
 * @param  chMode
 * @retval
 **/
void ssd1306_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr,
		uint8_t chSize, uint8_t chMode)
{
 80033f0:	b590      	push	{r4, r7, lr}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4604      	mov	r4, r0
 80033f8:	4608      	mov	r0, r1
 80033fa:	4611      	mov	r1, r2
 80033fc:	461a      	mov	r2, r3
 80033fe:	4623      	mov	r3, r4
 8003400:	71fb      	strb	r3, [r7, #7]
 8003402:	4603      	mov	r3, r0
 8003404:	71bb      	strb	r3, [r7, #6]
 8003406:	460b      	mov	r3, r1
 8003408:	717b      	strb	r3, [r7, #5]
 800340a:	4613      	mov	r3, r2
 800340c:	713b      	strb	r3, [r7, #4]
	uint8_t i, j;
	uint8_t chTemp, chYpos0 = chYpos;
 800340e:	79bb      	ldrb	r3, [r7, #6]
 8003410:	733b      	strb	r3, [r7, #12]

	chChr = chChr - ' ';
 8003412:	797b      	ldrb	r3, [r7, #5]
 8003414:	3b20      	subs	r3, #32
 8003416:	717b      	strb	r3, [r7, #5]
	for (i = 0; i < chSize; i++)
 8003418:	2300      	movs	r3, #0
 800341a:	73fb      	strb	r3, [r7, #15]
 800341c:	e064      	b.n	80034e8 <ssd1306_display_char+0xf8>
	{
		if (chSize == 12)
 800341e:	793b      	ldrb	r3, [r7, #4]
 8003420:	2b0c      	cmp	r3, #12
 8003422:	d11c      	bne.n	800345e <ssd1306_display_char+0x6e>
		{
			if (chMode)
 8003424:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00b      	beq.n	8003444 <ssd1306_display_char+0x54>
			{
				chTemp = c_chFont1206[chChr][i];
 800342c:	797a      	ldrb	r2, [r7, #5]
 800342e:	7bf9      	ldrb	r1, [r7, #15]
 8003430:	4831      	ldr	r0, [pc, #196]	; (80034f8 <ssd1306_display_char+0x108>)
 8003432:	4613      	mov	r3, r2
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4403      	add	r3, r0
 800343c:	440b      	add	r3, r1
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	737b      	strb	r3, [r7, #13]
 8003442:	e022      	b.n	800348a <ssd1306_display_char+0x9a>
			} else
			{
				chTemp = ~c_chFont1206[chChr][i];
 8003444:	797a      	ldrb	r2, [r7, #5]
 8003446:	7bf9      	ldrb	r1, [r7, #15]
 8003448:	482b      	ldr	r0, [pc, #172]	; (80034f8 <ssd1306_display_char+0x108>)
 800344a:	4613      	mov	r3, r2
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	4413      	add	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4403      	add	r3, r0
 8003454:	440b      	add	r3, r1
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	43db      	mvns	r3, r3
 800345a:	737b      	strb	r3, [r7, #13]
 800345c:	e015      	b.n	800348a <ssd1306_display_char+0x9a>
			}
		} else
		{
			if (chMode)
 800345e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d008      	beq.n	8003478 <ssd1306_display_char+0x88>
			{
				chTemp = c_chFont1608[chChr][i];
 8003466:	797a      	ldrb	r2, [r7, #5]
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	4924      	ldr	r1, [pc, #144]	; (80034fc <ssd1306_display_char+0x10c>)
 800346c:	0112      	lsls	r2, r2, #4
 800346e:	440a      	add	r2, r1
 8003470:	4413      	add	r3, r2
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	737b      	strb	r3, [r7, #13]
 8003476:	e008      	b.n	800348a <ssd1306_display_char+0x9a>
			} else
			{
				chTemp = ~c_chFont1608[chChr][i];
 8003478:	797a      	ldrb	r2, [r7, #5]
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	491f      	ldr	r1, [pc, #124]	; (80034fc <ssd1306_display_char+0x10c>)
 800347e:	0112      	lsls	r2, r2, #4
 8003480:	440a      	add	r2, r1
 8003482:	4413      	add	r3, r2
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	43db      	mvns	r3, r3
 8003488:	737b      	strb	r3, [r7, #13]
			}
		}

		for (j = 0; j < 8; j++)
 800348a:	2300      	movs	r3, #0
 800348c:	73bb      	strb	r3, [r7, #14]
 800348e:	e025      	b.n	80034dc <ssd1306_display_char+0xec>
		{
			if (chTemp & 0x80)
 8003490:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003494:	2b00      	cmp	r3, #0
 8003496:	da06      	bge.n	80034a6 <ssd1306_display_char+0xb6>
			{
				ssd1306_draw_point(chXpos, chYpos, 1);
 8003498:	79b9      	ldrb	r1, [r7, #6]
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	2201      	movs	r2, #1
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff ff4e 	bl	8003340 <ssd1306_draw_point>
 80034a4:	e005      	b.n	80034b2 <ssd1306_display_char+0xc2>
			} else
			{
				ssd1306_draw_point(chXpos, chYpos, 0);
 80034a6:	79b9      	ldrb	r1, [r7, #6]
 80034a8:	79fb      	ldrb	r3, [r7, #7]
 80034aa:	2200      	movs	r2, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff47 	bl	8003340 <ssd1306_draw_point>
			}
			chTemp <<= 1;
 80034b2:	7b7b      	ldrb	r3, [r7, #13]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	737b      	strb	r3, [r7, #13]
			chYpos++;
 80034b8:	79bb      	ldrb	r3, [r7, #6]
 80034ba:	3301      	adds	r3, #1
 80034bc:	71bb      	strb	r3, [r7, #6]

			if ((chYpos - chYpos0) == chSize)
 80034be:	79ba      	ldrb	r2, [r7, #6]
 80034c0:	7b3b      	ldrb	r3, [r7, #12]
 80034c2:	1ad2      	subs	r2, r2, r3
 80034c4:	793b      	ldrb	r3, [r7, #4]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d105      	bne.n	80034d6 <ssd1306_display_char+0xe6>
			{
				chYpos = chYpos0;
 80034ca:	7b3b      	ldrb	r3, [r7, #12]
 80034cc:	71bb      	strb	r3, [r7, #6]
				chXpos++;
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	3301      	adds	r3, #1
 80034d2:	71fb      	strb	r3, [r7, #7]
				break;
 80034d4:	e005      	b.n	80034e2 <ssd1306_display_char+0xf2>
		for (j = 0; j < 8; j++)
 80034d6:	7bbb      	ldrb	r3, [r7, #14]
 80034d8:	3301      	adds	r3, #1
 80034da:	73bb      	strb	r3, [r7, #14]
 80034dc:	7bbb      	ldrb	r3, [r7, #14]
 80034de:	2b07      	cmp	r3, #7
 80034e0:	d9d6      	bls.n	8003490 <ssd1306_display_char+0xa0>
	for (i = 0; i < chSize; i++)
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	3301      	adds	r3, #1
 80034e6:	73fb      	strb	r3, [r7, #15]
 80034e8:	7bfa      	ldrb	r2, [r7, #15]
 80034ea:	793b      	ldrb	r3, [r7, #4]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d396      	bcc.n	800341e <ssd1306_display_char+0x2e>
			}
		}
	}
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd90      	pop	{r4, r7, pc}
 80034f8:	08005710 	.word	0x08005710
 80034fc:	08005b84 	.word	0x08005b84

08003500 <ssd1306_display_string>:
 *
 * @retval  None
 **/
void ssd1306_display_string(uint8_t chXpos, uint8_t chYpos,
		const uint8_t *pchString, uint8_t chSize, uint8_t chMode)
{
 8003500:	b590      	push	{r4, r7, lr}
 8003502:	b085      	sub	sp, #20
 8003504:	af02      	add	r7, sp, #8
 8003506:	603a      	str	r2, [r7, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	4603      	mov	r3, r0
 800350c:	71fb      	strb	r3, [r7, #7]
 800350e:	460b      	mov	r3, r1
 8003510:	71bb      	strb	r3, [r7, #6]
 8003512:	4613      	mov	r3, r2
 8003514:	717b      	strb	r3, [r7, #5]
	while (*pchString != '\0')
 8003516:	e02d      	b.n	8003574 <ssd1306_display_string+0x74>
	{
		if (chXpos > (SSD1306_WIDTH - chSize / 2))
 8003518:	79fa      	ldrb	r2, [r7, #7]
 800351a:	797b      	ldrb	r3, [r7, #5]
 800351c:	085b      	lsrs	r3, r3, #1
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003524:	429a      	cmp	r2, r3
 8003526:	dd12      	ble.n	800354e <ssd1306_display_string+0x4e>
		{
			chXpos = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 800352c:	79ba      	ldrb	r2, [r7, #6]
 800352e:	797b      	ldrb	r3, [r7, #5]
 8003530:	4413      	add	r3, r2
 8003532:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (SSD1306_HEIGHT - chSize))
 8003534:	79ba      	ldrb	r2, [r7, #6]
 8003536:	797b      	ldrb	r3, [r7, #5]
 8003538:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800353c:	429a      	cmp	r2, r3
 800353e:	dd06      	ble.n	800354e <ssd1306_display_string+0x4e>
			{
				chYpos = chXpos = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	71fb      	strb	r3, [r7, #7]
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	71bb      	strb	r3, [r7, #6]
				ssd1306_clear_screen(0x00);
 8003548:	2000      	movs	r0, #0
 800354a:	f7ff fec1 	bl	80032d0 <ssd1306_clear_screen>
			}
		}

		ssd1306_display_char(chXpos, chYpos, *pchString, chSize, chMode);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	781a      	ldrb	r2, [r3, #0]
 8003552:	797c      	ldrb	r4, [r7, #5]
 8003554:	79b9      	ldrb	r1, [r7, #6]
 8003556:	79f8      	ldrb	r0, [r7, #7]
 8003558:	7e3b      	ldrb	r3, [r7, #24]
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	4623      	mov	r3, r4
 800355e:	f7ff ff47 	bl	80033f0 <ssd1306_display_char>
		chXpos += chSize / 2;
 8003562:	797b      	ldrb	r3, [r7, #5]
 8003564:	085b      	lsrs	r3, r3, #1
 8003566:	b2da      	uxtb	r2, r3
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	4413      	add	r3, r2
 800356c:	71fb      	strb	r3, [r7, #7]
		pchString++;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	3301      	adds	r3, #1
 8003572:	603b      	str	r3, [r7, #0]
	while (*pchString != '\0')
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1cd      	bne.n	8003518 <ssd1306_display_string+0x18>
	}
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	bd90      	pop	{r4, r7, pc}

08003584 <ssd1306_init>:
 * @param  None
 *
 * @retval None
 **/
void ssd1306_init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0

#ifdef INTERFACE_4WIRE_SPI	  
	SSD1306_CS_SET();   //CS set
 8003588:	f000 f87a 	bl	8003680 <SSD1306_CS_SET>
	SSD1306_DC_CLR();   //D/C reset
 800358c:	f000 f8a8 	bl	80036e0 <SSD1306_DC_CLR>
	SSD1306_RES_SET();  //RES set
 8003590:	f000 f88e 	bl	80036b0 <SSD1306_RES_SET>
	SSD1306_DC_CLR();//D/C reset
	SSD1306_RES_SET();//RES set

#endif

	ssd1306_write_byte(0xAE, SSD1306_CMD);  //--turn off oled panel
 8003594:	2100      	movs	r1, #0
 8003596:	20ae      	movs	r0, #174	; 0xae
 8003598:	f7ff fe46 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0x00, SSD1306_CMD);  //---set low column address
 800359c:	2100      	movs	r1, #0
 800359e:	2000      	movs	r0, #0
 80035a0:	f7ff fe42 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0x10, SSD1306_CMD);  //---set high column address
 80035a4:	2100      	movs	r1, #0
 80035a6:	2010      	movs	r0, #16
 80035a8:	f7ff fe3e 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0x40, SSD1306_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 80035ac:	2100      	movs	r1, #0
 80035ae:	2040      	movs	r0, #64	; 0x40
 80035b0:	f7ff fe3a 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0x81, SSD1306_CMD);  //--set contrast control register
 80035b4:	2100      	movs	r1, #0
 80035b6:	2081      	movs	r0, #129	; 0x81
 80035b8:	f7ff fe36 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0xCF, SSD1306_CMD);  // Set SEG Output Current Brightness
 80035bc:	2100      	movs	r1, #0
 80035be:	20cf      	movs	r0, #207	; 0xcf
 80035c0:	f7ff fe32 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0xA1, SSD1306_CMD);  //--Set SEG/Column Mapping
 80035c4:	2100      	movs	r1, #0
 80035c6:	20a1      	movs	r0, #161	; 0xa1
 80035c8:	f7ff fe2e 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0xC0, SSD1306_CMD);  //Set COM/Row Scan Direction
 80035cc:	2100      	movs	r1, #0
 80035ce:	20c0      	movs	r0, #192	; 0xc0
 80035d0:	f7ff fe2a 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0xA6, SSD1306_CMD);  //--set normal display
 80035d4:	2100      	movs	r1, #0
 80035d6:	20a6      	movs	r0, #166	; 0xa6
 80035d8:	f7ff fe26 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0xA8, SSD1306_CMD);  //--set multiplex ratio(1 to 64)
 80035dc:	2100      	movs	r1, #0
 80035de:	20a8      	movs	r0, #168	; 0xa8
 80035e0:	f7ff fe22 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0x3f, SSD1306_CMD);  //--1/64 duty
 80035e4:	2100      	movs	r1, #0
 80035e6:	203f      	movs	r0, #63	; 0x3f
 80035e8:	f7ff fe1e 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0xD3, SSD1306_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 80035ec:	2100      	movs	r1, #0
 80035ee:	20d3      	movs	r0, #211	; 0xd3
 80035f0:	f7ff fe1a 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0x00, SSD1306_CMD);  //-not offset
 80035f4:	2100      	movs	r1, #0
 80035f6:	2000      	movs	r0, #0
 80035f8:	f7ff fe16 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0xd5, SSD1306_CMD); //--set display clock divide ratio/oscillator frequency
 80035fc:	2100      	movs	r1, #0
 80035fe:	20d5      	movs	r0, #213	; 0xd5
 8003600:	f7ff fe12 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0x80, SSD1306_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 8003604:	2100      	movs	r1, #0
 8003606:	2080      	movs	r0, #128	; 0x80
 8003608:	f7ff fe0e 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0xD9, SSD1306_CMD);  //--set pre-charge period
 800360c:	2100      	movs	r1, #0
 800360e:	20d9      	movs	r0, #217	; 0xd9
 8003610:	f7ff fe0a 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0xF1, SSD1306_CMD); //Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8003614:	2100      	movs	r1, #0
 8003616:	20f1      	movs	r0, #241	; 0xf1
 8003618:	f7ff fe06 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0xDA, SSD1306_CMD); //--set com pins hardware configuration
 800361c:	2100      	movs	r1, #0
 800361e:	20da      	movs	r0, #218	; 0xda
 8003620:	f7ff fe02 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0x12, SSD1306_CMD);
 8003624:	2100      	movs	r1, #0
 8003626:	2012      	movs	r0, #18
 8003628:	f7ff fdfe 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0xDB, SSD1306_CMD);  //--set vcomh
 800362c:	2100      	movs	r1, #0
 800362e:	20db      	movs	r0, #219	; 0xdb
 8003630:	f7ff fdfa 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0x40, SSD1306_CMD);  //Set VCOM Deselect Level
 8003634:	2100      	movs	r1, #0
 8003636:	2040      	movs	r0, #64	; 0x40
 8003638:	f7ff fdf6 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0x20, SSD1306_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 800363c:	2100      	movs	r1, #0
 800363e:	2020      	movs	r0, #32
 8003640:	f7ff fdf2 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0x02, SSD1306_CMD);  //
 8003644:	2100      	movs	r1, #0
 8003646:	2002      	movs	r0, #2
 8003648:	f7ff fdee 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0x8D, SSD1306_CMD);  //--set Charge Pump enable/disable
 800364c:	2100      	movs	r1, #0
 800364e:	208d      	movs	r0, #141	; 0x8d
 8003650:	f7ff fdea 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0x14, SSD1306_CMD);  //--set(0x10) disable
 8003654:	2100      	movs	r1, #0
 8003656:	2014      	movs	r0, #20
 8003658:	f7ff fde6 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0xA4, SSD1306_CMD); // Disable Entire Display On (0xa4/0xa5)
 800365c:	2100      	movs	r1, #0
 800365e:	20a4      	movs	r0, #164	; 0xa4
 8003660:	f7ff fde2 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0xA6, SSD1306_CMD); // Disable Inverse Display On (0xa6/a7)
 8003664:	2100      	movs	r1, #0
 8003666:	20a6      	movs	r0, #166	; 0xa6
 8003668:	f7ff fdde 	bl	8003228 <ssd1306_write_byte>
	ssd1306_write_byte(0xAF, SSD1306_CMD);  //--turn on oled panel
 800366c:	2100      	movs	r1, #0
 800366e:	20af      	movs	r0, #175	; 0xaf
 8003670:	f7ff fdda 	bl	8003228 <ssd1306_write_byte>

	ssd1306_clear_screen(0x00);
 8003674:	2000      	movs	r0, #0
 8003676:	f7ff fe2b 	bl	80032d0 <ssd1306_clear_screen>
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <SSD1306_CS_SET>:

///moje
void SSD1306_CS_SET()
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_CS_GPIO, SSD1306_CS_PIN, GPIO_PIN_SET);
 8003684:	2201      	movs	r2, #1
 8003686:	2104      	movs	r1, #4
 8003688:	4802      	ldr	r0, [pc, #8]	; (8003694 <SSD1306_CS_SET+0x14>)
 800368a:	f7fd fad7 	bl	8000c3c <HAL_GPIO_WritePin>
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40021800 	.word	0x40021800

08003698 <SSD1306_CS_CLR>:
void SSD1306_CS_CLR()
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_CS_GPIO, SSD1306_CS_PIN, GPIO_PIN_RESET);
 800369c:	2200      	movs	r2, #0
 800369e:	2104      	movs	r1, #4
 80036a0:	4802      	ldr	r0, [pc, #8]	; (80036ac <SSD1306_CS_CLR+0x14>)
 80036a2:	f7fd facb 	bl	8000c3c <HAL_GPIO_WritePin>
}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40021800 	.word	0x40021800

080036b0 <SSD1306_RES_SET>:

void SSD1306_RES_SET()
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_RES_GPIO, SSD1306_RES_PIN, GPIO_PIN_SET);
 80036b4:	2201      	movs	r2, #1
 80036b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036ba:	4802      	ldr	r0, [pc, #8]	; (80036c4 <SSD1306_RES_SET+0x14>)
 80036bc:	f7fd fabe 	bl	8000c3c <HAL_GPIO_WritePin>
}
 80036c0:	bf00      	nop
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40020800 	.word	0x40020800

080036c8 <SSD1306_DC_SET>:
{
	HAL_GPIO_WritePin(SSD1306_RES_GPIO, SSD1306_RES_PIN, GPIO_PIN_RESET);
}

void SSD1306_DC_SET()
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_DC_GPIO, SSD1306_DC_PIN, GPIO_PIN_SET);
 80036cc:	2201      	movs	r2, #1
 80036ce:	2108      	movs	r1, #8
 80036d0:	4802      	ldr	r0, [pc, #8]	; (80036dc <SSD1306_DC_SET+0x14>)
 80036d2:	f7fd fab3 	bl	8000c3c <HAL_GPIO_WritePin>
}
 80036d6:	bf00      	nop
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40021800 	.word	0x40021800

080036e0 <SSD1306_DC_CLR>:
void SSD1306_DC_CLR()
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_DC_GPIO, SSD1306_DC_PIN, GPIO_PIN_RESET);
 80036e4:	2200      	movs	r2, #0
 80036e6:	2108      	movs	r1, #8
 80036e8:	4802      	ldr	r0, [pc, #8]	; (80036f4 <SSD1306_DC_CLR+0x14>)
 80036ea:	f7fd faa7 	bl	8000c3c <HAL_GPIO_WritePin>
}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40021800 	.word	0x40021800

080036f8 <SSD1306_WRITE_BYTE>:
{
	HAL_GPIO_WritePin(SSD1306_DIN_GPIO, SSD1306_DIN_PIN, GPIO_PIN_RESET);
}

void SSD1306_WRITE_BYTE(uint8_t DATA)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi3, &DATA, 1, 1000);
 8003702:	1df9      	adds	r1, r7, #7
 8003704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003708:	2201      	movs	r2, #1
 800370a:	4803      	ldr	r0, [pc, #12]	; (8003718 <SSD1306_WRITE_BYTE+0x20>)
 800370c:	f7fd ff3d 	bl	800158a <HAL_SPI_Transmit>

}
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	20000548 	.word	0x20000548

0800371c <ssd1306_hello_word>:
/*-------------------------------END OF FILE LIBRARY-------------------------------*/

/*-------------------------------USER INTERFACE-------------------------------*/

void ssd1306_hello_word()
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af02      	add	r7, sp, #8
	//ssd1306_draw_bitmap(30, 30, (uint8_t* )c_chBmp4016, 40, 16);

	ssd1306_display_string(0, 0, (uint8_t *) "System Init OK", 16, 0);
 8003722:	2300      	movs	r3, #0
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	2310      	movs	r3, #16
 8003728:	4a0f      	ldr	r2, [pc, #60]	; (8003768 <ssd1306_hello_word+0x4c>)
 800372a:	2100      	movs	r1, #0
 800372c:	2000      	movs	r0, #0
 800372e:	f7ff fee7 	bl	8003500 <ssd1306_display_string>
	ssd1306_refresh_gram();
 8003732:	f7ff fd97 	bl	8003264 <ssd1306_refresh_gram>
	HAL_Delay(1000);
 8003736:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800373a:	f7fc ffa3 	bl	8000684 <HAL_Delay>
	ssd1306_display_string(0, 0, (uint8_t *) "Praca Magisterska", 12, 1);
 800373e:	2301      	movs	r3, #1
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	230c      	movs	r3, #12
 8003744:	4a09      	ldr	r2, [pc, #36]	; (800376c <ssd1306_hello_word+0x50>)
 8003746:	2100      	movs	r1, #0
 8003748:	2000      	movs	r0, #0
 800374a:	f7ff fed9 	bl	8003500 <ssd1306_display_string>
	ssd1306_display_string(10, 16, (uint8_t *) "Kamil Karpiak", 14, 1);
 800374e:	2301      	movs	r3, #1
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	230e      	movs	r3, #14
 8003754:	4a06      	ldr	r2, [pc, #24]	; (8003770 <ssd1306_hello_word+0x54>)
 8003756:	2110      	movs	r1, #16
 8003758:	200a      	movs	r0, #10
 800375a:	f7ff fed1 	bl	8003500 <ssd1306_display_string>
	ssd1306_refresh_gram();
 800375e:	f7ff fd81 	bl	8003264 <ssd1306_refresh_gram>

}
 8003762:	bf00      	nop
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	08005678 	.word	0x08005678
 800376c:	08005688 	.word	0x08005688
 8003770:	0800569c 	.word	0x0800569c

08003774 <MX_GFXSIMULATOR_Init>:

/* USER CODE END 0 */

/* GFXSIMULATOR init function */
void MX_GFXSIMULATOR_Init(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0

}
 8003778:	bf00      	nop
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
	...

08003784 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08c      	sub	sp, #48	; 0x30
 8003788:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800378a:	f107 031c 	add.w	r3, r7, #28
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	605a      	str	r2, [r3, #4]
 8003794:	609a      	str	r2, [r3, #8]
 8003796:	60da      	str	r2, [r3, #12]
 8003798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	4a69      	ldr	r2, [pc, #420]	; (8003944 <MX_GPIO_Init+0x1c0>)
 80037a0:	4b68      	ldr	r3, [pc, #416]	; (8003944 <MX_GPIO_Init+0x1c0>)
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	f043 0320 	orr.w	r3, r3, #32
 80037a8:	6313      	str	r3, [r2, #48]	; 0x30
 80037aa:	4b66      	ldr	r3, [pc, #408]	; (8003944 <MX_GPIO_Init+0x1c0>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	f003 0320 	and.w	r3, r3, #32
 80037b2:	61bb      	str	r3, [r7, #24]
 80037b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	4a62      	ldr	r2, [pc, #392]	; (8003944 <MX_GPIO_Init+0x1c0>)
 80037bc:	4b61      	ldr	r3, [pc, #388]	; (8003944 <MX_GPIO_Init+0x1c0>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	f043 0304 	orr.w	r3, r3, #4
 80037c4:	6313      	str	r3, [r2, #48]	; 0x30
 80037c6:	4b5f      	ldr	r3, [pc, #380]	; (8003944 <MX_GPIO_Init+0x1c0>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	4a5b      	ldr	r2, [pc, #364]	; (8003944 <MX_GPIO_Init+0x1c0>)
 80037d8:	4b5a      	ldr	r3, [pc, #360]	; (8003944 <MX_GPIO_Init+0x1c0>)
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	f043 0302 	orr.w	r3, r3, #2
 80037e0:	6313      	str	r3, [r2, #48]	; 0x30
 80037e2:	4b58      	ldr	r3, [pc, #352]	; (8003944 <MX_GPIO_Init+0x1c0>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	4a54      	ldr	r2, [pc, #336]	; (8003944 <MX_GPIO_Init+0x1c0>)
 80037f4:	4b53      	ldr	r3, [pc, #332]	; (8003944 <MX_GPIO_Init+0x1c0>)
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	f043 0308 	orr.w	r3, r3, #8
 80037fc:	6313      	str	r3, [r2, #48]	; 0x30
 80037fe:	4b51      	ldr	r3, [pc, #324]	; (8003944 <MX_GPIO_Init+0x1c0>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	4a4d      	ldr	r2, [pc, #308]	; (8003944 <MX_GPIO_Init+0x1c0>)
 8003810:	4b4c      	ldr	r3, [pc, #304]	; (8003944 <MX_GPIO_Init+0x1c0>)
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003818:	6313      	str	r3, [r2, #48]	; 0x30
 800381a:	4b4a      	ldr	r3, [pc, #296]	; (8003944 <MX_GPIO_Init+0x1c0>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003822:	60bb      	str	r3, [r7, #8]
 8003824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	607b      	str	r3, [r7, #4]
 800382a:	4a46      	ldr	r2, [pc, #280]	; (8003944 <MX_GPIO_Init+0x1c0>)
 800382c:	4b45      	ldr	r3, [pc, #276]	; (8003944 <MX_GPIO_Init+0x1c0>)
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	6313      	str	r3, [r2, #48]	; 0x30
 8003836:	4b43      	ldr	r3, [pc, #268]	; (8003944 <MX_GPIO_Init+0x1c0>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	607b      	str	r3, [r7, #4]
 8003840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);
 8003842:	2201      	movs	r2, #1
 8003844:	2110      	movs	r1, #16
 8003846:	4840      	ldr	r0, [pc, #256]	; (8003948 <MX_GPIO_Init+0x1c4>)
 8003848:	f7fd f9f8 	bl	8000c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFID_RESET_GPIO_Port, RFID_RESET_Pin, GPIO_PIN_SET);
 800384c:	2201      	movs	r2, #1
 800384e:	2110      	movs	r1, #16
 8003850:	483e      	ldr	r0, [pc, #248]	; (800394c <MX_GPIO_Init+0x1c8>)
 8003852:	f7fd f9f3 	bl	8000c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RFID_CS_GPIO_Port, SPI_RFID_CS_Pin, GPIO_PIN_RESET);
 8003856:	2200      	movs	r2, #0
 8003858:	2102      	movs	r1, #2
 800385a:	483d      	ldr	r0, [pc, #244]	; (8003950 <MX_GPIO_Init+0x1cc>)
 800385c:	f7fd f9ee 	bl	8000c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OLED_CS_Pin|OLED_DC_Pin|GPIO_Motor_Control4_Pin|GPIO_Motor_control2_Pin 
 8003860:	2200      	movs	r2, #0
 8003862:	f64a 410c 	movw	r1, #44044	; 0xac0c
 8003866:	483b      	ldr	r0, [pc, #236]	; (8003954 <MX_GPIO_Init+0x1d0>)
 8003868:	f7fd f9e8 	bl	8000c3c <HAL_GPIO_WritePin>
                          |GPIO_Motor_Control3_Pin|GPIO_Motor_control1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, GPIO_PIN_RESET);
 800386c:	2200      	movs	r2, #0
 800386e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003872:	4836      	ldr	r0, [pc, #216]	; (800394c <MX_GPIO_Init+0x1c8>)
 8003874:	f7fd f9e2 	bl	8000c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003878:	2310      	movs	r3, #16
 800387a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800387c:	2301      	movs	r3, #1
 800387e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003880:	2301      	movs	r3, #1
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003884:	2300      	movs	r3, #0
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003888:	f107 031c 	add.w	r3, r7, #28
 800388c:	4619      	mov	r1, r3
 800388e:	482e      	ldr	r0, [pc, #184]	; (8003948 <MX_GPIO_Init+0x1c4>)
 8003890:	f7fd f82a 	bl	80008e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RFID_IRQ_Pin;
 8003894:	2320      	movs	r3, #32
 8003896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003898:	4b2f      	ldr	r3, [pc, #188]	; (8003958 <MX_GPIO_Init+0x1d4>)
 800389a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389c:	2300      	movs	r3, #0
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RFID_IRQ_GPIO_Port, &GPIO_InitStruct);
 80038a0:	f107 031c 	add.w	r3, r7, #28
 80038a4:	4619      	mov	r1, r3
 80038a6:	4828      	ldr	r0, [pc, #160]	; (8003948 <MX_GPIO_Init+0x1c4>)
 80038a8:	f7fd f81e 	bl	80008e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RFID_RESET_Pin;
 80038ac:	2310      	movs	r3, #16
 80038ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038b0:	2301      	movs	r3, #1
 80038b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038b4:	2301      	movs	r3, #1
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b8:	2300      	movs	r3, #0
 80038ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RFID_RESET_GPIO_Port, &GPIO_InitStruct);
 80038bc:	f107 031c 	add.w	r3, r7, #28
 80038c0:	4619      	mov	r1, r3
 80038c2:	4822      	ldr	r0, [pc, #136]	; (800394c <MX_GPIO_Init+0x1c8>)
 80038c4:	f7fd f810 	bl	80008e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_RFID_CS_Pin;
 80038c8:	2302      	movs	r3, #2
 80038ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038cc:	2301      	movs	r3, #1
 80038ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038d0:	2301      	movs	r3, #1
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d4:	2300      	movs	r3, #0
 80038d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_RFID_CS_GPIO_Port, &GPIO_InitStruct);
 80038d8:	f107 031c 	add.w	r3, r7, #28
 80038dc:	4619      	mov	r1, r3
 80038de:	481c      	ldr	r0, [pc, #112]	; (8003950 <MX_GPIO_Init+0x1cc>)
 80038e0:	f7fd f802 	bl	80008e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin 
                           PGPin PGPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin|GPIO_Motor_Control4_Pin|GPIO_Motor_control2_Pin 
 80038e4:	f64a 430c 	movw	r3, #44044	; 0xac0c
 80038e8:	61fb      	str	r3, [r7, #28]
                          |GPIO_Motor_Control3_Pin|GPIO_Motor_control1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038ea:	2301      	movs	r3, #1
 80038ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f2:	2300      	movs	r3, #0
 80038f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80038f6:	f107 031c 	add.w	r3, r7, #28
 80038fa:	4619      	mov	r1, r3
 80038fc:	4815      	ldr	r0, [pc, #84]	; (8003954 <MX_GPIO_Init+0x1d0>)
 80038fe:	f7fc fff3 	bl	80008e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin 
                           PGPin */
  GPIO_InitStruct.Pin = LED_Control5_Pin|LED_Control4_Pin|LED_Control3_Pin|LED_Control2_Pin 
 8003902:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8003906:	61fb      	str	r3, [r7, #28]
                          |LED_Control1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003908:	2300      	movs	r3, #0
 800390a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390c:	2300      	movs	r3, #0
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003910:	f107 031c 	add.w	r3, r7, #28
 8003914:	4619      	mov	r1, r3
 8003916:	480f      	ldr	r0, [pc, #60]	; (8003954 <MX_GPIO_Init+0x1d0>)
 8003918:	f7fc ffe6 	bl	80008e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RES_Pin;
 800391c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003922:	2301      	movs	r3, #1
 8003924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003926:	2300      	movs	r3, #0
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392a:	2300      	movs	r3, #0
 800392c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OLED_RES_GPIO_Port, &GPIO_InitStruct);
 800392e:	f107 031c 	add.w	r3, r7, #28
 8003932:	4619      	mov	r1, r3
 8003934:	4805      	ldr	r0, [pc, #20]	; (800394c <MX_GPIO_Init+0x1c8>)
 8003936:	f7fc ffd7 	bl	80008e8 <HAL_GPIO_Init>

}
 800393a:	bf00      	nop
 800393c:	3730      	adds	r7, #48	; 0x30
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40023800 	.word	0x40023800
 8003948:	40021400 	.word	0x40021400
 800394c:	40020800 	.word	0x40020800
 8003950:	40020400 	.word	0x40020400
 8003954:	40021800 	.word	0x40021800
 8003958:	10110000 	.word	0x10110000

0800395c <__NVIC_SetPriority>:
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	6039      	str	r1, [r7, #0]
 8003966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396c:	2b00      	cmp	r3, #0
 800396e:	db0a      	blt.n	8003986 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003970:	490d      	ldr	r1, [pc, #52]	; (80039a8 <__NVIC_SetPriority+0x4c>)
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	0112      	lsls	r2, r2, #4
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	440b      	add	r3, r1
 8003980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003984:	e00a      	b.n	800399c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003986:	4909      	ldr	r1, [pc, #36]	; (80039ac <__NVIC_SetPriority+0x50>)
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	3b04      	subs	r3, #4
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	0112      	lsls	r2, r2, #4
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	440b      	add	r3, r1
 800399a:	761a      	strb	r2, [r3, #24]
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000e100 	.word	0xe000e100
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <SysTick_Config>:
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039c0:	d301      	bcc.n	80039c6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80039c2:	2301      	movs	r3, #1
 80039c4:	e00f      	b.n	80039e6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039c6:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <SysTick_Config+0x40>)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ce:	210f      	movs	r1, #15
 80039d0:	f04f 30ff 	mov.w	r0, #4294967295
 80039d4:	f7ff ffc2 	bl	800395c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039d8:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <SysTick_Config+0x40>)
 80039da:	2200      	movs	r2, #0
 80039dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039de:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <SysTick_Config+0x40>)
 80039e0:	2207      	movs	r2, #7
 80039e2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	e000e010 	.word	0xe000e010

080039f4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80039fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003a00:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003a0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003a10:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003a14:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00b      	beq.n	8003a34 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003a1c:	e000      	b.n	8003a20 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003a1e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003a20:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f9      	beq.n	8003a1e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003a2a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003a34:	687b      	ldr	r3, [r7, #4]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b0aa      	sub	sp, #168	; 0xa8
 8003a48:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a4a:	f7fc fda9 	bl	80005a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a4e:	f000 f8b1 	bl	8003bb4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  if (SysTick_Config(SystemCoreClock / 1000))
 8003a52:	4b4a      	ldr	r3, [pc, #296]	; (8003b7c <main+0x138>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a4a      	ldr	r2, [pc, #296]	; (8003b80 <main+0x13c>)
 8003a58:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5c:	099b      	lsrs	r3, r3, #6
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff ffa6 	bl	80039b0 <SysTick_Config>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d000      	beq.n	8003a6c <main+0x28>
  {
    while (1)
 8003a6a:	e7fe      	b.n	8003a6a <main+0x26>
      ;
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a6c:	f7ff fe8a 	bl	8003784 <MX_GPIO_Init>
  MX_SPI3_Init();
 8003a70:	f000 f97e 	bl	8003d70 <MX_SPI3_Init>
  MX_TIM13_Init();
 8003a74:	f000 fc72 	bl	800435c <MX_TIM13_Init>
  MX_TIM14_Init();
 8003a78:	f000 fcbe 	bl	80043f8 <MX_TIM14_Init>
  MX_TIM4_Init();
 8003a7c:	f000 fb88 	bl	8004190 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003a80:	f000 fbda 	bl	8004238 <MX_TIM8_Init>
  MX_GFXSIMULATOR_Init();
 8003a84:	f7ff fe76 	bl	8003774 <MX_GFXSIMULATOR_Init>
  MX_TIM12_Init();
 8003a88:	f000 fc2e 	bl	80042e8 <MX_TIM12_Init>
  MX_SPI2_Init();
 8003a8c:	f000 f93a 	bl	8003d04 <MX_SPI2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003a90:	f000 f900 	bl	8003c94 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_init();
 8003a94:	f7ff fd76 	bl	8003584 <ssd1306_init>
  ssd1306_clear_screen(0xFF);
 8003a98:	20ff      	movs	r0, #255	; 0xff
 8003a9a:	f7ff fc19 	bl	80032d0 <ssd1306_clear_screen>
  HAL_Delay(1000);
 8003a9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003aa2:	f7fc fdef 	bl	8000684 <HAL_Delay>
  ssd1306_clear_screen(0x00);
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	f7ff fc12 	bl	80032d0 <ssd1306_clear_screen>
  ssd1306_hello_word();
 8003aac:	f7ff fe36 	bl	800371c <ssd1306_hello_word>

  printf("Start\n");
 8003ab0:	4834      	ldr	r0, [pc, #208]	; (8003b84 <main+0x140>)
 8003ab2:	f000 feed 	bl	8004890 <puts>
  ITM_SendChar('A');
 8003ab6:	2041      	movs	r0, #65	; 0x41
 8003ab8:	f7ff ff9c 	bl	80039f4 <ITM_SendChar>

  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8003abc:	2100      	movs	r1, #0
 8003abe:	4832      	ldr	r0, [pc, #200]	; (8003b88 <main+0x144>)
 8003ac0:	f7fe f942 	bl	8001d48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	4831      	ldr	r0, [pc, #196]	; (8003b8c <main+0x148>)
 8003ac8:	f7fe f93e 	bl	8001d48 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8003acc:	213c      	movs	r1, #60	; 0x3c
 8003ace:	4830      	ldr	r0, [pc, #192]	; (8003b90 <main+0x14c>)
 8003ad0:	f7fe fa0a 	bl	8001ee8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8003ad4:	213c      	movs	r1, #60	; 0x3c
 8003ad6:	482f      	ldr	r0, [pc, #188]	; (8003b94 <main+0x150>)
 8003ad8:	f7fe fa06 	bl	8001ee8 <HAL_TIM_Encoder_Start>

  vLedStrip_Init(&LedStrip);
 8003adc:	f107 0308 	add.w	r3, r7, #8
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff f84f 	bl	8002b84 <vLedStrip_Init>
  vMotor_init(&MotorLeft, &MotorRight);
 8003ae6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003aea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003aee:	4611      	mov	r1, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff f857 	bl	8002ba4 <vMotor_init>
  vMotorPID_init(&MotorPID_Left, &MotorPID_Right);
 8003af6:	f107 0218 	add.w	r2, r7, #24
 8003afa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003afe:	4611      	mov	r1, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff f899 	bl	8002c38 <vMotorPID_init>

  HAL_Delay(2000);
 8003b06:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003b0a:	f7fc fdbb 	bl	8000684 <HAL_Delay>

  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003b0e:	202b      	movs	r0, #43	; 0x2b
 8003b10:	f7fc fecf 	bl	80008b2 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim12);
 8003b14:	4820      	ldr	r0, [pc, #128]	; (8003b98 <main+0x154>)
 8003b16:	f7fe f8bd 	bl	8001c94 <HAL_TIM_Base_Start_IT>

  MotorPID_Left.ValueTask = MotorPID_Right.ValueTask = 0;
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b22:	65bb      	str	r3, [r7, #88]	; 0x58

  HAL_GPIO_WritePin(RFID_RESET_GPIO_Port,RFID_RESET_Pin,SET);
 8003b24:	2201      	movs	r2, #1
 8003b26:	2110      	movs	r1, #16
 8003b28:	481c      	ldr	r0, [pc, #112]	; (8003b9c <main+0x158>)
 8003b2a:	f7fd f887 	bl	8000c3c <HAL_GPIO_WritePin>

  MFRC522_Init();
 8003b2e:	f7ff fb1f 	bl	8003170 <MFRC522_Init>
  printf("MFRC522_Init\n\r");
 8003b32:	481b      	ldr	r0, [pc, #108]	; (8003ba0 <main+0x15c>)
 8003b34:	f000 fe38 	bl	80047a8 <iprintf>
  printf("Waiting for RFID Card...!\n\r");
 8003b38:	481a      	ldr	r0, [pc, #104]	; (8003ba4 <main+0x160>)
 8003b3a:	f000 fe35 	bl	80047a8 <iprintf>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

////////////////RFID///////////////////////
    if (MFRC522_Check(CardID) == MI_OK)
 8003b3e:	481a      	ldr	r0, [pc, #104]	; (8003ba8 <main+0x164>)
 8003b40:	f7ff f94b 	bl	8002dda <MFRC522_Check>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d110      	bne.n	8003b6c <main+0x128>
    {
      printf("[%02x-%02x-%02x-%02x] \r\n", CardID[0], CardID[1], CardID[2],
 8003b4a:	4b17      	ldr	r3, [pc, #92]	; (8003ba8 <main+0x164>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <main+0x164>)
 8003b52:	785b      	ldrb	r3, [r3, #1]
 8003b54:	461a      	mov	r2, r3
 8003b56:	4b14      	ldr	r3, [pc, #80]	; (8003ba8 <main+0x164>)
 8003b58:	789b      	ldrb	r3, [r3, #2]
 8003b5a:	4618      	mov	r0, r3
          CardID[3]);
 8003b5c:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <main+0x164>)
 8003b5e:	78db      	ldrb	r3, [r3, #3]
      printf("[%02x-%02x-%02x-%02x] \r\n", CardID[0], CardID[1], CardID[2],
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	4603      	mov	r3, r0
 8003b64:	4811      	ldr	r0, [pc, #68]	; (8003bac <main+0x168>)
 8003b66:	f000 fe1f 	bl	80047a8 <iprintf>
 8003b6a:	e002      	b.n	8003b72 <main+0x12e>
    } else
    {
      printf("Nie wykryto karty \r\n");
 8003b6c:	4810      	ldr	r0, [pc, #64]	; (8003bb0 <main+0x16c>)
 8003b6e:	f000 fe8f 	bl	8004890 <puts>
    }
//    HAL_GPIO_WritePin(SPI_RFID_CS_GPIO_Port,SPI_RFID_CS_Pin,RESET);
//    HAL_SPI_Transmit(&hspi2,(uint8_t*)"hello",5,1000);
//    HAL_GPIO_WritePin(SPI_RFID_CS_GPIO_Port,SPI_RFID_CS_Pin,SET);

    HAL_Delay(1000);
 8003b72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b76:	f7fc fd85 	bl	8000684 <HAL_Delay>
    if (MFRC522_Check(CardID) == MI_OK)
 8003b7a:	e7e0      	b.n	8003b3e <main+0xfa>
 8003b7c:	20000008 	.word	0x20000008
 8003b80:	10624dd3 	.word	0x10624dd3
 8003b84:	080056ac 	.word	0x080056ac
 8003b88:	20000620 	.word	0x20000620
 8003b8c:	20000660 	.word	0x20000660
 8003b90:	200005e0 	.word	0x200005e0
 8003b94:	200005a0 	.word	0x200005a0
 8003b98:	200006a0 	.word	0x200006a0
 8003b9c:	40020800 	.word	0x40020800
 8003ba0:	080056b4 	.word	0x080056b4
 8003ba4:	080056c4 	.word	0x080056c4
 8003ba8:	200004e4 	.word	0x200004e4
 8003bac:	080056e0 	.word	0x080056e0
 8003bb0:	080056fc 	.word	0x080056fc

08003bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b094      	sub	sp, #80	; 0x50
 8003bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bba:	f107 0320 	add.w	r3, r7, #32
 8003bbe:	2230      	movs	r2, #48	; 0x30
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fde8 	bl	8004798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bc8:	f107 030c 	add.w	r3, r7, #12
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	60da      	str	r2, [r3, #12]
 8003bd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60bb      	str	r3, [r7, #8]
 8003bdc:	4a2b      	ldr	r2, [pc, #172]	; (8003c8c <SystemClock_Config+0xd8>)
 8003bde:	4b2b      	ldr	r3, [pc, #172]	; (8003c8c <SystemClock_Config+0xd8>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be6:	6413      	str	r3, [r2, #64]	; 0x40
 8003be8:	4b28      	ldr	r3, [pc, #160]	; (8003c8c <SystemClock_Config+0xd8>)
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	607b      	str	r3, [r7, #4]
 8003bf8:	4a25      	ldr	r2, [pc, #148]	; (8003c90 <SystemClock_Config+0xdc>)
 8003bfa:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <SystemClock_Config+0xdc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <SystemClock_Config+0xdc>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c0c:	607b      	str	r3, [r7, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c10:	2302      	movs	r3, #2
 8003c12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c14:	2301      	movs	r3, #1
 8003c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c18:	2310      	movs	r3, #16
 8003c1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c20:	2300      	movs	r3, #0
 8003c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003c24:	2308      	movs	r3, #8
 8003c26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003c28:	23b4      	movs	r3, #180	; 0xb4
 8003c2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003c30:	2304      	movs	r3, #4
 8003c32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c34:	f107 0320 	add.w	r3, r7, #32
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fd f869 	bl	8000d10 <HAL_RCC_OscConfig>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003c44:	f000 f856 	bl	8003cf4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003c48:	f7fd f812 	bl	8000c70 <HAL_PWREx_EnableOverDrive>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003c52:	f000 f84f 	bl	8003cf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c56:	230f      	movs	r3, #15
 8003c58:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003c62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003c6e:	f107 030c 	add.w	r3, r7, #12
 8003c72:	2105      	movs	r1, #5
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fd fa8d 	bl	8001194 <HAL_RCC_ClockConfig>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003c80:	f000 f838 	bl	8003cf4 <Error_Handler>
  }
}
 8003c84:	bf00      	nop
 8003c86:	3750      	adds	r7, #80	; 0x50
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	40007000 	.word	0x40007000

08003c94 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* TIM8_BRK_TIM12_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	202b      	movs	r0, #43	; 0x2b
 8003c9e:	f7fc fdec 	bl	800087a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003ca2:	202b      	movs	r0, #43	; 0x2b
 8003ca4:	f7fc fe05 	bl	80008b2 <HAL_NVIC_EnableIRQ>
}
 8003ca8:	bf00      	nop
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM12)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a0b      	ldr	r2, [pc, #44]	; (8003ce8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d106      	bne.n	8003ccc <HAL_TIM_PeriodElapsedCallback+0x20>
    FlagPID++;
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	4b08      	ldr	r3, [pc, #32]	; (8003cec <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003cca:	701a      	strb	r2, [r3, #0]
  FlagRead_LedStrip++;
 8003ccc:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003cd8:	701a      	strb	r2, [r3, #0]
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40001800 	.word	0x40001800
 8003cec:	200004a1 	.word	0x200004a1
 8003cf0:	200004a0 	.word	0x200004a0

08003cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
	...

08003d04 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8003d08:	4b17      	ldr	r3, [pc, #92]	; (8003d68 <MX_SPI2_Init+0x64>)
 8003d0a:	4a18      	ldr	r2, [pc, #96]	; (8003d6c <MX_SPI2_Init+0x68>)
 8003d0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003d0e:	4b16      	ldr	r3, [pc, #88]	; (8003d68 <MX_SPI2_Init+0x64>)
 8003d10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003d16:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <MX_SPI2_Init+0x64>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d1c:	4b12      	ldr	r3, [pc, #72]	; (8003d68 <MX_SPI2_Init+0x64>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d22:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <MX_SPI2_Init+0x64>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d28:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <MX_SPI2_Init+0x64>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003d2e:	4b0e      	ldr	r3, [pc, #56]	; (8003d68 <MX_SPI2_Init+0x64>)
 8003d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d34:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003d36:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <MX_SPI2_Init+0x64>)
 8003d38:	2228      	movs	r2, #40	; 0x28
 8003d3a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d3c:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <MX_SPI2_Init+0x64>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d42:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <MX_SPI2_Init+0x64>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d48:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <MX_SPI2_Init+0x64>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <MX_SPI2_Init+0x64>)
 8003d50:	220a      	movs	r2, #10
 8003d52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003d54:	4804      	ldr	r0, [pc, #16]	; (8003d68 <MX_SPI2_Init+0x64>)
 8003d56:	f7fd fbb5 	bl	80014c4 <HAL_SPI_Init>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003d60:	f7ff ffc8 	bl	8003cf4 <Error_Handler>
  }

}
 8003d64:	bf00      	nop
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	200004f0 	.word	0x200004f0
 8003d6c:	40003800 	.word	0x40003800

08003d70 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8003d74:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <MX_SPI3_Init+0x64>)
 8003d76:	4a18      	ldr	r2, [pc, #96]	; (8003dd8 <MX_SPI3_Init+0x68>)
 8003d78:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003d7a:	4b16      	ldr	r3, [pc, #88]	; (8003dd4 <MX_SPI3_Init+0x64>)
 8003d7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d80:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003d82:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <MX_SPI3_Init+0x64>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d88:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <MX_SPI3_Init+0x64>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d8e:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <MX_SPI3_Init+0x64>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d94:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <MX_SPI3_Init+0x64>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003d9a:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <MX_SPI3_Init+0x64>)
 8003d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003da0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003da2:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <MX_SPI3_Init+0x64>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003da8:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <MX_SPI3_Init+0x64>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003dae:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <MX_SPI3_Init+0x64>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003db4:	4b07      	ldr	r3, [pc, #28]	; (8003dd4 <MX_SPI3_Init+0x64>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003dba:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <MX_SPI3_Init+0x64>)
 8003dbc:	220a      	movs	r2, #10
 8003dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003dc0:	4804      	ldr	r0, [pc, #16]	; (8003dd4 <MX_SPI3_Init+0x64>)
 8003dc2:	f7fd fb7f 	bl	80014c4 <HAL_SPI_Init>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003dcc:	f7ff ff92 	bl	8003cf4 <Error_Handler>
  }

}
 8003dd0:	bf00      	nop
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20000548 	.word	0x20000548
 8003dd8:	40003c00 	.word	0x40003c00

08003ddc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08c      	sub	sp, #48	; 0x30
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de4:	f107 031c 	add.w	r3, r7, #28
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	609a      	str	r2, [r3, #8]
 8003df0:	60da      	str	r2, [r3, #12]
 8003df2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a33      	ldr	r2, [pc, #204]	; (8003ec8 <HAL_SPI_MspInit+0xec>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d12d      	bne.n	8003e5a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	4a32      	ldr	r2, [pc, #200]	; (8003ecc <HAL_SPI_MspInit+0xf0>)
 8003e04:	4b31      	ldr	r3, [pc, #196]	; (8003ecc <HAL_SPI_MspInit+0xf0>)
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0e:	4b2f      	ldr	r3, [pc, #188]	; (8003ecc <HAL_SPI_MspInit+0xf0>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e16:	61bb      	str	r3, [r7, #24]
 8003e18:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	4a2b      	ldr	r2, [pc, #172]	; (8003ecc <HAL_SPI_MspInit+0xf0>)
 8003e20:	4b2a      	ldr	r3, [pc, #168]	; (8003ecc <HAL_SPI_MspInit+0xf0>)
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	f043 0302 	orr.w	r3, r3, #2
 8003e28:	6313      	str	r3, [r2, #48]	; 0x30
 8003e2a:	4b28      	ldr	r3, [pc, #160]	; (8003ecc <HAL_SPI_MspInit+0xf0>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003e36:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e44:	2303      	movs	r3, #3
 8003e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e48:	2305      	movs	r3, #5
 8003e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e4c:	f107 031c 	add.w	r3, r7, #28
 8003e50:	4619      	mov	r1, r3
 8003e52:	481f      	ldr	r0, [pc, #124]	; (8003ed0 <HAL_SPI_MspInit+0xf4>)
 8003e54:	f7fc fd48 	bl	80008e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003e58:	e031      	b.n	8003ebe <HAL_SPI_MspInit+0xe2>
  else if(spiHandle->Instance==SPI3)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1d      	ldr	r2, [pc, #116]	; (8003ed4 <HAL_SPI_MspInit+0xf8>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d12c      	bne.n	8003ebe <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003e64:	2300      	movs	r3, #0
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	4a18      	ldr	r2, [pc, #96]	; (8003ecc <HAL_SPI_MspInit+0xf0>)
 8003e6a:	4b18      	ldr	r3, [pc, #96]	; (8003ecc <HAL_SPI_MspInit+0xf0>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e72:	6413      	str	r3, [r2, #64]	; 0x40
 8003e74:	4b15      	ldr	r3, [pc, #84]	; (8003ecc <HAL_SPI_MspInit+0xf0>)
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e80:	2300      	movs	r3, #0
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	4a11      	ldr	r2, [pc, #68]	; (8003ecc <HAL_SPI_MspInit+0xf0>)
 8003e86:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <HAL_SPI_MspInit+0xf0>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	f043 0304 	orr.w	r3, r3, #4
 8003e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e90:	4b0e      	ldr	r3, [pc, #56]	; (8003ecc <HAL_SPI_MspInit+0xf0>)
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003e9c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003eae:	2306      	movs	r3, #6
 8003eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eb2:	f107 031c 	add.w	r3, r7, #28
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4807      	ldr	r0, [pc, #28]	; (8003ed8 <HAL_SPI_MspInit+0xfc>)
 8003eba:	f7fc fd15 	bl	80008e8 <HAL_GPIO_Init>
}
 8003ebe:	bf00      	nop
 8003ec0:	3730      	adds	r7, #48	; 0x30
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40003800 	.word	0x40003800
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	40020400 	.word	0x40020400
 8003ed4:	40003c00 	.word	0x40003c00
 8003ed8:	40020800 	.word	0x40020800

08003edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	607b      	str	r3, [r7, #4]
 8003ee6:	4a10      	ldr	r2, [pc, #64]	; (8003f28 <HAL_MspInit+0x4c>)
 8003ee8:	4b0f      	ldr	r3, [pc, #60]	; (8003f28 <HAL_MspInit+0x4c>)
 8003eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <HAL_MspInit+0x4c>)
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003efa:	607b      	str	r3, [r7, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	603b      	str	r3, [r7, #0]
 8003f02:	4a09      	ldr	r2, [pc, #36]	; (8003f28 <HAL_MspInit+0x4c>)
 8003f04:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <HAL_MspInit+0x4c>)
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0e:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_MspInit+0x4c>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f16:	603b      	str	r3, [r7, #0]
 8003f18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40023800 	.word	0x40023800

08003f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003f30:	bf00      	nop
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f3e:	e7fe      	b.n	8003f3e <HardFault_Handler+0x4>

08003f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f44:	e7fe      	b.n	8003f44 <MemManage_Handler+0x4>

08003f46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f46:	b480      	push	{r7}
 8003f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f4a:	e7fe      	b.n	8003f4a <BusFault_Handler+0x4>

08003f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f50:	e7fe      	b.n	8003f50 <UsageFault_Handler+0x4>

08003f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f52:	b480      	push	{r7}
 8003f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f56:	bf00      	nop
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f64:	bf00      	nop
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f72:	bf00      	nop
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f80:	f7fc fb60 	bl	8000644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f84:	bf00      	nop
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003f8c:	4803      	ldr	r0, [pc, #12]	; (8003f9c <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8003f8e:	f7fd ffe2 	bl	8001f56 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8003f92:	4803      	ldr	r0, [pc, #12]	; (8003fa0 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8003f94:	f7fd ffdf 	bl	8001f56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003f98:	bf00      	nop
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	200005a0 	.word	0x200005a0
 8003fa0:	200006a0 	.word	0x200006a0

08003fa4 <ITM_SendChar>:
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003fac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003fb0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d013      	beq.n	8003fe4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003fbc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003fc0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003fc4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00b      	beq.n	8003fe4 <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 8003fcc:	e000      	b.n	8003fd0 <ITM_SendChar+0x2c>
      __NOP();
 8003fce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003fd0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f9      	beq.n	8003fce <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003fda:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	701a      	strb	r2, [r3, #0]
  return (ch);
 8003fe4:	687b      	ldr	r3, [r7, #4]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ff2:	b590      	push	{r4, r7, lr}
 8003ff4:	b087      	sub	sp, #28
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	e00a      	b.n	800401a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004004:	68bc      	ldr	r4, [r7, #8]
 8004006:	1c63      	adds	r3, r4, #1
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	f3af 8000 	nop.w
 800400e:	4603      	mov	r3, r0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	3301      	adds	r3, #1
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	429a      	cmp	r2, r3
 8004020:	dbf0      	blt.n	8004004 <_read+0x12>
	}

return len;
 8004022:	687b      	ldr	r3, [r7, #4]
}
 8004024:	4618      	mov	r0, r3
 8004026:	371c      	adds	r7, #28
 8004028:	46bd      	mov	sp, r7
 800402a:	bd90      	pop	{r4, r7, pc}

0800402c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	e009      	b.n	8004052 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	60ba      	str	r2, [r7, #8]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff ffac 	bl	8003fa4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	3301      	adds	r3, #1
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	dbf1      	blt.n	800403e <_write+0x12>
	}
	return len;
 800405a:	687b      	ldr	r3, [r7, #4]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800406c:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <_sbrk+0x50>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d102      	bne.n	800407a <_sbrk+0x16>
		heap_end = &end;
 8004074:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <_sbrk+0x50>)
 8004076:	4a10      	ldr	r2, [pc, #64]	; (80040b8 <_sbrk+0x54>)
 8004078:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800407a:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <_sbrk+0x50>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004080:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <_sbrk+0x50>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4413      	add	r3, r2
 8004088:	466a      	mov	r2, sp
 800408a:	4293      	cmp	r3, r2
 800408c:	d907      	bls.n	800409e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800408e:	f000 fb59 	bl	8004744 <__errno>
 8004092:	4602      	mov	r2, r0
 8004094:	230c      	movs	r3, #12
 8004096:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004098:	f04f 33ff 	mov.w	r3, #4294967295
 800409c:	e006      	b.n	80040ac <_sbrk+0x48>
	}

	heap_end += incr;
 800409e:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <_sbrk+0x50>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4413      	add	r3, r2
 80040a6:	4a03      	ldr	r2, [pc, #12]	; (80040b4 <_sbrk+0x50>)
 80040a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80040aa:	68fb      	ldr	r3, [r7, #12]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	2000048c 	.word	0x2000048c
 80040b8:	200006e4 	.word	0x200006e4

080040bc <_close>:

int _close(int file)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
	return -1;
 80040c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040e4:	605a      	str	r2, [r3, #4]
	return 0;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <_isatty>:

int _isatty(int file)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	return 1;
 80040fc:	2301      	movs	r3, #1
}
 80040fe:	4618      	mov	r0, r3
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800410a:	b480      	push	{r7}
 800410c:	b085      	sub	sp, #20
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
	return 0;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004128:	4a16      	ldr	r2, [pc, #88]	; (8004184 <SystemInit+0x60>)
 800412a:	4b16      	ldr	r3, [pc, #88]	; (8004184 <SystemInit+0x60>)
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004130:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004134:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004138:	4a13      	ldr	r2, [pc, #76]	; (8004188 <SystemInit+0x64>)
 800413a:	4b13      	ldr	r3, [pc, #76]	; (8004188 <SystemInit+0x64>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f043 0301 	orr.w	r3, r3, #1
 8004142:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004144:	4b10      	ldr	r3, [pc, #64]	; (8004188 <SystemInit+0x64>)
 8004146:	2200      	movs	r2, #0
 8004148:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800414a:	4a0f      	ldr	r2, [pc, #60]	; (8004188 <SystemInit+0x64>)
 800414c:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <SystemInit+0x64>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004158:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800415a:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <SystemInit+0x64>)
 800415c:	4a0b      	ldr	r2, [pc, #44]	; (800418c <SystemInit+0x68>)
 800415e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004160:	4a09      	ldr	r2, [pc, #36]	; (8004188 <SystemInit+0x64>)
 8004162:	4b09      	ldr	r3, [pc, #36]	; (8004188 <SystemInit+0x64>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800416a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800416c:	4b06      	ldr	r3, [pc, #24]	; (8004188 <SystemInit+0x64>)
 800416e:	2200      	movs	r2, #0
 8004170:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004172:	4b04      	ldr	r3, [pc, #16]	; (8004184 <SystemInit+0x60>)
 8004174:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004178:	609a      	str	r2, [r3, #8]
#endif
}
 800417a:	bf00      	nop
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	e000ed00 	.word	0xe000ed00
 8004188:	40023800 	.word	0x40023800
 800418c:	24003010 	.word	0x24003010

08004190 <MX_TIM4_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08c      	sub	sp, #48	; 0x30
 8004194:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8004196:	f107 030c 	add.w	r3, r7, #12
 800419a:	2224      	movs	r2, #36	; 0x24
 800419c:	2100      	movs	r1, #0
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fafa 	bl	8004798 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041a4:	1d3b      	adds	r3, r7, #4
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80041ac:	4b20      	ldr	r3, [pc, #128]	; (8004230 <MX_TIM4_Init+0xa0>)
 80041ae:	4a21      	ldr	r2, [pc, #132]	; (8004234 <MX_TIM4_Init+0xa4>)
 80041b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80041b2:	4b1f      	ldr	r3, [pc, #124]	; (8004230 <MX_TIM4_Init+0xa0>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041b8:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <MX_TIM4_Init+0xa0>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80041be:	4b1c      	ldr	r3, [pc, #112]	; (8004230 <MX_TIM4_Init+0xa0>)
 80041c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041c6:	4b1a      	ldr	r3, [pc, #104]	; (8004230 <MX_TIM4_Init+0xa0>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041cc:	4b18      	ldr	r3, [pc, #96]	; (8004230 <MX_TIM4_Init+0xa0>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80041d2:	2303      	movs	r3, #3
 80041d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80041da:	2301      	movs	r3, #1
 80041dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80041de:	2300      	movs	r3, #0
 80041e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80041e2:	230f      	movs	r3, #15
 80041e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80041e6:	2300      	movs	r3, #0
 80041e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80041ea:	2301      	movs	r3, #1
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80041ee:	2300      	movs	r3, #0
 80041f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80041f2:	230f      	movs	r3, #15
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80041f6:	f107 030c 	add.w	r3, r7, #12
 80041fa:	4619      	mov	r1, r3
 80041fc:	480c      	ldr	r0, [pc, #48]	; (8004230 <MX_TIM4_Init+0xa0>)
 80041fe:	f7fd fde1 	bl	8001dc4 <HAL_TIM_Encoder_Init>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004208:	f7ff fd74 	bl	8003cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800420c:	2300      	movs	r3, #0
 800420e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004210:	2300      	movs	r3, #0
 8004212:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004214:	1d3b      	adds	r3, r7, #4
 8004216:	4619      	mov	r1, r3
 8004218:	4805      	ldr	r0, [pc, #20]	; (8004230 <MX_TIM4_Init+0xa0>)
 800421a:	f7fe fc5a 	bl	8002ad2 <HAL_TIMEx_MasterConfigSynchronization>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004224:	f7ff fd66 	bl	8003cf4 <Error_Handler>
  }

}
 8004228:	bf00      	nop
 800422a:	3730      	adds	r7, #48	; 0x30
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	200005e0 	.word	0x200005e0
 8004234:	40000800 	.word	0x40000800

08004238 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08c      	sub	sp, #48	; 0x30
 800423c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800423e:	f107 030c 	add.w	r3, r7, #12
 8004242:	2224      	movs	r2, #36	; 0x24
 8004244:	2100      	movs	r1, #0
 8004246:	4618      	mov	r0, r3
 8004248:	f000 faa6 	bl	8004798 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800424c:	1d3b      	adds	r3, r7, #4
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 8004254:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <MX_TIM8_Init+0xa8>)
 8004256:	4a23      	ldr	r2, [pc, #140]	; (80042e4 <MX_TIM8_Init+0xac>)
 8004258:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800425a:	4b21      	ldr	r3, [pc, #132]	; (80042e0 <MX_TIM8_Init+0xa8>)
 800425c:	2200      	movs	r2, #0
 800425e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004260:	4b1f      	ldr	r3, [pc, #124]	; (80042e0 <MX_TIM8_Init+0xa8>)
 8004262:	2200      	movs	r2, #0
 8004264:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8004266:	4b1e      	ldr	r3, [pc, #120]	; (80042e0 <MX_TIM8_Init+0xa8>)
 8004268:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800426c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800426e:	4b1c      	ldr	r3, [pc, #112]	; (80042e0 <MX_TIM8_Init+0xa8>)
 8004270:	2200      	movs	r2, #0
 8004272:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004274:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <MX_TIM8_Init+0xa8>)
 8004276:	2200      	movs	r2, #0
 8004278:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800427a:	4b19      	ldr	r3, [pc, #100]	; (80042e0 <MX_TIM8_Init+0xa8>)
 800427c:	2200      	movs	r2, #0
 800427e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004280:	2303      	movs	r3, #3
 8004282:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004284:	2300      	movs	r3, #0
 8004286:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004288:	2301      	movs	r3, #1
 800428a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800428c:	2300      	movs	r3, #0
 800428e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8004290:	230f      	movs	r3, #15
 8004292:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004294:	2300      	movs	r3, #0
 8004296:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004298:	2301      	movs	r3, #1
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800429c:	2300      	movs	r3, #0
 800429e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80042a0:	230f      	movs	r3, #15
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80042a4:	f107 030c 	add.w	r3, r7, #12
 80042a8:	4619      	mov	r1, r3
 80042aa:	480d      	ldr	r0, [pc, #52]	; (80042e0 <MX_TIM8_Init+0xa8>)
 80042ac:	f7fd fd8a 	bl	8001dc4 <HAL_TIM_Encoder_Init>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80042b6:	f7ff fd1d 	bl	8003cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042ba:	2300      	movs	r3, #0
 80042bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042be:	2300      	movs	r3, #0
 80042c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80042c2:	1d3b      	adds	r3, r7, #4
 80042c4:	4619      	mov	r1, r3
 80042c6:	4806      	ldr	r0, [pc, #24]	; (80042e0 <MX_TIM8_Init+0xa8>)
 80042c8:	f7fe fc03 	bl	8002ad2 <HAL_TIMEx_MasterConfigSynchronization>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80042d2:	f7ff fd0f 	bl	8003cf4 <Error_Handler>
  }

}
 80042d6:	bf00      	nop
 80042d8:	3730      	adds	r7, #48	; 0x30
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	200005a0 	.word	0x200005a0
 80042e4:	40010400 	.word	0x40010400

080042e8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042ee:	463b      	mov	r3, r7
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	605a      	str	r2, [r3, #4]
 80042f6:	609a      	str	r2, [r3, #8]
 80042f8:	60da      	str	r2, [r3, #12]

  htim12.Instance = TIM12;
 80042fa:	4b16      	ldr	r3, [pc, #88]	; (8004354 <MX_TIM12_Init+0x6c>)
 80042fc:	4a16      	ldr	r2, [pc, #88]	; (8004358 <MX_TIM12_Init+0x70>)
 80042fe:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 40000-1;
 8004300:	4b14      	ldr	r3, [pc, #80]	; (8004354 <MX_TIM12_Init+0x6c>)
 8004302:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8004306:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004308:	4b12      	ldr	r3, [pc, #72]	; (8004354 <MX_TIM12_Init+0x6c>)
 800430a:	2200      	movs	r2, #0
 800430c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1;
 800430e:	4b11      	ldr	r3, [pc, #68]	; (8004354 <MX_TIM12_Init+0x6c>)
 8004310:	2201      	movs	r2, #1
 8004312:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8004314:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <MX_TIM12_Init+0x6c>)
 8004316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800431a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800431c:	4b0d      	ldr	r3, [pc, #52]	; (8004354 <MX_TIM12_Init+0x6c>)
 800431e:	2280      	movs	r2, #128	; 0x80
 8004320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8004322:	480c      	ldr	r0, [pc, #48]	; (8004354 <MX_TIM12_Init+0x6c>)
 8004324:	f7fd fc8b 	bl	8001c3e <HAL_TIM_Base_Init>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 800432e:	f7ff fce1 	bl	8003cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004336:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004338:	463b      	mov	r3, r7
 800433a:	4619      	mov	r1, r3
 800433c:	4805      	ldr	r0, [pc, #20]	; (8004354 <MX_TIM12_Init+0x6c>)
 800433e:	f7fd ffd9 	bl	80022f4 <HAL_TIM_ConfigClockSource>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8004348:	f7ff fcd4 	bl	8003cf4 <Error_Handler>
  }

}
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	200006a0 	.word	0x200006a0
 8004358:	40001800 	.word	0x40001800

0800435c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004362:	1d3b      	adds	r3, r7, #4
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	605a      	str	r2, [r3, #4]
 800436a:	609a      	str	r2, [r3, #8]
 800436c:	60da      	str	r2, [r3, #12]
 800436e:	611a      	str	r2, [r3, #16]
 8004370:	615a      	str	r2, [r3, #20]
 8004372:	619a      	str	r2, [r3, #24]

  htim13.Instance = TIM13;
 8004374:	4b1e      	ldr	r3, [pc, #120]	; (80043f0 <MX_TIM13_Init+0x94>)
 8004376:	4a1f      	ldr	r2, [pc, #124]	; (80043f4 <MX_TIM13_Init+0x98>)
 8004378:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 45-1;
 800437a:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <MX_TIM13_Init+0x94>)
 800437c:	222c      	movs	r2, #44	; 0x2c
 800437e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004380:	4b1b      	ldr	r3, [pc, #108]	; (80043f0 <MX_TIM13_Init+0x94>)
 8004382:	2200      	movs	r2, #0
 8004384:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100;
 8004386:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <MX_TIM13_Init+0x94>)
 8004388:	2264      	movs	r2, #100	; 0x64
 800438a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800438c:	4b18      	ldr	r3, [pc, #96]	; (80043f0 <MX_TIM13_Init+0x94>)
 800438e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004392:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004394:	4b16      	ldr	r3, [pc, #88]	; (80043f0 <MX_TIM13_Init+0x94>)
 8004396:	2280      	movs	r2, #128	; 0x80
 8004398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800439a:	4815      	ldr	r0, [pc, #84]	; (80043f0 <MX_TIM13_Init+0x94>)
 800439c:	f7fd fc4f 	bl	8001c3e <HAL_TIM_Base_Init>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80043a6:	f7ff fca5 	bl	8003cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80043aa:	4811      	ldr	r0, [pc, #68]	; (80043f0 <MX_TIM13_Init+0x94>)
 80043ac:	f7fd fc96 	bl	8001cdc <HAL_TIM_PWM_Init>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80043b6:	f7ff fc9d 	bl	8003cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043ba:	2360      	movs	r3, #96	; 0x60
 80043bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 80;
 80043be:	2350      	movs	r3, #80	; 0x50
 80043c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043c6:	2300      	movs	r3, #0
 80043c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043ca:	1d3b      	adds	r3, r7, #4
 80043cc:	2200      	movs	r2, #0
 80043ce:	4619      	mov	r1, r3
 80043d0:	4807      	ldr	r0, [pc, #28]	; (80043f0 <MX_TIM13_Init+0x94>)
 80043d2:	f7fd fec9 	bl	8002168 <HAL_TIM_PWM_ConfigChannel>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80043dc:	f7ff fc8a 	bl	8003cf4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim13);
 80043e0:	4803      	ldr	r0, [pc, #12]	; (80043f0 <MX_TIM13_Init+0x94>)
 80043e2:	f000 f923 	bl	800462c <HAL_TIM_MspPostInit>

}
 80043e6:	bf00      	nop
 80043e8:	3720      	adds	r7, #32
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20000620 	.word	0x20000620
 80043f4:	40001c00 	.word	0x40001c00

080043f8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043fe:	1d3b      	adds	r3, r7, #4
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	605a      	str	r2, [r3, #4]
 8004406:	609a      	str	r2, [r3, #8]
 8004408:	60da      	str	r2, [r3, #12]
 800440a:	611a      	str	r2, [r3, #16]
 800440c:	615a      	str	r2, [r3, #20]
 800440e:	619a      	str	r2, [r3, #24]

  htim14.Instance = TIM14;
 8004410:	4b1e      	ldr	r3, [pc, #120]	; (800448c <MX_TIM14_Init+0x94>)
 8004412:	4a1f      	ldr	r2, [pc, #124]	; (8004490 <MX_TIM14_Init+0x98>)
 8004414:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 45-1;
 8004416:	4b1d      	ldr	r3, [pc, #116]	; (800448c <MX_TIM14_Init+0x94>)
 8004418:	222c      	movs	r2, #44	; 0x2c
 800441a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800441c:	4b1b      	ldr	r3, [pc, #108]	; (800448c <MX_TIM14_Init+0x94>)
 800441e:	2200      	movs	r2, #0
 8004420:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100;
 8004422:	4b1a      	ldr	r3, [pc, #104]	; (800448c <MX_TIM14_Init+0x94>)
 8004424:	2264      	movs	r2, #100	; 0x64
 8004426:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8004428:	4b18      	ldr	r3, [pc, #96]	; (800448c <MX_TIM14_Init+0x94>)
 800442a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800442e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004430:	4b16      	ldr	r3, [pc, #88]	; (800448c <MX_TIM14_Init+0x94>)
 8004432:	2280      	movs	r2, #128	; 0x80
 8004434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004436:	4815      	ldr	r0, [pc, #84]	; (800448c <MX_TIM14_Init+0x94>)
 8004438:	f7fd fc01 	bl	8001c3e <HAL_TIM_Base_Init>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8004442:	f7ff fc57 	bl	8003cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004446:	4811      	ldr	r0, [pc, #68]	; (800448c <MX_TIM14_Init+0x94>)
 8004448:	f7fd fc48 	bl	8001cdc <HAL_TIM_PWM_Init>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8004452:	f7ff fc4f 	bl	8003cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004456:	2360      	movs	r3, #96	; 0x60
 8004458:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 80;
 800445a:	2350      	movs	r3, #80	; 0x50
 800445c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800445e:	2300      	movs	r3, #0
 8004460:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004466:	1d3b      	adds	r3, r7, #4
 8004468:	2200      	movs	r2, #0
 800446a:	4619      	mov	r1, r3
 800446c:	4807      	ldr	r0, [pc, #28]	; (800448c <MX_TIM14_Init+0x94>)
 800446e:	f7fd fe7b 	bl	8002168 <HAL_TIM_PWM_ConfigChannel>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8004478:	f7ff fc3c 	bl	8003cf4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 800447c:	4803      	ldr	r0, [pc, #12]	; (800448c <MX_TIM14_Init+0x94>)
 800447e:	f000 f8d5 	bl	800462c <HAL_TIM_MspPostInit>

}
 8004482:	bf00      	nop
 8004484:	3720      	adds	r7, #32
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	20000660 	.word	0x20000660
 8004490:	40002000 	.word	0x40002000

08004494 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08c      	sub	sp, #48	; 0x30
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800449c:	f107 031c 	add.w	r3, r7, #28
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	605a      	str	r2, [r3, #4]
 80044a6:	609a      	str	r2, [r3, #8]
 80044a8:	60da      	str	r2, [r3, #12]
 80044aa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a32      	ldr	r2, [pc, #200]	; (800457c <HAL_TIM_Encoder_MspInit+0xe8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d12d      	bne.n	8004512 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	4a31      	ldr	r2, [pc, #196]	; (8004580 <HAL_TIM_Encoder_MspInit+0xec>)
 80044bc:	4b30      	ldr	r3, [pc, #192]	; (8004580 <HAL_TIM_Encoder_MspInit+0xec>)
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	f043 0304 	orr.w	r3, r3, #4
 80044c4:	6413      	str	r3, [r2, #64]	; 0x40
 80044c6:	4b2e      	ldr	r3, [pc, #184]	; (8004580 <HAL_TIM_Encoder_MspInit+0xec>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	61bb      	str	r3, [r7, #24]
 80044d0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	4a2a      	ldr	r2, [pc, #168]	; (8004580 <HAL_TIM_Encoder_MspInit+0xec>)
 80044d8:	4b29      	ldr	r3, [pc, #164]	; (8004580 <HAL_TIM_Encoder_MspInit+0xec>)
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	f043 0308 	orr.w	r3, r3, #8
 80044e0:	6313      	str	r3, [r2, #48]	; 0x30
 80044e2:	4b27      	ldr	r3, [pc, #156]	; (8004580 <HAL_TIM_Encoder_MspInit+0xec>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80044ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80044f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f4:	2302      	movs	r3, #2
 80044f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fc:	2300      	movs	r3, #0
 80044fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004500:	2302      	movs	r3, #2
 8004502:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004504:	f107 031c 	add.w	r3, r7, #28
 8004508:	4619      	mov	r1, r3
 800450a:	481e      	ldr	r0, [pc, #120]	; (8004584 <HAL_TIM_Encoder_MspInit+0xf0>)
 800450c:	f7fc f9ec 	bl	80008e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004510:	e030      	b.n	8004574 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM8)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a1c      	ldr	r2, [pc, #112]	; (8004588 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d12b      	bne.n	8004574 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800451c:	2300      	movs	r3, #0
 800451e:	613b      	str	r3, [r7, #16]
 8004520:	4a17      	ldr	r2, [pc, #92]	; (8004580 <HAL_TIM_Encoder_MspInit+0xec>)
 8004522:	4b17      	ldr	r3, [pc, #92]	; (8004580 <HAL_TIM_Encoder_MspInit+0xec>)
 8004524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004526:	f043 0302 	orr.w	r3, r3, #2
 800452a:	6453      	str	r3, [r2, #68]	; 0x44
 800452c:	4b14      	ldr	r3, [pc, #80]	; (8004580 <HAL_TIM_Encoder_MspInit+0xec>)
 800452e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004538:	2300      	movs	r3, #0
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	4a10      	ldr	r2, [pc, #64]	; (8004580 <HAL_TIM_Encoder_MspInit+0xec>)
 800453e:	4b10      	ldr	r3, [pc, #64]	; (8004580 <HAL_TIM_Encoder_MspInit+0xec>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	f043 0304 	orr.w	r3, r3, #4
 8004546:	6313      	str	r3, [r2, #48]	; 0x30
 8004548:	4b0d      	ldr	r3, [pc, #52]	; (8004580 <HAL_TIM_Encoder_MspInit+0xec>)
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004554:	23c0      	movs	r3, #192	; 0xc0
 8004556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004558:	2302      	movs	r3, #2
 800455a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455c:	2300      	movs	r3, #0
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004560:	2300      	movs	r3, #0
 8004562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004564:	2303      	movs	r3, #3
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004568:	f107 031c 	add.w	r3, r7, #28
 800456c:	4619      	mov	r1, r3
 800456e:	4807      	ldr	r0, [pc, #28]	; (800458c <HAL_TIM_Encoder_MspInit+0xf8>)
 8004570:	f7fc f9ba 	bl	80008e8 <HAL_GPIO_Init>
}
 8004574:	bf00      	nop
 8004576:	3730      	adds	r7, #48	; 0x30
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40000800 	.word	0x40000800
 8004580:	40023800 	.word	0x40023800
 8004584:	40020c00 	.word	0x40020c00
 8004588:	40010400 	.word	0x40010400
 800458c:	40020800 	.word	0x40020800

08004590 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM12)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1f      	ldr	r2, [pc, #124]	; (800461c <HAL_TIM_Base_MspInit+0x8c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d10e      	bne.n	80045c0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	4a1e      	ldr	r2, [pc, #120]	; (8004620 <HAL_TIM_Base_MspInit+0x90>)
 80045a8:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <HAL_TIM_Base_MspInit+0x90>)
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045b0:	6413      	str	r3, [r2, #64]	; 0x40
 80045b2:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <HAL_TIM_Base_MspInit+0x90>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80045be:	e026      	b.n	800460e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM13)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a17      	ldr	r2, [pc, #92]	; (8004624 <HAL_TIM_Base_MspInit+0x94>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d10e      	bne.n	80045e8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80045ca:	2300      	movs	r3, #0
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	4a14      	ldr	r2, [pc, #80]	; (8004620 <HAL_TIM_Base_MspInit+0x90>)
 80045d0:	4b13      	ldr	r3, [pc, #76]	; (8004620 <HAL_TIM_Base_MspInit+0x90>)
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d8:	6413      	str	r3, [r2, #64]	; 0x40
 80045da:	4b11      	ldr	r3, [pc, #68]	; (8004620 <HAL_TIM_Base_MspInit+0x90>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	693b      	ldr	r3, [r7, #16]
}
 80045e6:	e012      	b.n	800460e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM14)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a0e      	ldr	r2, [pc, #56]	; (8004628 <HAL_TIM_Base_MspInit+0x98>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d10d      	bne.n	800460e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	4a0a      	ldr	r2, [pc, #40]	; (8004620 <HAL_TIM_Base_MspInit+0x90>)
 80045f8:	4b09      	ldr	r3, [pc, #36]	; (8004620 <HAL_TIM_Base_MspInit+0x90>)
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004600:	6413      	str	r3, [r2, #64]	; 0x40
 8004602:	4b07      	ldr	r3, [pc, #28]	; (8004620 <HAL_TIM_Base_MspInit+0x90>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]
}
 800460e:	bf00      	nop
 8004610:	371c      	adds	r7, #28
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	40001800 	.word	0x40001800
 8004620:	40023800 	.word	0x40023800
 8004624:	40001c00 	.word	0x40001c00
 8004628:	40002000 	.word	0x40002000

0800462c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08a      	sub	sp, #40	; 0x28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004634:	f107 0314 	add.w	r3, r7, #20
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	605a      	str	r2, [r3, #4]
 800463e:	609a      	str	r2, [r3, #8]
 8004640:	60da      	str	r2, [r3, #12]
 8004642:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a25      	ldr	r2, [pc, #148]	; (80046e0 <HAL_TIM_MspPostInit+0xb4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d11f      	bne.n	800468e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800464e:	2300      	movs	r3, #0
 8004650:	613b      	str	r3, [r7, #16]
 8004652:	4a24      	ldr	r2, [pc, #144]	; (80046e4 <HAL_TIM_MspPostInit+0xb8>)
 8004654:	4b23      	ldr	r3, [pc, #140]	; (80046e4 <HAL_TIM_MspPostInit+0xb8>)
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	f043 0320 	orr.w	r3, r3, #32
 800465c:	6313      	str	r3, [r2, #48]	; 0x30
 800465e:	4b21      	ldr	r3, [pc, #132]	; (80046e4 <HAL_TIM_MspPostInit+0xb8>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	613b      	str	r3, [r7, #16]
 8004668:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration    
    PF8     ------> TIM13_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800466a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800466e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004670:	2302      	movs	r3, #2
 8004672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004674:	2300      	movs	r3, #0
 8004676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004678:	2300      	movs	r3, #0
 800467a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800467c:	2309      	movs	r3, #9
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004680:	f107 0314 	add.w	r3, r7, #20
 8004684:	4619      	mov	r1, r3
 8004686:	4818      	ldr	r0, [pc, #96]	; (80046e8 <HAL_TIM_MspPostInit+0xbc>)
 8004688:	f7fc f92e 	bl	80008e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800468c:	e023      	b.n	80046d6 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM14)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a16      	ldr	r2, [pc, #88]	; (80046ec <HAL_TIM_MspPostInit+0xc0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d11e      	bne.n	80046d6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	4a11      	ldr	r2, [pc, #68]	; (80046e4 <HAL_TIM_MspPostInit+0xb8>)
 800469e:	4b11      	ldr	r3, [pc, #68]	; (80046e4 <HAL_TIM_MspPostInit+0xb8>)
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	f043 0320 	orr.w	r3, r3, #32
 80046a6:	6313      	str	r3, [r2, #48]	; 0x30
 80046a8:	4b0e      	ldr	r3, [pc, #56]	; (80046e4 <HAL_TIM_MspPostInit+0xb8>)
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80046b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ba:	2302      	movs	r3, #2
 80046bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c2:	2300      	movs	r3, #0
 80046c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80046c6:	2309      	movs	r3, #9
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80046ca:	f107 0314 	add.w	r3, r7, #20
 80046ce:	4619      	mov	r1, r3
 80046d0:	4805      	ldr	r0, [pc, #20]	; (80046e8 <HAL_TIM_MspPostInit+0xbc>)
 80046d2:	f7fc f909 	bl	80008e8 <HAL_GPIO_Init>
}
 80046d6:	bf00      	nop
 80046d8:	3728      	adds	r7, #40	; 0x28
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	40001c00 	.word	0x40001c00
 80046e4:	40023800 	.word	0x40023800
 80046e8:	40021400 	.word	0x40021400
 80046ec:	40002000 	.word	0x40002000

080046f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80046f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004728 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80046f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80046f6:	e003      	b.n	8004700 <LoopCopyDataInit>

080046f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80046f8:	4b0c      	ldr	r3, [pc, #48]	; (800472c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80046fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80046fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80046fe:	3104      	adds	r1, #4

08004700 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004700:	480b      	ldr	r0, [pc, #44]	; (8004730 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004702:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004704:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004706:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004708:	d3f6      	bcc.n	80046f8 <CopyDataInit>
  ldr  r2, =_sbss
 800470a:	4a0b      	ldr	r2, [pc, #44]	; (8004738 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800470c:	e002      	b.n	8004714 <LoopFillZerobss>

0800470e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800470e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004710:	f842 3b04 	str.w	r3, [r2], #4

08004714 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004714:	4b09      	ldr	r3, [pc, #36]	; (800473c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004716:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004718:	d3f9      	bcc.n	800470e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800471a:	f7ff fd03 	bl	8004124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800471e:	f000 f817 	bl	8004750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004722:	f7ff f98f 	bl	8003a44 <main>
  bx  lr    
 8004726:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004728:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800472c:	0800622c 	.word	0x0800622c
  ldr  r0, =_sdata
 8004730:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004734:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8004738:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800473c:	200006e4 	.word	0x200006e4

08004740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004740:	e7fe      	b.n	8004740 <ADC_IRQHandler>
	...

08004744 <__errno>:
 8004744:	4b01      	ldr	r3, [pc, #4]	; (800474c <__errno+0x8>)
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	2000000c 	.word	0x2000000c

08004750 <__libc_init_array>:
 8004750:	b570      	push	{r4, r5, r6, lr}
 8004752:	4e0d      	ldr	r6, [pc, #52]	; (8004788 <__libc_init_array+0x38>)
 8004754:	4c0d      	ldr	r4, [pc, #52]	; (800478c <__libc_init_array+0x3c>)
 8004756:	1ba4      	subs	r4, r4, r6
 8004758:	10a4      	asrs	r4, r4, #2
 800475a:	2500      	movs	r5, #0
 800475c:	42a5      	cmp	r5, r4
 800475e:	d109      	bne.n	8004774 <__libc_init_array+0x24>
 8004760:	4e0b      	ldr	r6, [pc, #44]	; (8004790 <__libc_init_array+0x40>)
 8004762:	4c0c      	ldr	r4, [pc, #48]	; (8004794 <__libc_init_array+0x44>)
 8004764:	f000 ff7c 	bl	8005660 <_init>
 8004768:	1ba4      	subs	r4, r4, r6
 800476a:	10a4      	asrs	r4, r4, #2
 800476c:	2500      	movs	r5, #0
 800476e:	42a5      	cmp	r5, r4
 8004770:	d105      	bne.n	800477e <__libc_init_array+0x2e>
 8004772:	bd70      	pop	{r4, r5, r6, pc}
 8004774:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004778:	4798      	blx	r3
 800477a:	3501      	adds	r5, #1
 800477c:	e7ee      	b.n	800475c <__libc_init_array+0xc>
 800477e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004782:	4798      	blx	r3
 8004784:	3501      	adds	r5, #1
 8004786:	e7f2      	b.n	800476e <__libc_init_array+0x1e>
 8004788:	08006224 	.word	0x08006224
 800478c:	08006224 	.word	0x08006224
 8004790:	08006224 	.word	0x08006224
 8004794:	08006228 	.word	0x08006228

08004798 <memset>:
 8004798:	4402      	add	r2, r0
 800479a:	4603      	mov	r3, r0
 800479c:	4293      	cmp	r3, r2
 800479e:	d100      	bne.n	80047a2 <memset+0xa>
 80047a0:	4770      	bx	lr
 80047a2:	f803 1b01 	strb.w	r1, [r3], #1
 80047a6:	e7f9      	b.n	800479c <memset+0x4>

080047a8 <iprintf>:
 80047a8:	b40f      	push	{r0, r1, r2, r3}
 80047aa:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <iprintf+0x2c>)
 80047ac:	b513      	push	{r0, r1, r4, lr}
 80047ae:	681c      	ldr	r4, [r3, #0]
 80047b0:	b124      	cbz	r4, 80047bc <iprintf+0x14>
 80047b2:	69a3      	ldr	r3, [r4, #24]
 80047b4:	b913      	cbnz	r3, 80047bc <iprintf+0x14>
 80047b6:	4620      	mov	r0, r4
 80047b8:	f000 fa24 	bl	8004c04 <__sinit>
 80047bc:	ab05      	add	r3, sp, #20
 80047be:	9a04      	ldr	r2, [sp, #16]
 80047c0:	68a1      	ldr	r1, [r4, #8]
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	4620      	mov	r0, r4
 80047c6:	f000 fbe1 	bl	8004f8c <_vfiprintf_r>
 80047ca:	b002      	add	sp, #8
 80047cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047d0:	b004      	add	sp, #16
 80047d2:	4770      	bx	lr
 80047d4:	2000000c 	.word	0x2000000c

080047d8 <_puts_r>:
 80047d8:	b570      	push	{r4, r5, r6, lr}
 80047da:	460e      	mov	r6, r1
 80047dc:	4605      	mov	r5, r0
 80047de:	b118      	cbz	r0, 80047e8 <_puts_r+0x10>
 80047e0:	6983      	ldr	r3, [r0, #24]
 80047e2:	b90b      	cbnz	r3, 80047e8 <_puts_r+0x10>
 80047e4:	f000 fa0e 	bl	8004c04 <__sinit>
 80047e8:	69ab      	ldr	r3, [r5, #24]
 80047ea:	68ac      	ldr	r4, [r5, #8]
 80047ec:	b913      	cbnz	r3, 80047f4 <_puts_r+0x1c>
 80047ee:	4628      	mov	r0, r5
 80047f0:	f000 fa08 	bl	8004c04 <__sinit>
 80047f4:	4b23      	ldr	r3, [pc, #140]	; (8004884 <_puts_r+0xac>)
 80047f6:	429c      	cmp	r4, r3
 80047f8:	d117      	bne.n	800482a <_puts_r+0x52>
 80047fa:	686c      	ldr	r4, [r5, #4]
 80047fc:	89a3      	ldrh	r3, [r4, #12]
 80047fe:	071b      	lsls	r3, r3, #28
 8004800:	d51d      	bpl.n	800483e <_puts_r+0x66>
 8004802:	6923      	ldr	r3, [r4, #16]
 8004804:	b1db      	cbz	r3, 800483e <_puts_r+0x66>
 8004806:	3e01      	subs	r6, #1
 8004808:	68a3      	ldr	r3, [r4, #8]
 800480a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800480e:	3b01      	subs	r3, #1
 8004810:	60a3      	str	r3, [r4, #8]
 8004812:	b9e9      	cbnz	r1, 8004850 <_puts_r+0x78>
 8004814:	2b00      	cmp	r3, #0
 8004816:	da2e      	bge.n	8004876 <_puts_r+0x9e>
 8004818:	4622      	mov	r2, r4
 800481a:	210a      	movs	r1, #10
 800481c:	4628      	mov	r0, r5
 800481e:	f000 f83f 	bl	80048a0 <__swbuf_r>
 8004822:	3001      	adds	r0, #1
 8004824:	d011      	beq.n	800484a <_puts_r+0x72>
 8004826:	200a      	movs	r0, #10
 8004828:	bd70      	pop	{r4, r5, r6, pc}
 800482a:	4b17      	ldr	r3, [pc, #92]	; (8004888 <_puts_r+0xb0>)
 800482c:	429c      	cmp	r4, r3
 800482e:	d101      	bne.n	8004834 <_puts_r+0x5c>
 8004830:	68ac      	ldr	r4, [r5, #8]
 8004832:	e7e3      	b.n	80047fc <_puts_r+0x24>
 8004834:	4b15      	ldr	r3, [pc, #84]	; (800488c <_puts_r+0xb4>)
 8004836:	429c      	cmp	r4, r3
 8004838:	bf08      	it	eq
 800483a:	68ec      	ldreq	r4, [r5, #12]
 800483c:	e7de      	b.n	80047fc <_puts_r+0x24>
 800483e:	4621      	mov	r1, r4
 8004840:	4628      	mov	r0, r5
 8004842:	f000 f87f 	bl	8004944 <__swsetup_r>
 8004846:	2800      	cmp	r0, #0
 8004848:	d0dd      	beq.n	8004806 <_puts_r+0x2e>
 800484a:	f04f 30ff 	mov.w	r0, #4294967295
 800484e:	bd70      	pop	{r4, r5, r6, pc}
 8004850:	2b00      	cmp	r3, #0
 8004852:	da04      	bge.n	800485e <_puts_r+0x86>
 8004854:	69a2      	ldr	r2, [r4, #24]
 8004856:	4293      	cmp	r3, r2
 8004858:	db06      	blt.n	8004868 <_puts_r+0x90>
 800485a:	290a      	cmp	r1, #10
 800485c:	d004      	beq.n	8004868 <_puts_r+0x90>
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	6022      	str	r2, [r4, #0]
 8004864:	7019      	strb	r1, [r3, #0]
 8004866:	e7cf      	b.n	8004808 <_puts_r+0x30>
 8004868:	4622      	mov	r2, r4
 800486a:	4628      	mov	r0, r5
 800486c:	f000 f818 	bl	80048a0 <__swbuf_r>
 8004870:	3001      	adds	r0, #1
 8004872:	d1c9      	bne.n	8004808 <_puts_r+0x30>
 8004874:	e7e9      	b.n	800484a <_puts_r+0x72>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	200a      	movs	r0, #10
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	6022      	str	r2, [r4, #0]
 800487e:	7018      	strb	r0, [r3, #0]
 8004880:	bd70      	pop	{r4, r5, r6, pc}
 8004882:	bf00      	nop
 8004884:	080061a8 	.word	0x080061a8
 8004888:	080061c8 	.word	0x080061c8
 800488c:	08006188 	.word	0x08006188

08004890 <puts>:
 8004890:	4b02      	ldr	r3, [pc, #8]	; (800489c <puts+0xc>)
 8004892:	4601      	mov	r1, r0
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	f7ff bf9f 	b.w	80047d8 <_puts_r>
 800489a:	bf00      	nop
 800489c:	2000000c 	.word	0x2000000c

080048a0 <__swbuf_r>:
 80048a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a2:	460e      	mov	r6, r1
 80048a4:	4614      	mov	r4, r2
 80048a6:	4605      	mov	r5, r0
 80048a8:	b118      	cbz	r0, 80048b2 <__swbuf_r+0x12>
 80048aa:	6983      	ldr	r3, [r0, #24]
 80048ac:	b90b      	cbnz	r3, 80048b2 <__swbuf_r+0x12>
 80048ae:	f000 f9a9 	bl	8004c04 <__sinit>
 80048b2:	4b21      	ldr	r3, [pc, #132]	; (8004938 <__swbuf_r+0x98>)
 80048b4:	429c      	cmp	r4, r3
 80048b6:	d12a      	bne.n	800490e <__swbuf_r+0x6e>
 80048b8:	686c      	ldr	r4, [r5, #4]
 80048ba:	69a3      	ldr	r3, [r4, #24]
 80048bc:	60a3      	str	r3, [r4, #8]
 80048be:	89a3      	ldrh	r3, [r4, #12]
 80048c0:	071a      	lsls	r2, r3, #28
 80048c2:	d52e      	bpl.n	8004922 <__swbuf_r+0x82>
 80048c4:	6923      	ldr	r3, [r4, #16]
 80048c6:	b363      	cbz	r3, 8004922 <__swbuf_r+0x82>
 80048c8:	6923      	ldr	r3, [r4, #16]
 80048ca:	6820      	ldr	r0, [r4, #0]
 80048cc:	1ac0      	subs	r0, r0, r3
 80048ce:	6963      	ldr	r3, [r4, #20]
 80048d0:	b2f6      	uxtb	r6, r6
 80048d2:	4298      	cmp	r0, r3
 80048d4:	4637      	mov	r7, r6
 80048d6:	db04      	blt.n	80048e2 <__swbuf_r+0x42>
 80048d8:	4621      	mov	r1, r4
 80048da:	4628      	mov	r0, r5
 80048dc:	f000 f928 	bl	8004b30 <_fflush_r>
 80048e0:	bb28      	cbnz	r0, 800492e <__swbuf_r+0x8e>
 80048e2:	68a3      	ldr	r3, [r4, #8]
 80048e4:	3b01      	subs	r3, #1
 80048e6:	60a3      	str	r3, [r4, #8]
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	1c5a      	adds	r2, r3, #1
 80048ec:	6022      	str	r2, [r4, #0]
 80048ee:	701e      	strb	r6, [r3, #0]
 80048f0:	6963      	ldr	r3, [r4, #20]
 80048f2:	3001      	adds	r0, #1
 80048f4:	4298      	cmp	r0, r3
 80048f6:	d004      	beq.n	8004902 <__swbuf_r+0x62>
 80048f8:	89a3      	ldrh	r3, [r4, #12]
 80048fa:	07db      	lsls	r3, r3, #31
 80048fc:	d519      	bpl.n	8004932 <__swbuf_r+0x92>
 80048fe:	2e0a      	cmp	r6, #10
 8004900:	d117      	bne.n	8004932 <__swbuf_r+0x92>
 8004902:	4621      	mov	r1, r4
 8004904:	4628      	mov	r0, r5
 8004906:	f000 f913 	bl	8004b30 <_fflush_r>
 800490a:	b190      	cbz	r0, 8004932 <__swbuf_r+0x92>
 800490c:	e00f      	b.n	800492e <__swbuf_r+0x8e>
 800490e:	4b0b      	ldr	r3, [pc, #44]	; (800493c <__swbuf_r+0x9c>)
 8004910:	429c      	cmp	r4, r3
 8004912:	d101      	bne.n	8004918 <__swbuf_r+0x78>
 8004914:	68ac      	ldr	r4, [r5, #8]
 8004916:	e7d0      	b.n	80048ba <__swbuf_r+0x1a>
 8004918:	4b09      	ldr	r3, [pc, #36]	; (8004940 <__swbuf_r+0xa0>)
 800491a:	429c      	cmp	r4, r3
 800491c:	bf08      	it	eq
 800491e:	68ec      	ldreq	r4, [r5, #12]
 8004920:	e7cb      	b.n	80048ba <__swbuf_r+0x1a>
 8004922:	4621      	mov	r1, r4
 8004924:	4628      	mov	r0, r5
 8004926:	f000 f80d 	bl	8004944 <__swsetup_r>
 800492a:	2800      	cmp	r0, #0
 800492c:	d0cc      	beq.n	80048c8 <__swbuf_r+0x28>
 800492e:	f04f 37ff 	mov.w	r7, #4294967295
 8004932:	4638      	mov	r0, r7
 8004934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004936:	bf00      	nop
 8004938:	080061a8 	.word	0x080061a8
 800493c:	080061c8 	.word	0x080061c8
 8004940:	08006188 	.word	0x08006188

08004944 <__swsetup_r>:
 8004944:	4b32      	ldr	r3, [pc, #200]	; (8004a10 <__swsetup_r+0xcc>)
 8004946:	b570      	push	{r4, r5, r6, lr}
 8004948:	681d      	ldr	r5, [r3, #0]
 800494a:	4606      	mov	r6, r0
 800494c:	460c      	mov	r4, r1
 800494e:	b125      	cbz	r5, 800495a <__swsetup_r+0x16>
 8004950:	69ab      	ldr	r3, [r5, #24]
 8004952:	b913      	cbnz	r3, 800495a <__swsetup_r+0x16>
 8004954:	4628      	mov	r0, r5
 8004956:	f000 f955 	bl	8004c04 <__sinit>
 800495a:	4b2e      	ldr	r3, [pc, #184]	; (8004a14 <__swsetup_r+0xd0>)
 800495c:	429c      	cmp	r4, r3
 800495e:	d10f      	bne.n	8004980 <__swsetup_r+0x3c>
 8004960:	686c      	ldr	r4, [r5, #4]
 8004962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004966:	b29a      	uxth	r2, r3
 8004968:	0715      	lsls	r5, r2, #28
 800496a:	d42c      	bmi.n	80049c6 <__swsetup_r+0x82>
 800496c:	06d0      	lsls	r0, r2, #27
 800496e:	d411      	bmi.n	8004994 <__swsetup_r+0x50>
 8004970:	2209      	movs	r2, #9
 8004972:	6032      	str	r2, [r6, #0]
 8004974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004978:	81a3      	strh	r3, [r4, #12]
 800497a:	f04f 30ff 	mov.w	r0, #4294967295
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	4b25      	ldr	r3, [pc, #148]	; (8004a18 <__swsetup_r+0xd4>)
 8004982:	429c      	cmp	r4, r3
 8004984:	d101      	bne.n	800498a <__swsetup_r+0x46>
 8004986:	68ac      	ldr	r4, [r5, #8]
 8004988:	e7eb      	b.n	8004962 <__swsetup_r+0x1e>
 800498a:	4b24      	ldr	r3, [pc, #144]	; (8004a1c <__swsetup_r+0xd8>)
 800498c:	429c      	cmp	r4, r3
 800498e:	bf08      	it	eq
 8004990:	68ec      	ldreq	r4, [r5, #12]
 8004992:	e7e6      	b.n	8004962 <__swsetup_r+0x1e>
 8004994:	0751      	lsls	r1, r2, #29
 8004996:	d512      	bpl.n	80049be <__swsetup_r+0x7a>
 8004998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800499a:	b141      	cbz	r1, 80049ae <__swsetup_r+0x6a>
 800499c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049a0:	4299      	cmp	r1, r3
 80049a2:	d002      	beq.n	80049aa <__swsetup_r+0x66>
 80049a4:	4630      	mov	r0, r6
 80049a6:	f000 fa1b 	bl	8004de0 <_free_r>
 80049aa:	2300      	movs	r3, #0
 80049ac:	6363      	str	r3, [r4, #52]	; 0x34
 80049ae:	89a3      	ldrh	r3, [r4, #12]
 80049b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049b4:	81a3      	strh	r3, [r4, #12]
 80049b6:	2300      	movs	r3, #0
 80049b8:	6063      	str	r3, [r4, #4]
 80049ba:	6923      	ldr	r3, [r4, #16]
 80049bc:	6023      	str	r3, [r4, #0]
 80049be:	89a3      	ldrh	r3, [r4, #12]
 80049c0:	f043 0308 	orr.w	r3, r3, #8
 80049c4:	81a3      	strh	r3, [r4, #12]
 80049c6:	6923      	ldr	r3, [r4, #16]
 80049c8:	b94b      	cbnz	r3, 80049de <__swsetup_r+0x9a>
 80049ca:	89a3      	ldrh	r3, [r4, #12]
 80049cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d4:	d003      	beq.n	80049de <__swsetup_r+0x9a>
 80049d6:	4621      	mov	r1, r4
 80049d8:	4630      	mov	r0, r6
 80049da:	f000 f9c1 	bl	8004d60 <__smakebuf_r>
 80049de:	89a2      	ldrh	r2, [r4, #12]
 80049e0:	f012 0301 	ands.w	r3, r2, #1
 80049e4:	d00c      	beq.n	8004a00 <__swsetup_r+0xbc>
 80049e6:	2300      	movs	r3, #0
 80049e8:	60a3      	str	r3, [r4, #8]
 80049ea:	6963      	ldr	r3, [r4, #20]
 80049ec:	425b      	negs	r3, r3
 80049ee:	61a3      	str	r3, [r4, #24]
 80049f0:	6923      	ldr	r3, [r4, #16]
 80049f2:	b953      	cbnz	r3, 8004a0a <__swsetup_r+0xc6>
 80049f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049f8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80049fc:	d1ba      	bne.n	8004974 <__swsetup_r+0x30>
 80049fe:	bd70      	pop	{r4, r5, r6, pc}
 8004a00:	0792      	lsls	r2, r2, #30
 8004a02:	bf58      	it	pl
 8004a04:	6963      	ldrpl	r3, [r4, #20]
 8004a06:	60a3      	str	r3, [r4, #8]
 8004a08:	e7f2      	b.n	80049f0 <__swsetup_r+0xac>
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	e7f7      	b.n	80049fe <__swsetup_r+0xba>
 8004a0e:	bf00      	nop
 8004a10:	2000000c 	.word	0x2000000c
 8004a14:	080061a8 	.word	0x080061a8
 8004a18:	080061c8 	.word	0x080061c8
 8004a1c:	08006188 	.word	0x08006188

08004a20 <__sflush_r>:
 8004a20:	898a      	ldrh	r2, [r1, #12]
 8004a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a26:	4605      	mov	r5, r0
 8004a28:	0710      	lsls	r0, r2, #28
 8004a2a:	460c      	mov	r4, r1
 8004a2c:	d45a      	bmi.n	8004ae4 <__sflush_r+0xc4>
 8004a2e:	684b      	ldr	r3, [r1, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	dc05      	bgt.n	8004a40 <__sflush_r+0x20>
 8004a34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	dc02      	bgt.n	8004a40 <__sflush_r+0x20>
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a42:	2e00      	cmp	r6, #0
 8004a44:	d0f9      	beq.n	8004a3a <__sflush_r+0x1a>
 8004a46:	2300      	movs	r3, #0
 8004a48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a4c:	682f      	ldr	r7, [r5, #0]
 8004a4e:	602b      	str	r3, [r5, #0]
 8004a50:	d033      	beq.n	8004aba <__sflush_r+0x9a>
 8004a52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a54:	89a3      	ldrh	r3, [r4, #12]
 8004a56:	075a      	lsls	r2, r3, #29
 8004a58:	d505      	bpl.n	8004a66 <__sflush_r+0x46>
 8004a5a:	6863      	ldr	r3, [r4, #4]
 8004a5c:	1ac0      	subs	r0, r0, r3
 8004a5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a60:	b10b      	cbz	r3, 8004a66 <__sflush_r+0x46>
 8004a62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a64:	1ac0      	subs	r0, r0, r3
 8004a66:	2300      	movs	r3, #0
 8004a68:	4602      	mov	r2, r0
 8004a6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a6c:	6a21      	ldr	r1, [r4, #32]
 8004a6e:	4628      	mov	r0, r5
 8004a70:	47b0      	blx	r6
 8004a72:	1c43      	adds	r3, r0, #1
 8004a74:	89a3      	ldrh	r3, [r4, #12]
 8004a76:	d106      	bne.n	8004a86 <__sflush_r+0x66>
 8004a78:	6829      	ldr	r1, [r5, #0]
 8004a7a:	291d      	cmp	r1, #29
 8004a7c:	d84b      	bhi.n	8004b16 <__sflush_r+0xf6>
 8004a7e:	4a2b      	ldr	r2, [pc, #172]	; (8004b2c <__sflush_r+0x10c>)
 8004a80:	40ca      	lsrs	r2, r1
 8004a82:	07d6      	lsls	r6, r2, #31
 8004a84:	d547      	bpl.n	8004b16 <__sflush_r+0xf6>
 8004a86:	2200      	movs	r2, #0
 8004a88:	6062      	str	r2, [r4, #4]
 8004a8a:	04d9      	lsls	r1, r3, #19
 8004a8c:	6922      	ldr	r2, [r4, #16]
 8004a8e:	6022      	str	r2, [r4, #0]
 8004a90:	d504      	bpl.n	8004a9c <__sflush_r+0x7c>
 8004a92:	1c42      	adds	r2, r0, #1
 8004a94:	d101      	bne.n	8004a9a <__sflush_r+0x7a>
 8004a96:	682b      	ldr	r3, [r5, #0]
 8004a98:	b903      	cbnz	r3, 8004a9c <__sflush_r+0x7c>
 8004a9a:	6560      	str	r0, [r4, #84]	; 0x54
 8004a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a9e:	602f      	str	r7, [r5, #0]
 8004aa0:	2900      	cmp	r1, #0
 8004aa2:	d0ca      	beq.n	8004a3a <__sflush_r+0x1a>
 8004aa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004aa8:	4299      	cmp	r1, r3
 8004aaa:	d002      	beq.n	8004ab2 <__sflush_r+0x92>
 8004aac:	4628      	mov	r0, r5
 8004aae:	f000 f997 	bl	8004de0 <_free_r>
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	6360      	str	r0, [r4, #52]	; 0x34
 8004ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aba:	6a21      	ldr	r1, [r4, #32]
 8004abc:	2301      	movs	r3, #1
 8004abe:	4628      	mov	r0, r5
 8004ac0:	47b0      	blx	r6
 8004ac2:	1c41      	adds	r1, r0, #1
 8004ac4:	d1c6      	bne.n	8004a54 <__sflush_r+0x34>
 8004ac6:	682b      	ldr	r3, [r5, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0c3      	beq.n	8004a54 <__sflush_r+0x34>
 8004acc:	2b1d      	cmp	r3, #29
 8004ace:	d001      	beq.n	8004ad4 <__sflush_r+0xb4>
 8004ad0:	2b16      	cmp	r3, #22
 8004ad2:	d101      	bne.n	8004ad8 <__sflush_r+0xb8>
 8004ad4:	602f      	str	r7, [r5, #0]
 8004ad6:	e7b0      	b.n	8004a3a <__sflush_r+0x1a>
 8004ad8:	89a3      	ldrh	r3, [r4, #12]
 8004ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ade:	81a3      	strh	r3, [r4, #12]
 8004ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ae4:	690f      	ldr	r7, [r1, #16]
 8004ae6:	2f00      	cmp	r7, #0
 8004ae8:	d0a7      	beq.n	8004a3a <__sflush_r+0x1a>
 8004aea:	0793      	lsls	r3, r2, #30
 8004aec:	680e      	ldr	r6, [r1, #0]
 8004aee:	bf08      	it	eq
 8004af0:	694b      	ldreq	r3, [r1, #20]
 8004af2:	600f      	str	r7, [r1, #0]
 8004af4:	bf18      	it	ne
 8004af6:	2300      	movne	r3, #0
 8004af8:	eba6 0807 	sub.w	r8, r6, r7
 8004afc:	608b      	str	r3, [r1, #8]
 8004afe:	f1b8 0f00 	cmp.w	r8, #0
 8004b02:	dd9a      	ble.n	8004a3a <__sflush_r+0x1a>
 8004b04:	4643      	mov	r3, r8
 8004b06:	463a      	mov	r2, r7
 8004b08:	6a21      	ldr	r1, [r4, #32]
 8004b0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	47b0      	blx	r6
 8004b10:	2800      	cmp	r0, #0
 8004b12:	dc07      	bgt.n	8004b24 <__sflush_r+0x104>
 8004b14:	89a3      	ldrh	r3, [r4, #12]
 8004b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b1a:	81a3      	strh	r3, [r4, #12]
 8004b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b24:	4407      	add	r7, r0
 8004b26:	eba8 0800 	sub.w	r8, r8, r0
 8004b2a:	e7e8      	b.n	8004afe <__sflush_r+0xde>
 8004b2c:	20400001 	.word	0x20400001

08004b30 <_fflush_r>:
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	690b      	ldr	r3, [r1, #16]
 8004b34:	4605      	mov	r5, r0
 8004b36:	460c      	mov	r4, r1
 8004b38:	b1db      	cbz	r3, 8004b72 <_fflush_r+0x42>
 8004b3a:	b118      	cbz	r0, 8004b44 <_fflush_r+0x14>
 8004b3c:	6983      	ldr	r3, [r0, #24]
 8004b3e:	b90b      	cbnz	r3, 8004b44 <_fflush_r+0x14>
 8004b40:	f000 f860 	bl	8004c04 <__sinit>
 8004b44:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <_fflush_r+0x48>)
 8004b46:	429c      	cmp	r4, r3
 8004b48:	d109      	bne.n	8004b5e <_fflush_r+0x2e>
 8004b4a:	686c      	ldr	r4, [r5, #4]
 8004b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b50:	b17b      	cbz	r3, 8004b72 <_fflush_r+0x42>
 8004b52:	4621      	mov	r1, r4
 8004b54:	4628      	mov	r0, r5
 8004b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b5a:	f7ff bf61 	b.w	8004a20 <__sflush_r>
 8004b5e:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <_fflush_r+0x4c>)
 8004b60:	429c      	cmp	r4, r3
 8004b62:	d101      	bne.n	8004b68 <_fflush_r+0x38>
 8004b64:	68ac      	ldr	r4, [r5, #8]
 8004b66:	e7f1      	b.n	8004b4c <_fflush_r+0x1c>
 8004b68:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <_fflush_r+0x50>)
 8004b6a:	429c      	cmp	r4, r3
 8004b6c:	bf08      	it	eq
 8004b6e:	68ec      	ldreq	r4, [r5, #12]
 8004b70:	e7ec      	b.n	8004b4c <_fflush_r+0x1c>
 8004b72:	2000      	movs	r0, #0
 8004b74:	bd38      	pop	{r3, r4, r5, pc}
 8004b76:	bf00      	nop
 8004b78:	080061a8 	.word	0x080061a8
 8004b7c:	080061c8 	.word	0x080061c8
 8004b80:	08006188 	.word	0x08006188

08004b84 <_cleanup_r>:
 8004b84:	4901      	ldr	r1, [pc, #4]	; (8004b8c <_cleanup_r+0x8>)
 8004b86:	f000 b8a9 	b.w	8004cdc <_fwalk_reent>
 8004b8a:	bf00      	nop
 8004b8c:	08004b31 	.word	0x08004b31

08004b90 <std.isra.0>:
 8004b90:	2300      	movs	r3, #0
 8004b92:	b510      	push	{r4, lr}
 8004b94:	4604      	mov	r4, r0
 8004b96:	6003      	str	r3, [r0, #0]
 8004b98:	6043      	str	r3, [r0, #4]
 8004b9a:	6083      	str	r3, [r0, #8]
 8004b9c:	8181      	strh	r1, [r0, #12]
 8004b9e:	6643      	str	r3, [r0, #100]	; 0x64
 8004ba0:	81c2      	strh	r2, [r0, #14]
 8004ba2:	6103      	str	r3, [r0, #16]
 8004ba4:	6143      	str	r3, [r0, #20]
 8004ba6:	6183      	str	r3, [r0, #24]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	2208      	movs	r2, #8
 8004bac:	305c      	adds	r0, #92	; 0x5c
 8004bae:	f7ff fdf3 	bl	8004798 <memset>
 8004bb2:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <std.isra.0+0x38>)
 8004bb4:	6263      	str	r3, [r4, #36]	; 0x24
 8004bb6:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <std.isra.0+0x3c>)
 8004bb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bba:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <std.isra.0+0x40>)
 8004bbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bbe:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <std.isra.0+0x44>)
 8004bc0:	6224      	str	r4, [r4, #32]
 8004bc2:	6323      	str	r3, [r4, #48]	; 0x30
 8004bc4:	bd10      	pop	{r4, pc}
 8004bc6:	bf00      	nop
 8004bc8:	08005505 	.word	0x08005505
 8004bcc:	08005527 	.word	0x08005527
 8004bd0:	0800555f 	.word	0x0800555f
 8004bd4:	08005583 	.word	0x08005583

08004bd8 <__sfmoreglue>:
 8004bd8:	b570      	push	{r4, r5, r6, lr}
 8004bda:	1e4a      	subs	r2, r1, #1
 8004bdc:	2568      	movs	r5, #104	; 0x68
 8004bde:	4355      	muls	r5, r2
 8004be0:	460e      	mov	r6, r1
 8004be2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004be6:	f000 f949 	bl	8004e7c <_malloc_r>
 8004bea:	4604      	mov	r4, r0
 8004bec:	b140      	cbz	r0, 8004c00 <__sfmoreglue+0x28>
 8004bee:	2100      	movs	r1, #0
 8004bf0:	e880 0042 	stmia.w	r0, {r1, r6}
 8004bf4:	300c      	adds	r0, #12
 8004bf6:	60a0      	str	r0, [r4, #8]
 8004bf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004bfc:	f7ff fdcc 	bl	8004798 <memset>
 8004c00:	4620      	mov	r0, r4
 8004c02:	bd70      	pop	{r4, r5, r6, pc}

08004c04 <__sinit>:
 8004c04:	6983      	ldr	r3, [r0, #24]
 8004c06:	b510      	push	{r4, lr}
 8004c08:	4604      	mov	r4, r0
 8004c0a:	bb33      	cbnz	r3, 8004c5a <__sinit+0x56>
 8004c0c:	6483      	str	r3, [r0, #72]	; 0x48
 8004c0e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004c10:	6503      	str	r3, [r0, #80]	; 0x50
 8004c12:	4b12      	ldr	r3, [pc, #72]	; (8004c5c <__sinit+0x58>)
 8004c14:	4a12      	ldr	r2, [pc, #72]	; (8004c60 <__sinit+0x5c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6282      	str	r2, [r0, #40]	; 0x28
 8004c1a:	4298      	cmp	r0, r3
 8004c1c:	bf04      	itt	eq
 8004c1e:	2301      	moveq	r3, #1
 8004c20:	6183      	streq	r3, [r0, #24]
 8004c22:	f000 f81f 	bl	8004c64 <__sfp>
 8004c26:	6060      	str	r0, [r4, #4]
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f000 f81b 	bl	8004c64 <__sfp>
 8004c2e:	60a0      	str	r0, [r4, #8]
 8004c30:	4620      	mov	r0, r4
 8004c32:	f000 f817 	bl	8004c64 <__sfp>
 8004c36:	2200      	movs	r2, #0
 8004c38:	60e0      	str	r0, [r4, #12]
 8004c3a:	2104      	movs	r1, #4
 8004c3c:	6860      	ldr	r0, [r4, #4]
 8004c3e:	f7ff ffa7 	bl	8004b90 <std.isra.0>
 8004c42:	2201      	movs	r2, #1
 8004c44:	2109      	movs	r1, #9
 8004c46:	68a0      	ldr	r0, [r4, #8]
 8004c48:	f7ff ffa2 	bl	8004b90 <std.isra.0>
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	2112      	movs	r1, #18
 8004c50:	68e0      	ldr	r0, [r4, #12]
 8004c52:	f7ff ff9d 	bl	8004b90 <std.isra.0>
 8004c56:	2301      	movs	r3, #1
 8004c58:	61a3      	str	r3, [r4, #24]
 8004c5a:	bd10      	pop	{r4, pc}
 8004c5c:	08006184 	.word	0x08006184
 8004c60:	08004b85 	.word	0x08004b85

08004c64 <__sfp>:
 8004c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c66:	4b1c      	ldr	r3, [pc, #112]	; (8004cd8 <__sfp+0x74>)
 8004c68:	681e      	ldr	r6, [r3, #0]
 8004c6a:	69b3      	ldr	r3, [r6, #24]
 8004c6c:	4607      	mov	r7, r0
 8004c6e:	b913      	cbnz	r3, 8004c76 <__sfp+0x12>
 8004c70:	4630      	mov	r0, r6
 8004c72:	f7ff ffc7 	bl	8004c04 <__sinit>
 8004c76:	3648      	adds	r6, #72	; 0x48
 8004c78:	68b4      	ldr	r4, [r6, #8]
 8004c7a:	6873      	ldr	r3, [r6, #4]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	d503      	bpl.n	8004c88 <__sfp+0x24>
 8004c80:	6833      	ldr	r3, [r6, #0]
 8004c82:	b133      	cbz	r3, 8004c92 <__sfp+0x2e>
 8004c84:	6836      	ldr	r6, [r6, #0]
 8004c86:	e7f7      	b.n	8004c78 <__sfp+0x14>
 8004c88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c8c:	b16d      	cbz	r5, 8004caa <__sfp+0x46>
 8004c8e:	3468      	adds	r4, #104	; 0x68
 8004c90:	e7f4      	b.n	8004c7c <__sfp+0x18>
 8004c92:	2104      	movs	r1, #4
 8004c94:	4638      	mov	r0, r7
 8004c96:	f7ff ff9f 	bl	8004bd8 <__sfmoreglue>
 8004c9a:	6030      	str	r0, [r6, #0]
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d1f1      	bne.n	8004c84 <__sfp+0x20>
 8004ca0:	230c      	movs	r3, #12
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004caa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004cae:	81e3      	strh	r3, [r4, #14]
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	81a3      	strh	r3, [r4, #12]
 8004cb4:	6665      	str	r5, [r4, #100]	; 0x64
 8004cb6:	6025      	str	r5, [r4, #0]
 8004cb8:	60a5      	str	r5, [r4, #8]
 8004cba:	6065      	str	r5, [r4, #4]
 8004cbc:	6125      	str	r5, [r4, #16]
 8004cbe:	6165      	str	r5, [r4, #20]
 8004cc0:	61a5      	str	r5, [r4, #24]
 8004cc2:	2208      	movs	r2, #8
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004cca:	f7ff fd65 	bl	8004798 <memset>
 8004cce:	6365      	str	r5, [r4, #52]	; 0x34
 8004cd0:	63a5      	str	r5, [r4, #56]	; 0x38
 8004cd2:	64a5      	str	r5, [r4, #72]	; 0x48
 8004cd4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004cd6:	e7e6      	b.n	8004ca6 <__sfp+0x42>
 8004cd8:	08006184 	.word	0x08006184

08004cdc <_fwalk_reent>:
 8004cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ce0:	4680      	mov	r8, r0
 8004ce2:	4689      	mov	r9, r1
 8004ce4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ce8:	2600      	movs	r6, #0
 8004cea:	b914      	cbnz	r4, 8004cf2 <_fwalk_reent+0x16>
 8004cec:	4630      	mov	r0, r6
 8004cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cf2:	68a5      	ldr	r5, [r4, #8]
 8004cf4:	6867      	ldr	r7, [r4, #4]
 8004cf6:	3f01      	subs	r7, #1
 8004cf8:	d501      	bpl.n	8004cfe <_fwalk_reent+0x22>
 8004cfa:	6824      	ldr	r4, [r4, #0]
 8004cfc:	e7f5      	b.n	8004cea <_fwalk_reent+0xe>
 8004cfe:	89ab      	ldrh	r3, [r5, #12]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d907      	bls.n	8004d14 <_fwalk_reent+0x38>
 8004d04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	d003      	beq.n	8004d14 <_fwalk_reent+0x38>
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	4640      	mov	r0, r8
 8004d10:	47c8      	blx	r9
 8004d12:	4306      	orrs	r6, r0
 8004d14:	3568      	adds	r5, #104	; 0x68
 8004d16:	e7ee      	b.n	8004cf6 <_fwalk_reent+0x1a>

08004d18 <__swhatbuf_r>:
 8004d18:	b570      	push	{r4, r5, r6, lr}
 8004d1a:	460e      	mov	r6, r1
 8004d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d20:	2900      	cmp	r1, #0
 8004d22:	b090      	sub	sp, #64	; 0x40
 8004d24:	4614      	mov	r4, r2
 8004d26:	461d      	mov	r5, r3
 8004d28:	da07      	bge.n	8004d3a <__swhatbuf_r+0x22>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	602b      	str	r3, [r5, #0]
 8004d2e:	89b3      	ldrh	r3, [r6, #12]
 8004d30:	061a      	lsls	r2, r3, #24
 8004d32:	d410      	bmi.n	8004d56 <__swhatbuf_r+0x3e>
 8004d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d38:	e00e      	b.n	8004d58 <__swhatbuf_r+0x40>
 8004d3a:	aa01      	add	r2, sp, #4
 8004d3c:	f000 fc48 	bl	80055d0 <_fstat_r>
 8004d40:	2800      	cmp	r0, #0
 8004d42:	dbf2      	blt.n	8004d2a <__swhatbuf_r+0x12>
 8004d44:	9a02      	ldr	r2, [sp, #8]
 8004d46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d4e:	425a      	negs	r2, r3
 8004d50:	415a      	adcs	r2, r3
 8004d52:	602a      	str	r2, [r5, #0]
 8004d54:	e7ee      	b.n	8004d34 <__swhatbuf_r+0x1c>
 8004d56:	2340      	movs	r3, #64	; 0x40
 8004d58:	2000      	movs	r0, #0
 8004d5a:	6023      	str	r3, [r4, #0]
 8004d5c:	b010      	add	sp, #64	; 0x40
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}

08004d60 <__smakebuf_r>:
 8004d60:	898b      	ldrh	r3, [r1, #12]
 8004d62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d64:	079d      	lsls	r5, r3, #30
 8004d66:	4606      	mov	r6, r0
 8004d68:	460c      	mov	r4, r1
 8004d6a:	d507      	bpl.n	8004d7c <__smakebuf_r+0x1c>
 8004d6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	6123      	str	r3, [r4, #16]
 8004d74:	2301      	movs	r3, #1
 8004d76:	6163      	str	r3, [r4, #20]
 8004d78:	b002      	add	sp, #8
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
 8004d7c:	ab01      	add	r3, sp, #4
 8004d7e:	466a      	mov	r2, sp
 8004d80:	f7ff ffca 	bl	8004d18 <__swhatbuf_r>
 8004d84:	9900      	ldr	r1, [sp, #0]
 8004d86:	4605      	mov	r5, r0
 8004d88:	4630      	mov	r0, r6
 8004d8a:	f000 f877 	bl	8004e7c <_malloc_r>
 8004d8e:	b948      	cbnz	r0, 8004da4 <__smakebuf_r+0x44>
 8004d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d94:	059a      	lsls	r2, r3, #22
 8004d96:	d4ef      	bmi.n	8004d78 <__smakebuf_r+0x18>
 8004d98:	f023 0303 	bic.w	r3, r3, #3
 8004d9c:	f043 0302 	orr.w	r3, r3, #2
 8004da0:	81a3      	strh	r3, [r4, #12]
 8004da2:	e7e3      	b.n	8004d6c <__smakebuf_r+0xc>
 8004da4:	4b0d      	ldr	r3, [pc, #52]	; (8004ddc <__smakebuf_r+0x7c>)
 8004da6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004da8:	89a3      	ldrh	r3, [r4, #12]
 8004daa:	6020      	str	r0, [r4, #0]
 8004dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db0:	81a3      	strh	r3, [r4, #12]
 8004db2:	9b00      	ldr	r3, [sp, #0]
 8004db4:	6163      	str	r3, [r4, #20]
 8004db6:	9b01      	ldr	r3, [sp, #4]
 8004db8:	6120      	str	r0, [r4, #16]
 8004dba:	b15b      	cbz	r3, 8004dd4 <__smakebuf_r+0x74>
 8004dbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	f000 fc17 	bl	80055f4 <_isatty_r>
 8004dc6:	b128      	cbz	r0, 8004dd4 <__smakebuf_r+0x74>
 8004dc8:	89a3      	ldrh	r3, [r4, #12]
 8004dca:	f023 0303 	bic.w	r3, r3, #3
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	81a3      	strh	r3, [r4, #12]
 8004dd4:	89a3      	ldrh	r3, [r4, #12]
 8004dd6:	431d      	orrs	r5, r3
 8004dd8:	81a5      	strh	r5, [r4, #12]
 8004dda:	e7cd      	b.n	8004d78 <__smakebuf_r+0x18>
 8004ddc:	08004b85 	.word	0x08004b85

08004de0 <_free_r>:
 8004de0:	b538      	push	{r3, r4, r5, lr}
 8004de2:	4605      	mov	r5, r0
 8004de4:	2900      	cmp	r1, #0
 8004de6:	d045      	beq.n	8004e74 <_free_r+0x94>
 8004de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dec:	1f0c      	subs	r4, r1, #4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	bfb8      	it	lt
 8004df2:	18e4      	addlt	r4, r4, r3
 8004df4:	f000 fc20 	bl	8005638 <__malloc_lock>
 8004df8:	4a1f      	ldr	r2, [pc, #124]	; (8004e78 <_free_r+0x98>)
 8004dfa:	6813      	ldr	r3, [r2, #0]
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	b933      	cbnz	r3, 8004e0e <_free_r+0x2e>
 8004e00:	6063      	str	r3, [r4, #4]
 8004e02:	6014      	str	r4, [r2, #0]
 8004e04:	4628      	mov	r0, r5
 8004e06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e0a:	f000 bc16 	b.w	800563a <__malloc_unlock>
 8004e0e:	42a3      	cmp	r3, r4
 8004e10:	d90c      	bls.n	8004e2c <_free_r+0x4c>
 8004e12:	6821      	ldr	r1, [r4, #0]
 8004e14:	1862      	adds	r2, r4, r1
 8004e16:	4293      	cmp	r3, r2
 8004e18:	bf04      	itt	eq
 8004e1a:	681a      	ldreq	r2, [r3, #0]
 8004e1c:	685b      	ldreq	r3, [r3, #4]
 8004e1e:	6063      	str	r3, [r4, #4]
 8004e20:	bf04      	itt	eq
 8004e22:	1852      	addeq	r2, r2, r1
 8004e24:	6022      	streq	r2, [r4, #0]
 8004e26:	6004      	str	r4, [r0, #0]
 8004e28:	e7ec      	b.n	8004e04 <_free_r+0x24>
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	b10a      	cbz	r2, 8004e34 <_free_r+0x54>
 8004e30:	42a2      	cmp	r2, r4
 8004e32:	d9fa      	bls.n	8004e2a <_free_r+0x4a>
 8004e34:	6819      	ldr	r1, [r3, #0]
 8004e36:	1858      	adds	r0, r3, r1
 8004e38:	42a0      	cmp	r0, r4
 8004e3a:	d10b      	bne.n	8004e54 <_free_r+0x74>
 8004e3c:	6820      	ldr	r0, [r4, #0]
 8004e3e:	4401      	add	r1, r0
 8004e40:	1858      	adds	r0, r3, r1
 8004e42:	4282      	cmp	r2, r0
 8004e44:	6019      	str	r1, [r3, #0]
 8004e46:	d1dd      	bne.n	8004e04 <_free_r+0x24>
 8004e48:	6810      	ldr	r0, [r2, #0]
 8004e4a:	6852      	ldr	r2, [r2, #4]
 8004e4c:	605a      	str	r2, [r3, #4]
 8004e4e:	4401      	add	r1, r0
 8004e50:	6019      	str	r1, [r3, #0]
 8004e52:	e7d7      	b.n	8004e04 <_free_r+0x24>
 8004e54:	d902      	bls.n	8004e5c <_free_r+0x7c>
 8004e56:	230c      	movs	r3, #12
 8004e58:	602b      	str	r3, [r5, #0]
 8004e5a:	e7d3      	b.n	8004e04 <_free_r+0x24>
 8004e5c:	6820      	ldr	r0, [r4, #0]
 8004e5e:	1821      	adds	r1, r4, r0
 8004e60:	428a      	cmp	r2, r1
 8004e62:	bf04      	itt	eq
 8004e64:	6811      	ldreq	r1, [r2, #0]
 8004e66:	6852      	ldreq	r2, [r2, #4]
 8004e68:	6062      	str	r2, [r4, #4]
 8004e6a:	bf04      	itt	eq
 8004e6c:	1809      	addeq	r1, r1, r0
 8004e6e:	6021      	streq	r1, [r4, #0]
 8004e70:	605c      	str	r4, [r3, #4]
 8004e72:	e7c7      	b.n	8004e04 <_free_r+0x24>
 8004e74:	bd38      	pop	{r3, r4, r5, pc}
 8004e76:	bf00      	nop
 8004e78:	20000490 	.word	0x20000490

08004e7c <_malloc_r>:
 8004e7c:	b570      	push	{r4, r5, r6, lr}
 8004e7e:	1ccd      	adds	r5, r1, #3
 8004e80:	f025 0503 	bic.w	r5, r5, #3
 8004e84:	3508      	adds	r5, #8
 8004e86:	2d0c      	cmp	r5, #12
 8004e88:	bf38      	it	cc
 8004e8a:	250c      	movcc	r5, #12
 8004e8c:	2d00      	cmp	r5, #0
 8004e8e:	4606      	mov	r6, r0
 8004e90:	db01      	blt.n	8004e96 <_malloc_r+0x1a>
 8004e92:	42a9      	cmp	r1, r5
 8004e94:	d903      	bls.n	8004e9e <_malloc_r+0x22>
 8004e96:	230c      	movs	r3, #12
 8004e98:	6033      	str	r3, [r6, #0]
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	bd70      	pop	{r4, r5, r6, pc}
 8004e9e:	f000 fbcb 	bl	8005638 <__malloc_lock>
 8004ea2:	4a23      	ldr	r2, [pc, #140]	; (8004f30 <_malloc_r+0xb4>)
 8004ea4:	6814      	ldr	r4, [r2, #0]
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	b991      	cbnz	r1, 8004ed0 <_malloc_r+0x54>
 8004eaa:	4c22      	ldr	r4, [pc, #136]	; (8004f34 <_malloc_r+0xb8>)
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	b91b      	cbnz	r3, 8004eb8 <_malloc_r+0x3c>
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	f000 fb17 	bl	80054e4 <_sbrk_r>
 8004eb6:	6020      	str	r0, [r4, #0]
 8004eb8:	4629      	mov	r1, r5
 8004eba:	4630      	mov	r0, r6
 8004ebc:	f000 fb12 	bl	80054e4 <_sbrk_r>
 8004ec0:	1c43      	adds	r3, r0, #1
 8004ec2:	d126      	bne.n	8004f12 <_malloc_r+0x96>
 8004ec4:	230c      	movs	r3, #12
 8004ec6:	6033      	str	r3, [r6, #0]
 8004ec8:	4630      	mov	r0, r6
 8004eca:	f000 fbb6 	bl	800563a <__malloc_unlock>
 8004ece:	e7e4      	b.n	8004e9a <_malloc_r+0x1e>
 8004ed0:	680b      	ldr	r3, [r1, #0]
 8004ed2:	1b5b      	subs	r3, r3, r5
 8004ed4:	d41a      	bmi.n	8004f0c <_malloc_r+0x90>
 8004ed6:	2b0b      	cmp	r3, #11
 8004ed8:	d90f      	bls.n	8004efa <_malloc_r+0x7e>
 8004eda:	600b      	str	r3, [r1, #0]
 8004edc:	50cd      	str	r5, [r1, r3]
 8004ede:	18cc      	adds	r4, r1, r3
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f000 fbaa 	bl	800563a <__malloc_unlock>
 8004ee6:	f104 000b 	add.w	r0, r4, #11
 8004eea:	1d23      	adds	r3, r4, #4
 8004eec:	f020 0007 	bic.w	r0, r0, #7
 8004ef0:	1ac3      	subs	r3, r0, r3
 8004ef2:	d01b      	beq.n	8004f2c <_malloc_r+0xb0>
 8004ef4:	425a      	negs	r2, r3
 8004ef6:	50e2      	str	r2, [r4, r3]
 8004ef8:	bd70      	pop	{r4, r5, r6, pc}
 8004efa:	428c      	cmp	r4, r1
 8004efc:	bf0d      	iteet	eq
 8004efe:	6863      	ldreq	r3, [r4, #4]
 8004f00:	684b      	ldrne	r3, [r1, #4]
 8004f02:	6063      	strne	r3, [r4, #4]
 8004f04:	6013      	streq	r3, [r2, #0]
 8004f06:	bf18      	it	ne
 8004f08:	460c      	movne	r4, r1
 8004f0a:	e7e9      	b.n	8004ee0 <_malloc_r+0x64>
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	6849      	ldr	r1, [r1, #4]
 8004f10:	e7ca      	b.n	8004ea8 <_malloc_r+0x2c>
 8004f12:	1cc4      	adds	r4, r0, #3
 8004f14:	f024 0403 	bic.w	r4, r4, #3
 8004f18:	42a0      	cmp	r0, r4
 8004f1a:	d005      	beq.n	8004f28 <_malloc_r+0xac>
 8004f1c:	1a21      	subs	r1, r4, r0
 8004f1e:	4630      	mov	r0, r6
 8004f20:	f000 fae0 	bl	80054e4 <_sbrk_r>
 8004f24:	3001      	adds	r0, #1
 8004f26:	d0cd      	beq.n	8004ec4 <_malloc_r+0x48>
 8004f28:	6025      	str	r5, [r4, #0]
 8004f2a:	e7d9      	b.n	8004ee0 <_malloc_r+0x64>
 8004f2c:	bd70      	pop	{r4, r5, r6, pc}
 8004f2e:	bf00      	nop
 8004f30:	20000490 	.word	0x20000490
 8004f34:	20000494 	.word	0x20000494

08004f38 <__sfputc_r>:
 8004f38:	6893      	ldr	r3, [r2, #8]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	b410      	push	{r4}
 8004f40:	6093      	str	r3, [r2, #8]
 8004f42:	da09      	bge.n	8004f58 <__sfputc_r+0x20>
 8004f44:	6994      	ldr	r4, [r2, #24]
 8004f46:	42a3      	cmp	r3, r4
 8004f48:	db02      	blt.n	8004f50 <__sfputc_r+0x18>
 8004f4a:	b2cb      	uxtb	r3, r1
 8004f4c:	2b0a      	cmp	r3, #10
 8004f4e:	d103      	bne.n	8004f58 <__sfputc_r+0x20>
 8004f50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f54:	f7ff bca4 	b.w	80048a0 <__swbuf_r>
 8004f58:	6813      	ldr	r3, [r2, #0]
 8004f5a:	1c58      	adds	r0, r3, #1
 8004f5c:	6010      	str	r0, [r2, #0]
 8004f5e:	7019      	strb	r1, [r3, #0]
 8004f60:	b2c8      	uxtb	r0, r1
 8004f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <__sfputs_r>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	4606      	mov	r6, r0
 8004f6c:	460f      	mov	r7, r1
 8004f6e:	4614      	mov	r4, r2
 8004f70:	18d5      	adds	r5, r2, r3
 8004f72:	42ac      	cmp	r4, r5
 8004f74:	d101      	bne.n	8004f7a <__sfputs_r+0x12>
 8004f76:	2000      	movs	r0, #0
 8004f78:	e007      	b.n	8004f8a <__sfputs_r+0x22>
 8004f7a:	463a      	mov	r2, r7
 8004f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f80:	4630      	mov	r0, r6
 8004f82:	f7ff ffd9 	bl	8004f38 <__sfputc_r>
 8004f86:	1c43      	adds	r3, r0, #1
 8004f88:	d1f3      	bne.n	8004f72 <__sfputs_r+0xa>
 8004f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004f8c <_vfiprintf_r>:
 8004f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f90:	b09d      	sub	sp, #116	; 0x74
 8004f92:	460c      	mov	r4, r1
 8004f94:	4617      	mov	r7, r2
 8004f96:	9303      	str	r3, [sp, #12]
 8004f98:	4606      	mov	r6, r0
 8004f9a:	b118      	cbz	r0, 8004fa4 <_vfiprintf_r+0x18>
 8004f9c:	6983      	ldr	r3, [r0, #24]
 8004f9e:	b90b      	cbnz	r3, 8004fa4 <_vfiprintf_r+0x18>
 8004fa0:	f7ff fe30 	bl	8004c04 <__sinit>
 8004fa4:	4b7c      	ldr	r3, [pc, #496]	; (8005198 <_vfiprintf_r+0x20c>)
 8004fa6:	429c      	cmp	r4, r3
 8004fa8:	d157      	bne.n	800505a <_vfiprintf_r+0xce>
 8004faa:	6874      	ldr	r4, [r6, #4]
 8004fac:	89a3      	ldrh	r3, [r4, #12]
 8004fae:	0718      	lsls	r0, r3, #28
 8004fb0:	d55d      	bpl.n	800506e <_vfiprintf_r+0xe2>
 8004fb2:	6923      	ldr	r3, [r4, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d05a      	beq.n	800506e <_vfiprintf_r+0xe2>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	9309      	str	r3, [sp, #36]	; 0x24
 8004fbc:	2320      	movs	r3, #32
 8004fbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fc2:	2330      	movs	r3, #48	; 0x30
 8004fc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fc8:	f04f 0b01 	mov.w	fp, #1
 8004fcc:	46b8      	mov	r8, r7
 8004fce:	4645      	mov	r5, r8
 8004fd0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d155      	bne.n	8005084 <_vfiprintf_r+0xf8>
 8004fd8:	ebb8 0a07 	subs.w	sl, r8, r7
 8004fdc:	d00b      	beq.n	8004ff6 <_vfiprintf_r+0x6a>
 8004fde:	4653      	mov	r3, sl
 8004fe0:	463a      	mov	r2, r7
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	f7ff ffbf 	bl	8004f68 <__sfputs_r>
 8004fea:	3001      	adds	r0, #1
 8004fec:	f000 80c4 	beq.w	8005178 <_vfiprintf_r+0x1ec>
 8004ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ff2:	4453      	add	r3, sl
 8004ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ff6:	f898 3000 	ldrb.w	r3, [r8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 80bc 	beq.w	8005178 <_vfiprintf_r+0x1ec>
 8005000:	2300      	movs	r3, #0
 8005002:	f04f 32ff 	mov.w	r2, #4294967295
 8005006:	9304      	str	r3, [sp, #16]
 8005008:	9307      	str	r3, [sp, #28]
 800500a:	9205      	str	r2, [sp, #20]
 800500c:	9306      	str	r3, [sp, #24]
 800500e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005012:	931a      	str	r3, [sp, #104]	; 0x68
 8005014:	2205      	movs	r2, #5
 8005016:	7829      	ldrb	r1, [r5, #0]
 8005018:	4860      	ldr	r0, [pc, #384]	; (800519c <_vfiprintf_r+0x210>)
 800501a:	f7fb f8e9 	bl	80001f0 <memchr>
 800501e:	f105 0801 	add.w	r8, r5, #1
 8005022:	9b04      	ldr	r3, [sp, #16]
 8005024:	2800      	cmp	r0, #0
 8005026:	d131      	bne.n	800508c <_vfiprintf_r+0x100>
 8005028:	06d9      	lsls	r1, r3, #27
 800502a:	bf44      	itt	mi
 800502c:	2220      	movmi	r2, #32
 800502e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005032:	071a      	lsls	r2, r3, #28
 8005034:	bf44      	itt	mi
 8005036:	222b      	movmi	r2, #43	; 0x2b
 8005038:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800503c:	782a      	ldrb	r2, [r5, #0]
 800503e:	2a2a      	cmp	r2, #42	; 0x2a
 8005040:	d02c      	beq.n	800509c <_vfiprintf_r+0x110>
 8005042:	9a07      	ldr	r2, [sp, #28]
 8005044:	2100      	movs	r1, #0
 8005046:	200a      	movs	r0, #10
 8005048:	46a8      	mov	r8, r5
 800504a:	3501      	adds	r5, #1
 800504c:	f898 3000 	ldrb.w	r3, [r8]
 8005050:	3b30      	subs	r3, #48	; 0x30
 8005052:	2b09      	cmp	r3, #9
 8005054:	d96d      	bls.n	8005132 <_vfiprintf_r+0x1a6>
 8005056:	b371      	cbz	r1, 80050b6 <_vfiprintf_r+0x12a>
 8005058:	e026      	b.n	80050a8 <_vfiprintf_r+0x11c>
 800505a:	4b51      	ldr	r3, [pc, #324]	; (80051a0 <_vfiprintf_r+0x214>)
 800505c:	429c      	cmp	r4, r3
 800505e:	d101      	bne.n	8005064 <_vfiprintf_r+0xd8>
 8005060:	68b4      	ldr	r4, [r6, #8]
 8005062:	e7a3      	b.n	8004fac <_vfiprintf_r+0x20>
 8005064:	4b4f      	ldr	r3, [pc, #316]	; (80051a4 <_vfiprintf_r+0x218>)
 8005066:	429c      	cmp	r4, r3
 8005068:	bf08      	it	eq
 800506a:	68f4      	ldreq	r4, [r6, #12]
 800506c:	e79e      	b.n	8004fac <_vfiprintf_r+0x20>
 800506e:	4621      	mov	r1, r4
 8005070:	4630      	mov	r0, r6
 8005072:	f7ff fc67 	bl	8004944 <__swsetup_r>
 8005076:	2800      	cmp	r0, #0
 8005078:	d09e      	beq.n	8004fb8 <_vfiprintf_r+0x2c>
 800507a:	f04f 30ff 	mov.w	r0, #4294967295
 800507e:	b01d      	add	sp, #116	; 0x74
 8005080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005084:	2b25      	cmp	r3, #37	; 0x25
 8005086:	d0a7      	beq.n	8004fd8 <_vfiprintf_r+0x4c>
 8005088:	46a8      	mov	r8, r5
 800508a:	e7a0      	b.n	8004fce <_vfiprintf_r+0x42>
 800508c:	4a43      	ldr	r2, [pc, #268]	; (800519c <_vfiprintf_r+0x210>)
 800508e:	1a80      	subs	r0, r0, r2
 8005090:	fa0b f000 	lsl.w	r0, fp, r0
 8005094:	4318      	orrs	r0, r3
 8005096:	9004      	str	r0, [sp, #16]
 8005098:	4645      	mov	r5, r8
 800509a:	e7bb      	b.n	8005014 <_vfiprintf_r+0x88>
 800509c:	9a03      	ldr	r2, [sp, #12]
 800509e:	1d11      	adds	r1, r2, #4
 80050a0:	6812      	ldr	r2, [r2, #0]
 80050a2:	9103      	str	r1, [sp, #12]
 80050a4:	2a00      	cmp	r2, #0
 80050a6:	db01      	blt.n	80050ac <_vfiprintf_r+0x120>
 80050a8:	9207      	str	r2, [sp, #28]
 80050aa:	e004      	b.n	80050b6 <_vfiprintf_r+0x12a>
 80050ac:	4252      	negs	r2, r2
 80050ae:	f043 0302 	orr.w	r3, r3, #2
 80050b2:	9207      	str	r2, [sp, #28]
 80050b4:	9304      	str	r3, [sp, #16]
 80050b6:	f898 3000 	ldrb.w	r3, [r8]
 80050ba:	2b2e      	cmp	r3, #46	; 0x2e
 80050bc:	d110      	bne.n	80050e0 <_vfiprintf_r+0x154>
 80050be:	f898 3001 	ldrb.w	r3, [r8, #1]
 80050c2:	2b2a      	cmp	r3, #42	; 0x2a
 80050c4:	f108 0101 	add.w	r1, r8, #1
 80050c8:	d137      	bne.n	800513a <_vfiprintf_r+0x1ae>
 80050ca:	9b03      	ldr	r3, [sp, #12]
 80050cc:	1d1a      	adds	r2, r3, #4
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	9203      	str	r2, [sp, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	bfb8      	it	lt
 80050d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80050da:	f108 0802 	add.w	r8, r8, #2
 80050de:	9305      	str	r3, [sp, #20]
 80050e0:	4d31      	ldr	r5, [pc, #196]	; (80051a8 <_vfiprintf_r+0x21c>)
 80050e2:	f898 1000 	ldrb.w	r1, [r8]
 80050e6:	2203      	movs	r2, #3
 80050e8:	4628      	mov	r0, r5
 80050ea:	f7fb f881 	bl	80001f0 <memchr>
 80050ee:	b140      	cbz	r0, 8005102 <_vfiprintf_r+0x176>
 80050f0:	2340      	movs	r3, #64	; 0x40
 80050f2:	1b40      	subs	r0, r0, r5
 80050f4:	fa03 f000 	lsl.w	r0, r3, r0
 80050f8:	9b04      	ldr	r3, [sp, #16]
 80050fa:	4303      	orrs	r3, r0
 80050fc:	9304      	str	r3, [sp, #16]
 80050fe:	f108 0801 	add.w	r8, r8, #1
 8005102:	f898 1000 	ldrb.w	r1, [r8]
 8005106:	4829      	ldr	r0, [pc, #164]	; (80051ac <_vfiprintf_r+0x220>)
 8005108:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800510c:	2206      	movs	r2, #6
 800510e:	f108 0701 	add.w	r7, r8, #1
 8005112:	f7fb f86d 	bl	80001f0 <memchr>
 8005116:	2800      	cmp	r0, #0
 8005118:	d034      	beq.n	8005184 <_vfiprintf_r+0x1f8>
 800511a:	4b25      	ldr	r3, [pc, #148]	; (80051b0 <_vfiprintf_r+0x224>)
 800511c:	bb03      	cbnz	r3, 8005160 <_vfiprintf_r+0x1d4>
 800511e:	9b03      	ldr	r3, [sp, #12]
 8005120:	3307      	adds	r3, #7
 8005122:	f023 0307 	bic.w	r3, r3, #7
 8005126:	3308      	adds	r3, #8
 8005128:	9303      	str	r3, [sp, #12]
 800512a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800512c:	444b      	add	r3, r9
 800512e:	9309      	str	r3, [sp, #36]	; 0x24
 8005130:	e74c      	b.n	8004fcc <_vfiprintf_r+0x40>
 8005132:	fb00 3202 	mla	r2, r0, r2, r3
 8005136:	2101      	movs	r1, #1
 8005138:	e786      	b.n	8005048 <_vfiprintf_r+0xbc>
 800513a:	2300      	movs	r3, #0
 800513c:	9305      	str	r3, [sp, #20]
 800513e:	4618      	mov	r0, r3
 8005140:	250a      	movs	r5, #10
 8005142:	4688      	mov	r8, r1
 8005144:	3101      	adds	r1, #1
 8005146:	f898 2000 	ldrb.w	r2, [r8]
 800514a:	3a30      	subs	r2, #48	; 0x30
 800514c:	2a09      	cmp	r2, #9
 800514e:	d903      	bls.n	8005158 <_vfiprintf_r+0x1cc>
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0c5      	beq.n	80050e0 <_vfiprintf_r+0x154>
 8005154:	9005      	str	r0, [sp, #20]
 8005156:	e7c3      	b.n	80050e0 <_vfiprintf_r+0x154>
 8005158:	fb05 2000 	mla	r0, r5, r0, r2
 800515c:	2301      	movs	r3, #1
 800515e:	e7f0      	b.n	8005142 <_vfiprintf_r+0x1b6>
 8005160:	ab03      	add	r3, sp, #12
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	4622      	mov	r2, r4
 8005166:	4b13      	ldr	r3, [pc, #76]	; (80051b4 <_vfiprintf_r+0x228>)
 8005168:	a904      	add	r1, sp, #16
 800516a:	4630      	mov	r0, r6
 800516c:	f3af 8000 	nop.w
 8005170:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005174:	4681      	mov	r9, r0
 8005176:	d1d8      	bne.n	800512a <_vfiprintf_r+0x19e>
 8005178:	89a3      	ldrh	r3, [r4, #12]
 800517a:	065b      	lsls	r3, r3, #25
 800517c:	f53f af7d 	bmi.w	800507a <_vfiprintf_r+0xee>
 8005180:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005182:	e77c      	b.n	800507e <_vfiprintf_r+0xf2>
 8005184:	ab03      	add	r3, sp, #12
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	4622      	mov	r2, r4
 800518a:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <_vfiprintf_r+0x228>)
 800518c:	a904      	add	r1, sp, #16
 800518e:	4630      	mov	r0, r6
 8005190:	f000 f888 	bl	80052a4 <_printf_i>
 8005194:	e7ec      	b.n	8005170 <_vfiprintf_r+0x1e4>
 8005196:	bf00      	nop
 8005198:	080061a8 	.word	0x080061a8
 800519c:	080061e8 	.word	0x080061e8
 80051a0:	080061c8 	.word	0x080061c8
 80051a4:	08006188 	.word	0x08006188
 80051a8:	080061ee 	.word	0x080061ee
 80051ac:	080061f2 	.word	0x080061f2
 80051b0:	00000000 	.word	0x00000000
 80051b4:	08004f69 	.word	0x08004f69

080051b8 <_printf_common>:
 80051b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051bc:	4691      	mov	r9, r2
 80051be:	461f      	mov	r7, r3
 80051c0:	688a      	ldr	r2, [r1, #8]
 80051c2:	690b      	ldr	r3, [r1, #16]
 80051c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051c8:	4293      	cmp	r3, r2
 80051ca:	bfb8      	it	lt
 80051cc:	4613      	movlt	r3, r2
 80051ce:	f8c9 3000 	str.w	r3, [r9]
 80051d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051d6:	4606      	mov	r6, r0
 80051d8:	460c      	mov	r4, r1
 80051da:	b112      	cbz	r2, 80051e2 <_printf_common+0x2a>
 80051dc:	3301      	adds	r3, #1
 80051de:	f8c9 3000 	str.w	r3, [r9]
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	0699      	lsls	r1, r3, #26
 80051e6:	bf42      	ittt	mi
 80051e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80051ec:	3302      	addmi	r3, #2
 80051ee:	f8c9 3000 	strmi.w	r3, [r9]
 80051f2:	6825      	ldr	r5, [r4, #0]
 80051f4:	f015 0506 	ands.w	r5, r5, #6
 80051f8:	d107      	bne.n	800520a <_printf_common+0x52>
 80051fa:	f104 0a19 	add.w	sl, r4, #25
 80051fe:	68e3      	ldr	r3, [r4, #12]
 8005200:	f8d9 2000 	ldr.w	r2, [r9]
 8005204:	1a9b      	subs	r3, r3, r2
 8005206:	429d      	cmp	r5, r3
 8005208:	db29      	blt.n	800525e <_printf_common+0xa6>
 800520a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800520e:	6822      	ldr	r2, [r4, #0]
 8005210:	3300      	adds	r3, #0
 8005212:	bf18      	it	ne
 8005214:	2301      	movne	r3, #1
 8005216:	0692      	lsls	r2, r2, #26
 8005218:	d42e      	bmi.n	8005278 <_printf_common+0xc0>
 800521a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800521e:	4639      	mov	r1, r7
 8005220:	4630      	mov	r0, r6
 8005222:	47c0      	blx	r8
 8005224:	3001      	adds	r0, #1
 8005226:	d021      	beq.n	800526c <_printf_common+0xb4>
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	68e5      	ldr	r5, [r4, #12]
 800522c:	f8d9 2000 	ldr.w	r2, [r9]
 8005230:	f003 0306 	and.w	r3, r3, #6
 8005234:	2b04      	cmp	r3, #4
 8005236:	bf08      	it	eq
 8005238:	1aad      	subeq	r5, r5, r2
 800523a:	68a3      	ldr	r3, [r4, #8]
 800523c:	6922      	ldr	r2, [r4, #16]
 800523e:	bf0c      	ite	eq
 8005240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005244:	2500      	movne	r5, #0
 8005246:	4293      	cmp	r3, r2
 8005248:	bfc4      	itt	gt
 800524a:	1a9b      	subgt	r3, r3, r2
 800524c:	18ed      	addgt	r5, r5, r3
 800524e:	f04f 0900 	mov.w	r9, #0
 8005252:	341a      	adds	r4, #26
 8005254:	454d      	cmp	r5, r9
 8005256:	d11b      	bne.n	8005290 <_printf_common+0xd8>
 8005258:	2000      	movs	r0, #0
 800525a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800525e:	2301      	movs	r3, #1
 8005260:	4652      	mov	r2, sl
 8005262:	4639      	mov	r1, r7
 8005264:	4630      	mov	r0, r6
 8005266:	47c0      	blx	r8
 8005268:	3001      	adds	r0, #1
 800526a:	d103      	bne.n	8005274 <_printf_common+0xbc>
 800526c:	f04f 30ff 	mov.w	r0, #4294967295
 8005270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005274:	3501      	adds	r5, #1
 8005276:	e7c2      	b.n	80051fe <_printf_common+0x46>
 8005278:	18e1      	adds	r1, r4, r3
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	2030      	movs	r0, #48	; 0x30
 800527e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005282:	4422      	add	r2, r4
 8005284:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005288:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800528c:	3302      	adds	r3, #2
 800528e:	e7c4      	b.n	800521a <_printf_common+0x62>
 8005290:	2301      	movs	r3, #1
 8005292:	4622      	mov	r2, r4
 8005294:	4639      	mov	r1, r7
 8005296:	4630      	mov	r0, r6
 8005298:	47c0      	blx	r8
 800529a:	3001      	adds	r0, #1
 800529c:	d0e6      	beq.n	800526c <_printf_common+0xb4>
 800529e:	f109 0901 	add.w	r9, r9, #1
 80052a2:	e7d7      	b.n	8005254 <_printf_common+0x9c>

080052a4 <_printf_i>:
 80052a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052a8:	4617      	mov	r7, r2
 80052aa:	7e0a      	ldrb	r2, [r1, #24]
 80052ac:	b085      	sub	sp, #20
 80052ae:	2a6e      	cmp	r2, #110	; 0x6e
 80052b0:	4698      	mov	r8, r3
 80052b2:	4606      	mov	r6, r0
 80052b4:	460c      	mov	r4, r1
 80052b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052b8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80052bc:	f000 80bc 	beq.w	8005438 <_printf_i+0x194>
 80052c0:	d81a      	bhi.n	80052f8 <_printf_i+0x54>
 80052c2:	2a63      	cmp	r2, #99	; 0x63
 80052c4:	d02e      	beq.n	8005324 <_printf_i+0x80>
 80052c6:	d80a      	bhi.n	80052de <_printf_i+0x3a>
 80052c8:	2a00      	cmp	r2, #0
 80052ca:	f000 80c8 	beq.w	800545e <_printf_i+0x1ba>
 80052ce:	2a58      	cmp	r2, #88	; 0x58
 80052d0:	f000 808a 	beq.w	80053e8 <_printf_i+0x144>
 80052d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052d8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80052dc:	e02a      	b.n	8005334 <_printf_i+0x90>
 80052de:	2a64      	cmp	r2, #100	; 0x64
 80052e0:	d001      	beq.n	80052e6 <_printf_i+0x42>
 80052e2:	2a69      	cmp	r2, #105	; 0x69
 80052e4:	d1f6      	bne.n	80052d4 <_printf_i+0x30>
 80052e6:	6821      	ldr	r1, [r4, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	f011 0f80 	tst.w	r1, #128	; 0x80
 80052ee:	d023      	beq.n	8005338 <_printf_i+0x94>
 80052f0:	1d11      	adds	r1, r2, #4
 80052f2:	6019      	str	r1, [r3, #0]
 80052f4:	6813      	ldr	r3, [r2, #0]
 80052f6:	e027      	b.n	8005348 <_printf_i+0xa4>
 80052f8:	2a73      	cmp	r2, #115	; 0x73
 80052fa:	f000 80b4 	beq.w	8005466 <_printf_i+0x1c2>
 80052fe:	d808      	bhi.n	8005312 <_printf_i+0x6e>
 8005300:	2a6f      	cmp	r2, #111	; 0x6f
 8005302:	d02a      	beq.n	800535a <_printf_i+0xb6>
 8005304:	2a70      	cmp	r2, #112	; 0x70
 8005306:	d1e5      	bne.n	80052d4 <_printf_i+0x30>
 8005308:	680a      	ldr	r2, [r1, #0]
 800530a:	f042 0220 	orr.w	r2, r2, #32
 800530e:	600a      	str	r2, [r1, #0]
 8005310:	e003      	b.n	800531a <_printf_i+0x76>
 8005312:	2a75      	cmp	r2, #117	; 0x75
 8005314:	d021      	beq.n	800535a <_printf_i+0xb6>
 8005316:	2a78      	cmp	r2, #120	; 0x78
 8005318:	d1dc      	bne.n	80052d4 <_printf_i+0x30>
 800531a:	2278      	movs	r2, #120	; 0x78
 800531c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005320:	496e      	ldr	r1, [pc, #440]	; (80054dc <_printf_i+0x238>)
 8005322:	e064      	b.n	80053ee <_printf_i+0x14a>
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800532a:	1d11      	adds	r1, r2, #4
 800532c:	6019      	str	r1, [r3, #0]
 800532e:	6813      	ldr	r3, [r2, #0]
 8005330:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005334:	2301      	movs	r3, #1
 8005336:	e0a3      	b.n	8005480 <_printf_i+0x1dc>
 8005338:	f011 0f40 	tst.w	r1, #64	; 0x40
 800533c:	f102 0104 	add.w	r1, r2, #4
 8005340:	6019      	str	r1, [r3, #0]
 8005342:	d0d7      	beq.n	80052f4 <_printf_i+0x50>
 8005344:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005348:	2b00      	cmp	r3, #0
 800534a:	da03      	bge.n	8005354 <_printf_i+0xb0>
 800534c:	222d      	movs	r2, #45	; 0x2d
 800534e:	425b      	negs	r3, r3
 8005350:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005354:	4962      	ldr	r1, [pc, #392]	; (80054e0 <_printf_i+0x23c>)
 8005356:	220a      	movs	r2, #10
 8005358:	e017      	b.n	800538a <_printf_i+0xe6>
 800535a:	6820      	ldr	r0, [r4, #0]
 800535c:	6819      	ldr	r1, [r3, #0]
 800535e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005362:	d003      	beq.n	800536c <_printf_i+0xc8>
 8005364:	1d08      	adds	r0, r1, #4
 8005366:	6018      	str	r0, [r3, #0]
 8005368:	680b      	ldr	r3, [r1, #0]
 800536a:	e006      	b.n	800537a <_printf_i+0xd6>
 800536c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005370:	f101 0004 	add.w	r0, r1, #4
 8005374:	6018      	str	r0, [r3, #0]
 8005376:	d0f7      	beq.n	8005368 <_printf_i+0xc4>
 8005378:	880b      	ldrh	r3, [r1, #0]
 800537a:	4959      	ldr	r1, [pc, #356]	; (80054e0 <_printf_i+0x23c>)
 800537c:	2a6f      	cmp	r2, #111	; 0x6f
 800537e:	bf14      	ite	ne
 8005380:	220a      	movne	r2, #10
 8005382:	2208      	moveq	r2, #8
 8005384:	2000      	movs	r0, #0
 8005386:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800538a:	6865      	ldr	r5, [r4, #4]
 800538c:	60a5      	str	r5, [r4, #8]
 800538e:	2d00      	cmp	r5, #0
 8005390:	f2c0 809c 	blt.w	80054cc <_printf_i+0x228>
 8005394:	6820      	ldr	r0, [r4, #0]
 8005396:	f020 0004 	bic.w	r0, r0, #4
 800539a:	6020      	str	r0, [r4, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d13f      	bne.n	8005420 <_printf_i+0x17c>
 80053a0:	2d00      	cmp	r5, #0
 80053a2:	f040 8095 	bne.w	80054d0 <_printf_i+0x22c>
 80053a6:	4675      	mov	r5, lr
 80053a8:	2a08      	cmp	r2, #8
 80053aa:	d10b      	bne.n	80053c4 <_printf_i+0x120>
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	07da      	lsls	r2, r3, #31
 80053b0:	d508      	bpl.n	80053c4 <_printf_i+0x120>
 80053b2:	6923      	ldr	r3, [r4, #16]
 80053b4:	6862      	ldr	r2, [r4, #4]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	bfde      	ittt	le
 80053ba:	2330      	movle	r3, #48	; 0x30
 80053bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053c4:	ebae 0305 	sub.w	r3, lr, r5
 80053c8:	6123      	str	r3, [r4, #16]
 80053ca:	f8cd 8000 	str.w	r8, [sp]
 80053ce:	463b      	mov	r3, r7
 80053d0:	aa03      	add	r2, sp, #12
 80053d2:	4621      	mov	r1, r4
 80053d4:	4630      	mov	r0, r6
 80053d6:	f7ff feef 	bl	80051b8 <_printf_common>
 80053da:	3001      	adds	r0, #1
 80053dc:	d155      	bne.n	800548a <_printf_i+0x1e6>
 80053de:	f04f 30ff 	mov.w	r0, #4294967295
 80053e2:	b005      	add	sp, #20
 80053e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053e8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80053ec:	493c      	ldr	r1, [pc, #240]	; (80054e0 <_printf_i+0x23c>)
 80053ee:	6822      	ldr	r2, [r4, #0]
 80053f0:	6818      	ldr	r0, [r3, #0]
 80053f2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80053f6:	f100 0504 	add.w	r5, r0, #4
 80053fa:	601d      	str	r5, [r3, #0]
 80053fc:	d001      	beq.n	8005402 <_printf_i+0x15e>
 80053fe:	6803      	ldr	r3, [r0, #0]
 8005400:	e002      	b.n	8005408 <_printf_i+0x164>
 8005402:	0655      	lsls	r5, r2, #25
 8005404:	d5fb      	bpl.n	80053fe <_printf_i+0x15a>
 8005406:	8803      	ldrh	r3, [r0, #0]
 8005408:	07d0      	lsls	r0, r2, #31
 800540a:	bf44      	itt	mi
 800540c:	f042 0220 	orrmi.w	r2, r2, #32
 8005410:	6022      	strmi	r2, [r4, #0]
 8005412:	b91b      	cbnz	r3, 800541c <_printf_i+0x178>
 8005414:	6822      	ldr	r2, [r4, #0]
 8005416:	f022 0220 	bic.w	r2, r2, #32
 800541a:	6022      	str	r2, [r4, #0]
 800541c:	2210      	movs	r2, #16
 800541e:	e7b1      	b.n	8005384 <_printf_i+0xe0>
 8005420:	4675      	mov	r5, lr
 8005422:	fbb3 f0f2 	udiv	r0, r3, r2
 8005426:	fb02 3310 	mls	r3, r2, r0, r3
 800542a:	5ccb      	ldrb	r3, [r1, r3]
 800542c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005430:	4603      	mov	r3, r0
 8005432:	2800      	cmp	r0, #0
 8005434:	d1f5      	bne.n	8005422 <_printf_i+0x17e>
 8005436:	e7b7      	b.n	80053a8 <_printf_i+0x104>
 8005438:	6808      	ldr	r0, [r1, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	6949      	ldr	r1, [r1, #20]
 800543e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005442:	d004      	beq.n	800544e <_printf_i+0x1aa>
 8005444:	1d10      	adds	r0, r2, #4
 8005446:	6018      	str	r0, [r3, #0]
 8005448:	6813      	ldr	r3, [r2, #0]
 800544a:	6019      	str	r1, [r3, #0]
 800544c:	e007      	b.n	800545e <_printf_i+0x1ba>
 800544e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005452:	f102 0004 	add.w	r0, r2, #4
 8005456:	6018      	str	r0, [r3, #0]
 8005458:	6813      	ldr	r3, [r2, #0]
 800545a:	d0f6      	beq.n	800544a <_printf_i+0x1a6>
 800545c:	8019      	strh	r1, [r3, #0]
 800545e:	2300      	movs	r3, #0
 8005460:	6123      	str	r3, [r4, #16]
 8005462:	4675      	mov	r5, lr
 8005464:	e7b1      	b.n	80053ca <_printf_i+0x126>
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	1d11      	adds	r1, r2, #4
 800546a:	6019      	str	r1, [r3, #0]
 800546c:	6815      	ldr	r5, [r2, #0]
 800546e:	6862      	ldr	r2, [r4, #4]
 8005470:	2100      	movs	r1, #0
 8005472:	4628      	mov	r0, r5
 8005474:	f7fa febc 	bl	80001f0 <memchr>
 8005478:	b108      	cbz	r0, 800547e <_printf_i+0x1da>
 800547a:	1b40      	subs	r0, r0, r5
 800547c:	6060      	str	r0, [r4, #4]
 800547e:	6863      	ldr	r3, [r4, #4]
 8005480:	6123      	str	r3, [r4, #16]
 8005482:	2300      	movs	r3, #0
 8005484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005488:	e79f      	b.n	80053ca <_printf_i+0x126>
 800548a:	6923      	ldr	r3, [r4, #16]
 800548c:	462a      	mov	r2, r5
 800548e:	4639      	mov	r1, r7
 8005490:	4630      	mov	r0, r6
 8005492:	47c0      	blx	r8
 8005494:	3001      	adds	r0, #1
 8005496:	d0a2      	beq.n	80053de <_printf_i+0x13a>
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	079b      	lsls	r3, r3, #30
 800549c:	d507      	bpl.n	80054ae <_printf_i+0x20a>
 800549e:	2500      	movs	r5, #0
 80054a0:	f104 0919 	add.w	r9, r4, #25
 80054a4:	68e3      	ldr	r3, [r4, #12]
 80054a6:	9a03      	ldr	r2, [sp, #12]
 80054a8:	1a9b      	subs	r3, r3, r2
 80054aa:	429d      	cmp	r5, r3
 80054ac:	db05      	blt.n	80054ba <_printf_i+0x216>
 80054ae:	68e0      	ldr	r0, [r4, #12]
 80054b0:	9b03      	ldr	r3, [sp, #12]
 80054b2:	4298      	cmp	r0, r3
 80054b4:	bfb8      	it	lt
 80054b6:	4618      	movlt	r0, r3
 80054b8:	e793      	b.n	80053e2 <_printf_i+0x13e>
 80054ba:	2301      	movs	r3, #1
 80054bc:	464a      	mov	r2, r9
 80054be:	4639      	mov	r1, r7
 80054c0:	4630      	mov	r0, r6
 80054c2:	47c0      	blx	r8
 80054c4:	3001      	adds	r0, #1
 80054c6:	d08a      	beq.n	80053de <_printf_i+0x13a>
 80054c8:	3501      	adds	r5, #1
 80054ca:	e7eb      	b.n	80054a4 <_printf_i+0x200>
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1a7      	bne.n	8005420 <_printf_i+0x17c>
 80054d0:	780b      	ldrb	r3, [r1, #0]
 80054d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054da:	e765      	b.n	80053a8 <_printf_i+0x104>
 80054dc:	0800620a 	.word	0x0800620a
 80054e0:	080061f9 	.word	0x080061f9

080054e4 <_sbrk_r>:
 80054e4:	b538      	push	{r3, r4, r5, lr}
 80054e6:	4c06      	ldr	r4, [pc, #24]	; (8005500 <_sbrk_r+0x1c>)
 80054e8:	2300      	movs	r3, #0
 80054ea:	4605      	mov	r5, r0
 80054ec:	4608      	mov	r0, r1
 80054ee:	6023      	str	r3, [r4, #0]
 80054f0:	f7fe fdb8 	bl	8004064 <_sbrk>
 80054f4:	1c43      	adds	r3, r0, #1
 80054f6:	d102      	bne.n	80054fe <_sbrk_r+0x1a>
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	b103      	cbz	r3, 80054fe <_sbrk_r+0x1a>
 80054fc:	602b      	str	r3, [r5, #0]
 80054fe:	bd38      	pop	{r3, r4, r5, pc}
 8005500:	200006e0 	.word	0x200006e0

08005504 <__sread>:
 8005504:	b510      	push	{r4, lr}
 8005506:	460c      	mov	r4, r1
 8005508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800550c:	f000 f896 	bl	800563c <_read_r>
 8005510:	2800      	cmp	r0, #0
 8005512:	bfab      	itete	ge
 8005514:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005516:	89a3      	ldrhlt	r3, [r4, #12]
 8005518:	181b      	addge	r3, r3, r0
 800551a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800551e:	bfac      	ite	ge
 8005520:	6563      	strge	r3, [r4, #84]	; 0x54
 8005522:	81a3      	strhlt	r3, [r4, #12]
 8005524:	bd10      	pop	{r4, pc}

08005526 <__swrite>:
 8005526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800552a:	461f      	mov	r7, r3
 800552c:	898b      	ldrh	r3, [r1, #12]
 800552e:	05db      	lsls	r3, r3, #23
 8005530:	4605      	mov	r5, r0
 8005532:	460c      	mov	r4, r1
 8005534:	4616      	mov	r6, r2
 8005536:	d505      	bpl.n	8005544 <__swrite+0x1e>
 8005538:	2302      	movs	r3, #2
 800553a:	2200      	movs	r2, #0
 800553c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005540:	f000 f868 	bl	8005614 <_lseek_r>
 8005544:	89a3      	ldrh	r3, [r4, #12]
 8005546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800554a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800554e:	81a3      	strh	r3, [r4, #12]
 8005550:	4632      	mov	r2, r6
 8005552:	463b      	mov	r3, r7
 8005554:	4628      	mov	r0, r5
 8005556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800555a:	f000 b817 	b.w	800558c <_write_r>

0800555e <__sseek>:
 800555e:	b510      	push	{r4, lr}
 8005560:	460c      	mov	r4, r1
 8005562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005566:	f000 f855 	bl	8005614 <_lseek_r>
 800556a:	1c43      	adds	r3, r0, #1
 800556c:	89a3      	ldrh	r3, [r4, #12]
 800556e:	bf15      	itete	ne
 8005570:	6560      	strne	r0, [r4, #84]	; 0x54
 8005572:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005576:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800557a:	81a3      	strheq	r3, [r4, #12]
 800557c:	bf18      	it	ne
 800557e:	81a3      	strhne	r3, [r4, #12]
 8005580:	bd10      	pop	{r4, pc}

08005582 <__sclose>:
 8005582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005586:	f000 b813 	b.w	80055b0 <_close_r>
	...

0800558c <_write_r>:
 800558c:	b538      	push	{r3, r4, r5, lr}
 800558e:	4c07      	ldr	r4, [pc, #28]	; (80055ac <_write_r+0x20>)
 8005590:	4605      	mov	r5, r0
 8005592:	4608      	mov	r0, r1
 8005594:	4611      	mov	r1, r2
 8005596:	2200      	movs	r2, #0
 8005598:	6022      	str	r2, [r4, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	f7fe fd46 	bl	800402c <_write>
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d102      	bne.n	80055aa <_write_r+0x1e>
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	b103      	cbz	r3, 80055aa <_write_r+0x1e>
 80055a8:	602b      	str	r3, [r5, #0]
 80055aa:	bd38      	pop	{r3, r4, r5, pc}
 80055ac:	200006e0 	.word	0x200006e0

080055b0 <_close_r>:
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	4c06      	ldr	r4, [pc, #24]	; (80055cc <_close_r+0x1c>)
 80055b4:	2300      	movs	r3, #0
 80055b6:	4605      	mov	r5, r0
 80055b8:	4608      	mov	r0, r1
 80055ba:	6023      	str	r3, [r4, #0]
 80055bc:	f7fe fd7e 	bl	80040bc <_close>
 80055c0:	1c43      	adds	r3, r0, #1
 80055c2:	d102      	bne.n	80055ca <_close_r+0x1a>
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	b103      	cbz	r3, 80055ca <_close_r+0x1a>
 80055c8:	602b      	str	r3, [r5, #0]
 80055ca:	bd38      	pop	{r3, r4, r5, pc}
 80055cc:	200006e0 	.word	0x200006e0

080055d0 <_fstat_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	4c07      	ldr	r4, [pc, #28]	; (80055f0 <_fstat_r+0x20>)
 80055d4:	2300      	movs	r3, #0
 80055d6:	4605      	mov	r5, r0
 80055d8:	4608      	mov	r0, r1
 80055da:	4611      	mov	r1, r2
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	f7fe fd79 	bl	80040d4 <_fstat>
 80055e2:	1c43      	adds	r3, r0, #1
 80055e4:	d102      	bne.n	80055ec <_fstat_r+0x1c>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	b103      	cbz	r3, 80055ec <_fstat_r+0x1c>
 80055ea:	602b      	str	r3, [r5, #0]
 80055ec:	bd38      	pop	{r3, r4, r5, pc}
 80055ee:	bf00      	nop
 80055f0:	200006e0 	.word	0x200006e0

080055f4 <_isatty_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4c06      	ldr	r4, [pc, #24]	; (8005610 <_isatty_r+0x1c>)
 80055f8:	2300      	movs	r3, #0
 80055fa:	4605      	mov	r5, r0
 80055fc:	4608      	mov	r0, r1
 80055fe:	6023      	str	r3, [r4, #0]
 8005600:	f7fe fd78 	bl	80040f4 <_isatty>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	d102      	bne.n	800560e <_isatty_r+0x1a>
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	b103      	cbz	r3, 800560e <_isatty_r+0x1a>
 800560c:	602b      	str	r3, [r5, #0]
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	200006e0 	.word	0x200006e0

08005614 <_lseek_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4c07      	ldr	r4, [pc, #28]	; (8005634 <_lseek_r+0x20>)
 8005618:	4605      	mov	r5, r0
 800561a:	4608      	mov	r0, r1
 800561c:	4611      	mov	r1, r2
 800561e:	2200      	movs	r2, #0
 8005620:	6022      	str	r2, [r4, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	f7fe fd71 	bl	800410a <_lseek>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	d102      	bne.n	8005632 <_lseek_r+0x1e>
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	b103      	cbz	r3, 8005632 <_lseek_r+0x1e>
 8005630:	602b      	str	r3, [r5, #0]
 8005632:	bd38      	pop	{r3, r4, r5, pc}
 8005634:	200006e0 	.word	0x200006e0

08005638 <__malloc_lock>:
 8005638:	4770      	bx	lr

0800563a <__malloc_unlock>:
 800563a:	4770      	bx	lr

0800563c <_read_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4c07      	ldr	r4, [pc, #28]	; (800565c <_read_r+0x20>)
 8005640:	4605      	mov	r5, r0
 8005642:	4608      	mov	r0, r1
 8005644:	4611      	mov	r1, r2
 8005646:	2200      	movs	r2, #0
 8005648:	6022      	str	r2, [r4, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	f7fe fcd1 	bl	8003ff2 <_read>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d102      	bne.n	800565a <_read_r+0x1e>
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	b103      	cbz	r3, 800565a <_read_r+0x1e>
 8005658:	602b      	str	r3, [r5, #0]
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	200006e0 	.word	0x200006e0

08005660 <_init>:
 8005660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005662:	bf00      	nop
 8005664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005666:	bc08      	pop	{r3}
 8005668:	469e      	mov	lr, r3
 800566a:	4770      	bx	lr

0800566c <_fini>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	bf00      	nop
 8005670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005672:	bc08      	pop	{r3}
 8005674:	469e      	mov	lr, r3
 8005676:	4770      	bx	lr
