
Magisterka_normal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004e64  08004e64  00014e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004f40  08004f40  00014f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004f48  08004f48  00014f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004f4c  08004f4c  00014f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08004f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          000005f8  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000668  20000668  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000fc9b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000243b  00000000  00000000  0002fd3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000dd8  00000000  00000000  00032178  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c98  00000000  00000000  00032f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002501a  00000000  00000000  00033be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000a554  00000000  00000000  00058c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d85a5  00000000  00000000  00063156  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0013b6fb  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003ec8  00000000  00000000  0013b778  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004e4c 	.word	0x08004e4c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	08004e4c 	.word	0x08004e4c

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032a:	f1a4 0401 	sub.w	r4, r4, #1
 800032e:	d1e9      	bne.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f092 0f00 	teq	r2, #0
 80004d6:	bf14      	ite	ne
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e720      	b.n	8000330 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aedc 	beq.w	80002de <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6c1      	b.n	80002de <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__aeabi_d2uiz>:
 8000980:	004a      	lsls	r2, r1, #1
 8000982:	d211      	bcs.n	80009a8 <__aeabi_d2uiz+0x28>
 8000984:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000988:	d211      	bcs.n	80009ae <__aeabi_d2uiz+0x2e>
 800098a:	d50d      	bpl.n	80009a8 <__aeabi_d2uiz+0x28>
 800098c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000990:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000994:	d40e      	bmi.n	80009b4 <__aeabi_d2uiz+0x34>
 8000996:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	4770      	bx	lr
 80009a8:	f04f 0000 	mov.w	r0, #0
 80009ac:	4770      	bx	lr
 80009ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b2:	d102      	bne.n	80009ba <__aeabi_d2uiz+0x3a>
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	4770      	bx	lr
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	4770      	bx	lr

080009c0 <__aeabi_uldivmod>:
 80009c0:	b953      	cbnz	r3, 80009d8 <__aeabi_uldivmod+0x18>
 80009c2:	b94a      	cbnz	r2, 80009d8 <__aeabi_uldivmod+0x18>
 80009c4:	2900      	cmp	r1, #0
 80009c6:	bf08      	it	eq
 80009c8:	2800      	cmpeq	r0, #0
 80009ca:	bf1c      	itt	ne
 80009cc:	f04f 31ff 	movne.w	r1, #4294967295
 80009d0:	f04f 30ff 	movne.w	r0, #4294967295
 80009d4:	f000 b97a 	b.w	8000ccc <__aeabi_idiv0>
 80009d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80009dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e0:	f000 f806 	bl	80009f0 <__udivmoddi4>
 80009e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009ec:	b004      	add	sp, #16
 80009ee:	4770      	bx	lr

080009f0 <__udivmoddi4>:
 80009f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f4:	468c      	mov	ip, r1
 80009f6:	460d      	mov	r5, r1
 80009f8:	4604      	mov	r4, r0
 80009fa:	9e08      	ldr	r6, [sp, #32]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d151      	bne.n	8000aa4 <__udivmoddi4+0xb4>
 8000a00:	428a      	cmp	r2, r1
 8000a02:	4617      	mov	r7, r2
 8000a04:	d96d      	bls.n	8000ae2 <__udivmoddi4+0xf2>
 8000a06:	fab2 fe82 	clz	lr, r2
 8000a0a:	f1be 0f00 	cmp.w	lr, #0
 8000a0e:	d00b      	beq.n	8000a28 <__udivmoddi4+0x38>
 8000a10:	f1ce 0c20 	rsb	ip, lr, #32
 8000a14:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a18:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a1c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a20:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a24:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a28:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a2c:	0c25      	lsrs	r5, r4, #16
 8000a2e:	fbbc f8fa 	udiv	r8, ip, sl
 8000a32:	fa1f f987 	uxth.w	r9, r7
 8000a36:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a3a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a3e:	fb08 f309 	mul.w	r3, r8, r9
 8000a42:	42ab      	cmp	r3, r5
 8000a44:	d90a      	bls.n	8000a5c <__udivmoddi4+0x6c>
 8000a46:	19ed      	adds	r5, r5, r7
 8000a48:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a4c:	f080 8123 	bcs.w	8000c96 <__udivmoddi4+0x2a6>
 8000a50:	42ab      	cmp	r3, r5
 8000a52:	f240 8120 	bls.w	8000c96 <__udivmoddi4+0x2a6>
 8000a56:	f1a8 0802 	sub.w	r8, r8, #2
 8000a5a:	443d      	add	r5, r7
 8000a5c:	1aed      	subs	r5, r5, r3
 8000a5e:	b2a4      	uxth	r4, r4
 8000a60:	fbb5 f0fa 	udiv	r0, r5, sl
 8000a64:	fb0a 5510 	mls	r5, sl, r0, r5
 8000a68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a6c:	fb00 f909 	mul.w	r9, r0, r9
 8000a70:	45a1      	cmp	r9, r4
 8000a72:	d909      	bls.n	8000a88 <__udivmoddi4+0x98>
 8000a74:	19e4      	adds	r4, r4, r7
 8000a76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a7a:	f080 810a 	bcs.w	8000c92 <__udivmoddi4+0x2a2>
 8000a7e:	45a1      	cmp	r9, r4
 8000a80:	f240 8107 	bls.w	8000c92 <__udivmoddi4+0x2a2>
 8000a84:	3802      	subs	r0, #2
 8000a86:	443c      	add	r4, r7
 8000a88:	eba4 0409 	sub.w	r4, r4, r9
 8000a8c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a90:	2100      	movs	r1, #0
 8000a92:	2e00      	cmp	r6, #0
 8000a94:	d061      	beq.n	8000b5a <__udivmoddi4+0x16a>
 8000a96:	fa24 f40e 	lsr.w	r4, r4, lr
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	6034      	str	r4, [r6, #0]
 8000a9e:	6073      	str	r3, [r6, #4]
 8000aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa4:	428b      	cmp	r3, r1
 8000aa6:	d907      	bls.n	8000ab8 <__udivmoddi4+0xc8>
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d054      	beq.n	8000b56 <__udivmoddi4+0x166>
 8000aac:	2100      	movs	r1, #0
 8000aae:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ab2:	4608      	mov	r0, r1
 8000ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab8:	fab3 f183 	clz	r1, r3
 8000abc:	2900      	cmp	r1, #0
 8000abe:	f040 808e 	bne.w	8000bde <__udivmoddi4+0x1ee>
 8000ac2:	42ab      	cmp	r3, r5
 8000ac4:	d302      	bcc.n	8000acc <__udivmoddi4+0xdc>
 8000ac6:	4282      	cmp	r2, r0
 8000ac8:	f200 80fa 	bhi.w	8000cc0 <__udivmoddi4+0x2d0>
 8000acc:	1a84      	subs	r4, r0, r2
 8000ace:	eb65 0503 	sbc.w	r5, r5, r3
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	46ac      	mov	ip, r5
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d03f      	beq.n	8000b5a <__udivmoddi4+0x16a>
 8000ada:	e886 1010 	stmia.w	r6, {r4, ip}
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	b912      	cbnz	r2, 8000aea <__udivmoddi4+0xfa>
 8000ae4:	2701      	movs	r7, #1
 8000ae6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000aea:	fab7 fe87 	clz	lr, r7
 8000aee:	f1be 0f00 	cmp.w	lr, #0
 8000af2:	d134      	bne.n	8000b5e <__udivmoddi4+0x16e>
 8000af4:	1beb      	subs	r3, r5, r7
 8000af6:	0c3a      	lsrs	r2, r7, #16
 8000af8:	fa1f fc87 	uxth.w	ip, r7
 8000afc:	2101      	movs	r1, #1
 8000afe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b02:	0c25      	lsrs	r5, r4, #16
 8000b04:	fb02 3318 	mls	r3, r2, r8, r3
 8000b08:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b0c:	fb0c f308 	mul.w	r3, ip, r8
 8000b10:	42ab      	cmp	r3, r5
 8000b12:	d907      	bls.n	8000b24 <__udivmoddi4+0x134>
 8000b14:	19ed      	adds	r5, r5, r7
 8000b16:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b1a:	d202      	bcs.n	8000b22 <__udivmoddi4+0x132>
 8000b1c:	42ab      	cmp	r3, r5
 8000b1e:	f200 80d1 	bhi.w	8000cc4 <__udivmoddi4+0x2d4>
 8000b22:	4680      	mov	r8, r0
 8000b24:	1aed      	subs	r5, r5, r3
 8000b26:	b2a3      	uxth	r3, r4
 8000b28:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b2c:	fb02 5510 	mls	r5, r2, r0, r5
 8000b30:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b34:	fb0c fc00 	mul.w	ip, ip, r0
 8000b38:	45a4      	cmp	ip, r4
 8000b3a:	d907      	bls.n	8000b4c <__udivmoddi4+0x15c>
 8000b3c:	19e4      	adds	r4, r4, r7
 8000b3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b42:	d202      	bcs.n	8000b4a <__udivmoddi4+0x15a>
 8000b44:	45a4      	cmp	ip, r4
 8000b46:	f200 80b8 	bhi.w	8000cba <__udivmoddi4+0x2ca>
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	eba4 040c 	sub.w	r4, r4, ip
 8000b50:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b54:	e79d      	b.n	8000a92 <__udivmoddi4+0xa2>
 8000b56:	4631      	mov	r1, r6
 8000b58:	4630      	mov	r0, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	f1ce 0420 	rsb	r4, lr, #32
 8000b62:	fa05 f30e 	lsl.w	r3, r5, lr
 8000b66:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b6a:	fa20 f804 	lsr.w	r8, r0, r4
 8000b6e:	0c3a      	lsrs	r2, r7, #16
 8000b70:	fa25 f404 	lsr.w	r4, r5, r4
 8000b74:	ea48 0803 	orr.w	r8, r8, r3
 8000b78:	fbb4 f1f2 	udiv	r1, r4, r2
 8000b7c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000b80:	fb02 4411 	mls	r4, r2, r1, r4
 8000b84:	fa1f fc87 	uxth.w	ip, r7
 8000b88:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000b8c:	fb01 f30c 	mul.w	r3, r1, ip
 8000b90:	42ab      	cmp	r3, r5
 8000b92:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x1bc>
 8000b98:	19ed      	adds	r5, r5, r7
 8000b9a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b9e:	f080 808a 	bcs.w	8000cb6 <__udivmoddi4+0x2c6>
 8000ba2:	42ab      	cmp	r3, r5
 8000ba4:	f240 8087 	bls.w	8000cb6 <__udivmoddi4+0x2c6>
 8000ba8:	3902      	subs	r1, #2
 8000baa:	443d      	add	r5, r7
 8000bac:	1aeb      	subs	r3, r5, r3
 8000bae:	fa1f f588 	uxth.w	r5, r8
 8000bb2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000bb6:	fb02 3310 	mls	r3, r2, r0, r3
 8000bba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bbe:	fb00 f30c 	mul.w	r3, r0, ip
 8000bc2:	42ab      	cmp	r3, r5
 8000bc4:	d907      	bls.n	8000bd6 <__udivmoddi4+0x1e6>
 8000bc6:	19ed      	adds	r5, r5, r7
 8000bc8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bcc:	d26f      	bcs.n	8000cae <__udivmoddi4+0x2be>
 8000bce:	42ab      	cmp	r3, r5
 8000bd0:	d96d      	bls.n	8000cae <__udivmoddi4+0x2be>
 8000bd2:	3802      	subs	r0, #2
 8000bd4:	443d      	add	r5, r7
 8000bd6:	1aeb      	subs	r3, r5, r3
 8000bd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bdc:	e78f      	b.n	8000afe <__udivmoddi4+0x10e>
 8000bde:	f1c1 0720 	rsb	r7, r1, #32
 8000be2:	fa22 f807 	lsr.w	r8, r2, r7
 8000be6:	408b      	lsls	r3, r1
 8000be8:	fa05 f401 	lsl.w	r4, r5, r1
 8000bec:	ea48 0303 	orr.w	r3, r8, r3
 8000bf0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000bf4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000bf8:	40fd      	lsrs	r5, r7
 8000bfa:	ea4e 0e04 	orr.w	lr, lr, r4
 8000bfe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c02:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c06:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c0a:	fa1f f883 	uxth.w	r8, r3
 8000c0e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c12:	fb09 f408 	mul.w	r4, r9, r8
 8000c16:	42ac      	cmp	r4, r5
 8000c18:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x244>
 8000c22:	18ed      	adds	r5, r5, r3
 8000c24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c28:	d243      	bcs.n	8000cb2 <__udivmoddi4+0x2c2>
 8000c2a:	42ac      	cmp	r4, r5
 8000c2c:	d941      	bls.n	8000cb2 <__udivmoddi4+0x2c2>
 8000c2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c32:	441d      	add	r5, r3
 8000c34:	1b2d      	subs	r5, r5, r4
 8000c36:	fa1f fe8e 	uxth.w	lr, lr
 8000c3a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c3e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c42:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c46:	fb00 f808 	mul.w	r8, r0, r8
 8000c4a:	45a0      	cmp	r8, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x26e>
 8000c4e:	18e4      	adds	r4, r4, r3
 8000c50:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c54:	d229      	bcs.n	8000caa <__udivmoddi4+0x2ba>
 8000c56:	45a0      	cmp	r8, r4
 8000c58:	d927      	bls.n	8000caa <__udivmoddi4+0x2ba>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	441c      	add	r4, r3
 8000c5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c62:	eba4 0408 	sub.w	r4, r4, r8
 8000c66:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6a:	454c      	cmp	r4, r9
 8000c6c:	46c6      	mov	lr, r8
 8000c6e:	464d      	mov	r5, r9
 8000c70:	d315      	bcc.n	8000c9e <__udivmoddi4+0x2ae>
 8000c72:	d012      	beq.n	8000c9a <__udivmoddi4+0x2aa>
 8000c74:	b156      	cbz	r6, 8000c8c <__udivmoddi4+0x29c>
 8000c76:	ebba 030e 	subs.w	r3, sl, lr
 8000c7a:	eb64 0405 	sbc.w	r4, r4, r5
 8000c7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431f      	orrs	r7, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	6037      	str	r7, [r6, #0]
 8000c8a:	6074      	str	r4, [r6, #4]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	4618      	mov	r0, r3
 8000c94:	e6f8      	b.n	8000a88 <__udivmoddi4+0x98>
 8000c96:	4690      	mov	r8, r2
 8000c98:	e6e0      	b.n	8000a5c <__udivmoddi4+0x6c>
 8000c9a:	45c2      	cmp	sl, r8
 8000c9c:	d2ea      	bcs.n	8000c74 <__udivmoddi4+0x284>
 8000c9e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ca2:	eb69 0503 	sbc.w	r5, r9, r3
 8000ca6:	3801      	subs	r0, #1
 8000ca8:	e7e4      	b.n	8000c74 <__udivmoddi4+0x284>
 8000caa:	4628      	mov	r0, r5
 8000cac:	e7d7      	b.n	8000c5e <__udivmoddi4+0x26e>
 8000cae:	4640      	mov	r0, r8
 8000cb0:	e791      	b.n	8000bd6 <__udivmoddi4+0x1e6>
 8000cb2:	4681      	mov	r9, r0
 8000cb4:	e7be      	b.n	8000c34 <__udivmoddi4+0x244>
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	e778      	b.n	8000bac <__udivmoddi4+0x1bc>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	e745      	b.n	8000b4c <__udivmoddi4+0x15c>
 8000cc0:	4608      	mov	r0, r1
 8000cc2:	e708      	b.n	8000ad6 <__udivmoddi4+0xe6>
 8000cc4:	f1a8 0802 	sub.w	r8, r8, #2
 8000cc8:	443d      	add	r5, r7
 8000cca:	e72b      	b.n	8000b24 <__udivmoddi4+0x134>

08000ccc <__aeabi_idiv0>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd4:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <HAL_Init+0x40>)
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_Init+0x40>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce0:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <HAL_Init+0x40>)
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_Init+0x40>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <HAL_Init+0x40>)
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_Init+0x40>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 f94b 	bl	8000f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 f808 	bl	8000d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d04:	f002 ffce 	bl	8003ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023c00 	.word	0x40023c00

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_InitTick+0x54>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x58>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f963 	bl	8000ffe <HAL_SYSTICK_Config>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00e      	b.n	8000d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d80a      	bhi.n	8000d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f000 f92b 	bl	8000faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d54:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <HAL_InitTick+0x5c>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e000      	b.n	8000d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20000004 	.word	0x20000004
 8000d70:	20000000 	.word	0x20000000

08000d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x20>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x24>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <HAL_IncTick+0x24>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000004 	.word	0x20000004
 8000d98:	20000498 	.word	0x20000498

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <HAL_GetTick+0x14>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000498 	.word	0x20000498

08000db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dbc:	f7ff ffee 	bl	8000d9c <HAL_GetTick>
 8000dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dcc:	d005      	beq.n	8000dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <HAL_Delay+0x40>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dda:	bf00      	nop
 8000ddc:	f7ff ffde 	bl	8000d9c <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1ad2      	subs	r2, r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d3f7      	bcc.n	8000ddc <HAL_Delay+0x28>
  {
  }
}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000004 	.word	0x20000004

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	4909      	ldr	r1, [pc, #36]	; (8000e94 <__NVIC_EnableIRQ+0x38>)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	095b      	lsrs	r3, r3, #5
 8000e76:	79fa      	ldrb	r2, [r7, #7]
 8000e78:	f002 021f 	and.w	r2, r2, #31
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	490d      	ldr	r1, [pc, #52]	; (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	4909      	ldr	r1, [pc, #36]	; (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	2201      	movs	r2, #1
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	1e5a      	subs	r2, r3, #1
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	401a      	ands	r2, r3
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f32:	2101      	movs	r1, #1
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	1e59      	subs	r1, r3, #1
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f60:	d301      	bcc.n	8000f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00f      	b.n	8000f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <SysTick_Config+0x40>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6e:	210f      	movs	r1, #15
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f7ff ff90 	bl	8000e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <SysTick_Config+0x40>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <SysTick_Config+0x40>)
 8000f80:	2207      	movs	r2, #7
 8000f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	e000e010 	.word	0xe000e010

08000f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff2b 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fbc:	f7ff ff40 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	6978      	ldr	r0, [r7, #20]
 8000fc8:	f7ff ff90 	bl	8000eec <NVIC_EncodePriority>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff5f 	bl	8000e98 <__NVIC_SetPriority>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff33 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ffa2 	bl	8000f50 <SysTick_Config>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	; 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
 8001032:	e177      	b.n	8001324 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001034:	2201      	movs	r2, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	429a      	cmp	r2, r3
 800104e:	f040 8166 	bne.w	800131e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b02      	cmp	r3, #2
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x4a>
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b12      	cmp	r3, #18
 8001060:	d123      	bne.n	80010aa <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	08da      	lsrs	r2, r3, #3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3208      	adds	r2, #8
 800106a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	220f      	movs	r2, #15
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	691a      	ldr	r2, [r3, #16]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	08da      	lsrs	r2, r3, #3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3208      	adds	r2, #8
 80010a4:	69b9      	ldr	r1, [r7, #24]
 80010a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0203 	and.w	r2, r3, #3
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d00b      	beq.n	80010fe <HAL_GPIO_Init+0xe6>
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d007      	beq.n	80010fe <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f2:	2b11      	cmp	r3, #17
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b12      	cmp	r3, #18
 80010fc:	d130      	bne.n	8001160 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2203      	movs	r2, #3
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	f003 0201 	and.w	r2, r3, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 80c0 	beq.w	800131e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4a65      	ldr	r2, [pc, #404]	; (8001338 <HAL_GPIO_Init+0x320>)
 80011a4:	4b64      	ldr	r3, [pc, #400]	; (8001338 <HAL_GPIO_Init+0x320>)
 80011a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ac:	6453      	str	r3, [r2, #68]	; 0x44
 80011ae:	4b62      	ldr	r3, [pc, #392]	; (8001338 <HAL_GPIO_Init+0x320>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ba:	4a60      	ldr	r2, [pc, #384]	; (800133c <HAL_GPIO_Init+0x324>)
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	089b      	lsrs	r3, r3, #2
 80011c0:	3302      	adds	r3, #2
 80011c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	220f      	movs	r2, #15
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a57      	ldr	r2, [pc, #348]	; (8001340 <HAL_GPIO_Init+0x328>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d037      	beq.n	8001256 <HAL_GPIO_Init+0x23e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a56      	ldr	r2, [pc, #344]	; (8001344 <HAL_GPIO_Init+0x32c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d031      	beq.n	8001252 <HAL_GPIO_Init+0x23a>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a55      	ldr	r2, [pc, #340]	; (8001348 <HAL_GPIO_Init+0x330>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d02b      	beq.n	800124e <HAL_GPIO_Init+0x236>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a54      	ldr	r2, [pc, #336]	; (800134c <HAL_GPIO_Init+0x334>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d025      	beq.n	800124a <HAL_GPIO_Init+0x232>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a53      	ldr	r2, [pc, #332]	; (8001350 <HAL_GPIO_Init+0x338>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d01f      	beq.n	8001246 <HAL_GPIO_Init+0x22e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a52      	ldr	r2, [pc, #328]	; (8001354 <HAL_GPIO_Init+0x33c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d019      	beq.n	8001242 <HAL_GPIO_Init+0x22a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a51      	ldr	r2, [pc, #324]	; (8001358 <HAL_GPIO_Init+0x340>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d013      	beq.n	800123e <HAL_GPIO_Init+0x226>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a50      	ldr	r2, [pc, #320]	; (800135c <HAL_GPIO_Init+0x344>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d00d      	beq.n	800123a <HAL_GPIO_Init+0x222>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4f      	ldr	r2, [pc, #316]	; (8001360 <HAL_GPIO_Init+0x348>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d007      	beq.n	8001236 <HAL_GPIO_Init+0x21e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4e      	ldr	r2, [pc, #312]	; (8001364 <HAL_GPIO_Init+0x34c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d101      	bne.n	8001232 <HAL_GPIO_Init+0x21a>
 800122e:	2309      	movs	r3, #9
 8001230:	e012      	b.n	8001258 <HAL_GPIO_Init+0x240>
 8001232:	230a      	movs	r3, #10
 8001234:	e010      	b.n	8001258 <HAL_GPIO_Init+0x240>
 8001236:	2308      	movs	r3, #8
 8001238:	e00e      	b.n	8001258 <HAL_GPIO_Init+0x240>
 800123a:	2307      	movs	r3, #7
 800123c:	e00c      	b.n	8001258 <HAL_GPIO_Init+0x240>
 800123e:	2306      	movs	r3, #6
 8001240:	e00a      	b.n	8001258 <HAL_GPIO_Init+0x240>
 8001242:	2305      	movs	r3, #5
 8001244:	e008      	b.n	8001258 <HAL_GPIO_Init+0x240>
 8001246:	2304      	movs	r3, #4
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x240>
 800124a:	2303      	movs	r3, #3
 800124c:	e004      	b.n	8001258 <HAL_GPIO_Init+0x240>
 800124e:	2302      	movs	r3, #2
 8001250:	e002      	b.n	8001258 <HAL_GPIO_Init+0x240>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x240>
 8001256:	2300      	movs	r3, #0
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	f002 0203 	and.w	r2, r2, #3
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4093      	lsls	r3, r2
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001268:	4934      	ldr	r1, [pc, #208]	; (800133c <HAL_GPIO_Init+0x324>)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001276:	4b3c      	ldr	r3, [pc, #240]	; (8001368 <HAL_GPIO_Init+0x350>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800129a:	4a33      	ldr	r2, [pc, #204]	; (8001368 <HAL_GPIO_Init+0x350>)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012a0:	4b31      	ldr	r3, [pc, #196]	; (8001368 <HAL_GPIO_Init+0x350>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c4:	4a28      	ldr	r2, [pc, #160]	; (8001368 <HAL_GPIO_Init+0x350>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ca:	4b27      	ldr	r3, [pc, #156]	; (8001368 <HAL_GPIO_Init+0x350>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ee:	4a1e      	ldr	r2, [pc, #120]	; (8001368 <HAL_GPIO_Init+0x350>)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <HAL_GPIO_Init+0x350>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001318:	4a13      	ldr	r2, [pc, #76]	; (8001368 <HAL_GPIO_Init+0x350>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3301      	adds	r3, #1
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	2b0f      	cmp	r3, #15
 8001328:	f67f ae84 	bls.w	8001034 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800132c:	bf00      	nop
 800132e:	3724      	adds	r7, #36	; 0x24
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	40023800 	.word	0x40023800
 800133c:	40013800 	.word	0x40013800
 8001340:	40020000 	.word	0x40020000
 8001344:	40020400 	.word	0x40020400
 8001348:	40020800 	.word	0x40020800
 800134c:	40020c00 	.word	0x40020c00
 8001350:	40021000 	.word	0x40021000
 8001354:	40021400 	.word	0x40021400
 8001358:	40021800 	.word	0x40021800
 800135c:	40021c00 	.word	0x40021c00
 8001360:	40022000 	.word	0x40022000
 8001364:	40022400 	.word	0x40022400
 8001368:	40013c00 	.word	0x40013c00

0800136c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
 8001378:	4613      	mov	r3, r2
 800137a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800137c:	787b      	ldrb	r3, [r7, #1]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001388:	e003      	b.n	8001392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800138a:	887b      	ldrh	r3, [r7, #2]
 800138c:	041a      	lsls	r2, r3, #16
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	619a      	str	r2, [r3, #24]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e22d      	b.n	800180e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d075      	beq.n	80014aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013be:	4ba3      	ldr	r3, [pc, #652]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d00c      	beq.n	80013e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ca:	4ba0      	ldr	r3, [pc, #640]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d112      	bne.n	80013fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d6:	4b9d      	ldr	r3, [pc, #628]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013e2:	d10b      	bne.n	80013fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e4:	4b99      	ldr	r3, [pc, #612]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d05b      	beq.n	80014a8 <HAL_RCC_OscConfig+0x108>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d157      	bne.n	80014a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e208      	b.n	800180e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001404:	d106      	bne.n	8001414 <HAL_RCC_OscConfig+0x74>
 8001406:	4a91      	ldr	r2, [pc, #580]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 8001408:	4b90      	ldr	r3, [pc, #576]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e01d      	b.n	8001450 <HAL_RCC_OscConfig+0xb0>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800141c:	d10c      	bne.n	8001438 <HAL_RCC_OscConfig+0x98>
 800141e:	4a8b      	ldr	r2, [pc, #556]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 8001420:	4b8a      	ldr	r3, [pc, #552]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	4a88      	ldr	r2, [pc, #544]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 800142c:	4b87      	ldr	r3, [pc, #540]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e00b      	b.n	8001450 <HAL_RCC_OscConfig+0xb0>
 8001438:	4a84      	ldr	r2, [pc, #528]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 800143a:	4b84      	ldr	r3, [pc, #528]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	4a81      	ldr	r2, [pc, #516]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 8001446:	4b81      	ldr	r3, [pc, #516]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800144e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d013      	beq.n	8001480 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fca0 	bl	8000d9c <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001460:	f7ff fc9c 	bl	8000d9c <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e1cd      	b.n	800180e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	4b76      	ldr	r3, [pc, #472]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0xc0>
 800147e:	e014      	b.n	80014aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001480:	f7ff fc8c 	bl	8000d9c <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001488:	f7ff fc88 	bl	8000d9c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b64      	cmp	r3, #100	; 0x64
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e1b9      	b.n	800180e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149a:	4b6c      	ldr	r3, [pc, #432]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0xe8>
 80014a6:	e000      	b.n	80014aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d063      	beq.n	800157e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014b6:	4b65      	ldr	r3, [pc, #404]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00b      	beq.n	80014da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014c2:	4b62      	ldr	r3, [pc, #392]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d11c      	bne.n	8001508 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ce:	4b5f      	ldr	r3, [pc, #380]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d116      	bne.n	8001508 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014da:	4b5c      	ldr	r3, [pc, #368]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <HAL_RCC_OscConfig+0x152>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d001      	beq.n	80014f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e18d      	b.n	800180e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f2:	4956      	ldr	r1, [pc, #344]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	4b55      	ldr	r3, [pc, #340]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4313      	orrs	r3, r2
 8001504:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001506:	e03a      	b.n	800157e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d020      	beq.n	8001552 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001510:	4b4f      	ldr	r3, [pc, #316]	; (8001650 <HAL_RCC_OscConfig+0x2b0>)
 8001512:	2201      	movs	r2, #1
 8001514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001516:	f7ff fc41 	bl	8000d9c <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151e:	f7ff fc3d 	bl	8000d9c <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e16e      	b.n	800180e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001530:	4b46      	ldr	r3, [pc, #280]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153c:	4943      	ldr	r1, [pc, #268]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 800153e:	4b43      	ldr	r3, [pc, #268]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4313      	orrs	r3, r2
 800154e:	600b      	str	r3, [r1, #0]
 8001550:	e015      	b.n	800157e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001552:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <HAL_RCC_OscConfig+0x2b0>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fc20 	bl	8000d9c <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001560:	f7ff fc1c 	bl	8000d9c <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e14d      	b.n	800180e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001572:	4b36      	ldr	r3, [pc, #216]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b00      	cmp	r3, #0
 8001588:	d030      	beq.n	80015ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d016      	beq.n	80015c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001592:	4b30      	ldr	r3, [pc, #192]	; (8001654 <HAL_RCC_OscConfig+0x2b4>)
 8001594:	2201      	movs	r2, #1
 8001596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001598:	f7ff fc00 	bl	8000d9c <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a0:	f7ff fbfc 	bl	8000d9c <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e12d      	b.n	800180e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b2:	4b26      	ldr	r3, [pc, #152]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x200>
 80015be:	e015      	b.n	80015ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c0:	4b24      	ldr	r3, [pc, #144]	; (8001654 <HAL_RCC_OscConfig+0x2b4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c6:	f7ff fbe9 	bl	8000d9c <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ce:	f7ff fbe5 	bl	8000d9c <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e116      	b.n	800180e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 80015e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f0      	bne.n	80015ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80a0 	beq.w	800173a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015fa:	2300      	movs	r3, #0
 80015fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10f      	bne.n	800162a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4a0f      	ldr	r2, [pc, #60]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	6413      	str	r3, [r2, #64]	; 0x40
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_RCC_OscConfig+0x2ac>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001626:	2301      	movs	r3, #1
 8001628:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_RCC_OscConfig+0x2b8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001632:	2b00      	cmp	r3, #0
 8001634:	d121      	bne.n	800167a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <HAL_RCC_OscConfig+0x2b8>)
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <HAL_RCC_OscConfig+0x2b8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001642:	f7ff fbab 	bl	8000d9c <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001648:	e011      	b.n	800166e <HAL_RCC_OscConfig+0x2ce>
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	42470000 	.word	0x42470000
 8001654:	42470e80 	.word	0x42470e80
 8001658:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165c:	f7ff fb9e 	bl	8000d9c <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e0cf      	b.n	800180e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166e:	4b6a      	ldr	r3, [pc, #424]	; (8001818 <HAL_RCC_OscConfig+0x478>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d106      	bne.n	8001690 <HAL_RCC_OscConfig+0x2f0>
 8001682:	4a66      	ldr	r2, [pc, #408]	; (800181c <HAL_RCC_OscConfig+0x47c>)
 8001684:	4b65      	ldr	r3, [pc, #404]	; (800181c <HAL_RCC_OscConfig+0x47c>)
 8001686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6713      	str	r3, [r2, #112]	; 0x70
 800168e:	e01c      	b.n	80016ca <HAL_RCC_OscConfig+0x32a>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2b05      	cmp	r3, #5
 8001696:	d10c      	bne.n	80016b2 <HAL_RCC_OscConfig+0x312>
 8001698:	4a60      	ldr	r2, [pc, #384]	; (800181c <HAL_RCC_OscConfig+0x47c>)
 800169a:	4b60      	ldr	r3, [pc, #384]	; (800181c <HAL_RCC_OscConfig+0x47c>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	6713      	str	r3, [r2, #112]	; 0x70
 80016a4:	4a5d      	ldr	r2, [pc, #372]	; (800181c <HAL_RCC_OscConfig+0x47c>)
 80016a6:	4b5d      	ldr	r3, [pc, #372]	; (800181c <HAL_RCC_OscConfig+0x47c>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6713      	str	r3, [r2, #112]	; 0x70
 80016b0:	e00b      	b.n	80016ca <HAL_RCC_OscConfig+0x32a>
 80016b2:	4a5a      	ldr	r2, [pc, #360]	; (800181c <HAL_RCC_OscConfig+0x47c>)
 80016b4:	4b59      	ldr	r3, [pc, #356]	; (800181c <HAL_RCC_OscConfig+0x47c>)
 80016b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b8:	f023 0301 	bic.w	r3, r3, #1
 80016bc:	6713      	str	r3, [r2, #112]	; 0x70
 80016be:	4a57      	ldr	r2, [pc, #348]	; (800181c <HAL_RCC_OscConfig+0x47c>)
 80016c0:	4b56      	ldr	r3, [pc, #344]	; (800181c <HAL_RCC_OscConfig+0x47c>)
 80016c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c4:	f023 0304 	bic.w	r3, r3, #4
 80016c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d015      	beq.n	80016fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d2:	f7ff fb63 	bl	8000d9c <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d8:	e00a      	b.n	80016f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016da:	f7ff fb5f 	bl	8000d9c <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e08e      	b.n	800180e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f0:	4b4a      	ldr	r3, [pc, #296]	; (800181c <HAL_RCC_OscConfig+0x47c>)
 80016f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0ee      	beq.n	80016da <HAL_RCC_OscConfig+0x33a>
 80016fc:	e014      	b.n	8001728 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fe:	f7ff fb4d 	bl	8000d9c <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001704:	e00a      	b.n	800171c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7ff fb49 	bl	8000d9c <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	f241 3288 	movw	r2, #5000	; 0x1388
 8001714:	4293      	cmp	r3, r2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e078      	b.n	800180e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171c:	4b3f      	ldr	r3, [pc, #252]	; (800181c <HAL_RCC_OscConfig+0x47c>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1ee      	bne.n	8001706 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001728:	7dfb      	ldrb	r3, [r7, #23]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d105      	bne.n	800173a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800172e:	4a3b      	ldr	r2, [pc, #236]	; (800181c <HAL_RCC_OscConfig+0x47c>)
 8001730:	4b3a      	ldr	r3, [pc, #232]	; (800181c <HAL_RCC_OscConfig+0x47c>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001738:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d064      	beq.n	800180c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001742:	4b36      	ldr	r3, [pc, #216]	; (800181c <HAL_RCC_OscConfig+0x47c>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b08      	cmp	r3, #8
 800174c:	d05c      	beq.n	8001808 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d141      	bne.n	80017da <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001756:	4b32      	ldr	r3, [pc, #200]	; (8001820 <HAL_RCC_OscConfig+0x480>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff fb1e 	bl	8000d9c <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001764:	f7ff fb1a 	bl	8000d9c <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e04b      	b.n	800180e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001776:	4b29      	ldr	r3, [pc, #164]	; (800181c <HAL_RCC_OscConfig+0x47c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001782:	4926      	ldr	r1, [pc, #152]	; (800181c <HAL_RCC_OscConfig+0x47c>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69da      	ldr	r2, [r3, #28]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	431a      	orrs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	019b      	lsls	r3, r3, #6
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179a:	085b      	lsrs	r3, r3, #1
 800179c:	3b01      	subs	r3, #1
 800179e:	041b      	lsls	r3, r3, #16
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	061b      	lsls	r3, r3, #24
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <HAL_RCC_OscConfig+0x480>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b2:	f7ff faf3 	bl	8000d9c <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff faef 	bl	8000d9c <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e020      	b.n	800180e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <HAL_RCC_OscConfig+0x47c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x41a>
 80017d8:	e018      	b.n	800180c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_RCC_OscConfig+0x480>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fadc 	bl	8000d9c <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff fad8 	bl	8000d9c <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e009      	b.n	800180e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <HAL_RCC_OscConfig+0x47c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x448>
 8001806:	e001      	b.n	800180c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40007000 	.word	0x40007000
 800181c:	40023800 	.word	0x40023800
 8001820:	42470060 	.word	0x42470060

08001824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0ca      	b.n	80019ce <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001838:	4b67      	ldr	r3, [pc, #412]	; (80019d8 <HAL_RCC_ClockConfig+0x1b4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 020f 	and.w	r2, r3, #15
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d20c      	bcs.n	8001860 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b64      	ldr	r3, [pc, #400]	; (80019d8 <HAL_RCC_ClockConfig+0x1b4>)
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	4b62      	ldr	r3, [pc, #392]	; (80019d8 <HAL_RCC_ClockConfig+0x1b4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 020f 	and.w	r2, r3, #15
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0b6      	b.n	80019ce <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d020      	beq.n	80018ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001878:	4a58      	ldr	r2, [pc, #352]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 800187a:	4b58      	ldr	r3, [pc, #352]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001882:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001890:	4a52      	ldr	r2, [pc, #328]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001892:	4b52      	ldr	r3, [pc, #328]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800189a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800189c:	494f      	ldr	r1, [pc, #316]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 800189e:	4b4f      	ldr	r3, [pc, #316]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d044      	beq.n	8001944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d107      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c2:	4b46      	ldr	r3, [pc, #280]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d119      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e07d      	b.n	80019ce <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d003      	beq.n	80018e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e2:	4b3e      	ldr	r3, [pc, #248]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d109      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e06d      	b.n	80019ce <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f2:	4b3a      	ldr	r3, [pc, #232]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e065      	b.n	80019ce <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001902:	4936      	ldr	r1, [pc, #216]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001904:	4b35      	ldr	r3, [pc, #212]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f023 0203 	bic.w	r2, r3, #3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	4313      	orrs	r3, r2
 8001912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001914:	f7ff fa42 	bl	8000d9c <HAL_GetTick>
 8001918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	e00a      	b.n	8001932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191c:	f7ff fa3e 	bl	8000d9c <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f241 3288 	movw	r2, #5000	; 0x1388
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e04d      	b.n	80019ce <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001932:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 020c 	and.w	r2, r3, #12
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	429a      	cmp	r2, r3
 8001942:	d1eb      	bne.n	800191c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001944:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <HAL_RCC_ClockConfig+0x1b4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 020f 	and.w	r2, r3, #15
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d90c      	bls.n	800196c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <HAL_RCC_ClockConfig+0x1b4>)
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195a:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <HAL_RCC_ClockConfig+0x1b4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 020f 	and.w	r2, r3, #15
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e030      	b.n	80019ce <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001978:	4918      	ldr	r1, [pc, #96]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d009      	beq.n	80019aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001996:	4911      	ldr	r1, [pc, #68]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 8001998:	4b10      	ldr	r3, [pc, #64]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019aa:	f000 f81d 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 80019ae:	4601      	mov	r1, r0
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_RCC_ClockConfig+0x1b8>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	5cd3      	ldrb	r3, [r2, r3]
 80019be:	fa21 f303 	lsr.w	r3, r1, r3
 80019c2:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <HAL_RCC_ClockConfig+0x1c0>)
 80019c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80019c6:	2000      	movs	r0, #0
 80019c8:	f7ff f9a4 	bl	8000d14 <HAL_InitTick>

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023c00 	.word	0x40023c00
 80019dc:	40023800 	.word	0x40023800
 80019e0:	08004ecc 	.word	0x08004ecc
 80019e4:	20000008 	.word	0x20000008

080019e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019ec:	b087      	sub	sp, #28
 80019ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019f0:	2200      	movs	r2, #0
 80019f2:	60fa      	str	r2, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	617a      	str	r2, [r7, #20]
 80019f8:	2200      	movs	r2, #0
 80019fa:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 80019fc:	2200      	movs	r2, #0
 80019fe:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a00:	4a51      	ldr	r2, [pc, #324]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a02:	6892      	ldr	r2, [r2, #8]
 8001a04:	f002 020c 	and.w	r2, r2, #12
 8001a08:	2a04      	cmp	r2, #4
 8001a0a:	d007      	beq.n	8001a1c <HAL_RCC_GetSysClockFreq+0x34>
 8001a0c:	2a08      	cmp	r2, #8
 8001a0e:	d008      	beq.n	8001a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a10:	2a00      	cmp	r2, #0
 8001a12:	f040 8090 	bne.w	8001b36 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a16:	4b4d      	ldr	r3, [pc, #308]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x164>)
 8001a18:	613b      	str	r3, [r7, #16]
       break;
 8001a1a:	e08f      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a1c:	4b4c      	ldr	r3, [pc, #304]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x168>)
 8001a1e:	613b      	str	r3, [r7, #16]
      break;
 8001a20:	e08c      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a22:	4a49      	ldr	r2, [pc, #292]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a24:	6852      	ldr	r2, [r2, #4]
 8001a26:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001a2a:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a2c:	4a46      	ldr	r2, [pc, #280]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a2e:	6852      	ldr	r2, [r2, #4]
 8001a30:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001a34:	2a00      	cmp	r2, #0
 8001a36:	d023      	beq.n	8001a80 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a38:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	099b      	lsrs	r3, r3, #6
 8001a3e:	f04f 0400 	mov.w	r4, #0
 8001a42:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	ea03 0301 	and.w	r3, r3, r1
 8001a4e:	ea04 0402 	and.w	r4, r4, r2
 8001a52:	4a3f      	ldr	r2, [pc, #252]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x168>)
 8001a54:	fb02 f104 	mul.w	r1, r2, r4
 8001a58:	2200      	movs	r2, #0
 8001a5a:	fb02 f203 	mul.w	r2, r2, r3
 8001a5e:	440a      	add	r2, r1
 8001a60:	493b      	ldr	r1, [pc, #236]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x168>)
 8001a62:	fba3 0101 	umull	r0, r1, r3, r1
 8001a66:	1853      	adds	r3, r2, r1
 8001a68:	4619      	mov	r1, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f04f 0400 	mov.w	r4, #0
 8001a70:	461a      	mov	r2, r3
 8001a72:	4623      	mov	r3, r4
 8001a74:	f7fe ffa4 	bl	80009c0 <__aeabi_uldivmod>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	460c      	mov	r4, r1
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	e04c      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a80:	4a31      	ldr	r2, [pc, #196]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a82:	6852      	ldr	r2, [r2, #4]
 8001a84:	0992      	lsrs	r2, r2, #6
 8001a86:	4611      	mov	r1, r2
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f240 15ff 	movw	r5, #511	; 0x1ff
 8001a90:	f04f 0600 	mov.w	r6, #0
 8001a94:	ea05 0501 	and.w	r5, r5, r1
 8001a98:	ea06 0602 	and.w	r6, r6, r2
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	4632      	mov	r2, r6
 8001aa0:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8001aa4:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8001aa8:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8001aac:	4651      	mov	r1, sl
 8001aae:	465a      	mov	r2, fp
 8001ab0:	46aa      	mov	sl, r5
 8001ab2:	46b3      	mov	fp, r6
 8001ab4:	4655      	mov	r5, sl
 8001ab6:	465e      	mov	r6, fp
 8001ab8:	1b4d      	subs	r5, r1, r5
 8001aba:	eb62 0606 	sbc.w	r6, r2, r6
 8001abe:	4629      	mov	r1, r5
 8001ac0:	4632      	mov	r2, r6
 8001ac2:	0194      	lsls	r4, r2, #6
 8001ac4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ac8:	018b      	lsls	r3, r1, #6
 8001aca:	1a5b      	subs	r3, r3, r1
 8001acc:	eb64 0402 	sbc.w	r4, r4, r2
 8001ad0:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8001ad4:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8001ad8:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8001adc:	4643      	mov	r3, r8
 8001ade:	464c      	mov	r4, r9
 8001ae0:	4655      	mov	r5, sl
 8001ae2:	465e      	mov	r6, fp
 8001ae4:	18ed      	adds	r5, r5, r3
 8001ae6:	eb46 0604 	adc.w	r6, r6, r4
 8001aea:	462b      	mov	r3, r5
 8001aec:	4634      	mov	r4, r6
 8001aee:	02a2      	lsls	r2, r4, #10
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	029b      	lsls	r3, r3, #10
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	e897 0018 	ldmia.w	r7, {r3, r4}
 8001b02:	4618      	mov	r0, r3
 8001b04:	4621      	mov	r1, r4
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f04f 0400 	mov.w	r4, #0
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4623      	mov	r3, r4
 8001b10:	f7fe ff56 	bl	80009c0 <__aeabi_uldivmod>
 8001b14:	4603      	mov	r3, r0
 8001b16:	460c      	mov	r4, r1
 8001b18:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	0c1b      	lsrs	r3, r3, #16
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	3301      	adds	r3, #1
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b32:	613b      	str	r3, [r7, #16]
      break;
 8001b34:	e002      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x164>)
 8001b38:	613b      	str	r3, [r7, #16]
      break;
 8001b3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b3c:	693b      	ldr	r3, [r7, #16]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	371c      	adds	r7, #28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	00f42400 	.word	0x00f42400
 8001b50:	017d7840 	.word	0x017d7840

08001b54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e055      	b.n	8001c12 <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d106      	bne.n	8001b86 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f002 f847 	bl	8003c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2202      	movs	r2, #2
 8001b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b9c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6851      	ldr	r1, [r2, #4]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6892      	ldr	r2, [r2, #8]
 8001baa:	4311      	orrs	r1, r2
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	68d2      	ldr	r2, [r2, #12]
 8001bb0:	4311      	orrs	r1, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6912      	ldr	r2, [r2, #16]
 8001bb6:	4311      	orrs	r1, r2
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6952      	ldr	r2, [r2, #20]
 8001bbc:	4311      	orrs	r1, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6992      	ldr	r2, [r2, #24]
 8001bc2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001bc6:	4311      	orrs	r1, r2
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	69d2      	ldr	r2, [r2, #28]
 8001bcc:	4311      	orrs	r1, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6a12      	ldr	r2, [r2, #32]
 8001bd2:	4311      	orrs	r1, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6992      	ldr	r2, [r2, #24]
 8001be4:	0c12      	lsrs	r2, r2, #16
 8001be6:	f002 0104 	and.w	r1, r2, #4
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	69d2      	ldr	r2, [r2, #28]
 8001bfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b088      	sub	sp, #32
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	4613      	mov	r3, r2
 8001c28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_SPI_Transmit+0x22>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e11c      	b.n	8001e76 <HAL_SPI_Transmit+0x25c>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c44:	f7ff f8aa 	bl	8000d9c <HAL_GetTick>
 8001c48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d002      	beq.n	8001c60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c5e:	e101      	b.n	8001e64 <HAL_SPI_Transmit+0x24a>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <HAL_SPI_Transmit+0x52>
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d102      	bne.n	8001c72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c70:	e0f8      	b.n	8001e64 <HAL_SPI_Transmit+0x24a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2203      	movs	r2, #3
 8001c76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	88fa      	ldrh	r2, [r7, #6]
 8001c8a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	88fa      	ldrh	r2, [r7, #6]
 8001c90:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cb8:	d107      	bne.n	8001cca <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd4:	2b40      	cmp	r3, #64	; 0x40
 8001cd6:	d007      	beq.n	8001ce8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ce6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cf0:	d14b      	bne.n	8001d8a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <HAL_SPI_Transmit+0xe6>
 8001cfa:	8afb      	ldrh	r3, [r7, #22]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d13e      	bne.n	8001d7e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d08:	8812      	ldrh	r2, [r2, #0]
 8001d0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	1c9a      	adds	r2, r3, #2
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d24:	e02b      	b.n	8001d7e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d112      	bne.n	8001d5a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d3c:	8812      	ldrh	r2, [r2, #0]
 8001d3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	1c9a      	adds	r2, r3, #2
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d58:	e011      	b.n	8001d7e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d5a:	f7ff f81f 	bl	8000d9c <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	1ad2      	subs	r2, r2, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d303      	bcc.n	8001d72 <HAL_SPI_Transmit+0x158>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d70:	d102      	bne.n	8001d78 <HAL_SPI_Transmit+0x15e>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d7c:	e072      	b.n	8001e64 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1ce      	bne.n	8001d26 <HAL_SPI_Transmit+0x10c>
 8001d88:	e04c      	b.n	8001e24 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <HAL_SPI_Transmit+0x17e>
 8001d92:	8afb      	ldrh	r3, [r7, #22]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d140      	bne.n	8001e1a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	330c      	adds	r3, #12
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001da2:	7812      	ldrb	r2, [r2, #0]
 8001da4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	3b01      	subs	r3, #1
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001dbe:	e02c      	b.n	8001e1a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d113      	bne.n	8001df6 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	330c      	adds	r3, #12
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dd8:	7812      	ldrb	r2, [r2, #0]
 8001dda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	86da      	strh	r2, [r3, #54]	; 0x36
 8001df4:	e011      	b.n	8001e1a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001df6:	f7fe ffd1 	bl	8000d9c <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	1ad2      	subs	r2, r2, r3
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d303      	bcc.n	8001e0e <HAL_SPI_Transmit+0x1f4>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0c:	d102      	bne.n	8001e14 <HAL_SPI_Transmit+0x1fa>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d102      	bne.n	8001e1a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e18:	e024      	b.n	8001e64 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1cd      	bne.n	8001dc0 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	6839      	ldr	r1, [r7, #0]
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f000 f892 	bl	8001f52 <SPI_EndRxTxTransaction>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d002      	beq.n	8001e3a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2220      	movs	r2, #32
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10a      	bne.n	8001e58 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <HAL_SPI_Transmit+0x24a>
  {
    errorcode = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e74:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3720      	adds	r7, #32
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	603b      	str	r3, [r7, #0]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e8e:	e04c      	b.n	8001f2a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e96:	d048      	beq.n	8001f2a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001e98:	f7fe ff80 	bl	8000d9c <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	1ad2      	subs	r2, r2, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d202      	bcs.n	8001eae <SPI_WaitFlagStateUntilTimeout+0x30>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d13d      	bne.n	8001f2a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	6852      	ldr	r2, [r2, #4]
 8001eb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001ebc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ec6:	d111      	bne.n	8001eec <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ed0:	d004      	beq.n	8001edc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eda:	d107      	bne.n	8001eec <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	6812      	ldr	r2, [r2, #0]
 8001ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ef4:	d10f      	bne.n	8001f16 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	6812      	ldr	r2, [r2, #0]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e00f      	b.n	8001f4a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	401a      	ands	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	bf0c      	ite	eq
 8001f3a:	2301      	moveq	r3, #1
 8001f3c:	2300      	movne	r3, #0
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d1a3      	bne.n	8001e90 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af02      	add	r7, sp, #8
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2200      	movs	r2, #0
 8001f66:	2180      	movs	r1, #128	; 0x80
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f7ff ff88 	bl	8001e7e <SPI_WaitFlagStateUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f78:	f043 0220 	orr.w	r2, r3, #32
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e000      	b.n	8001f86 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e01d      	b.n	8001fdc <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d106      	bne.n	8001fba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f002 f9cf 	bl	8004358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4610      	mov	r0, r2
 8001fce:	f000 fc19 	bl	8002804 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	68d2      	ldr	r2, [r2, #12]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b06      	cmp	r3, #6
 800200c:	d007      	beq.n	800201e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	f042 0201 	orr.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e01d      	b.n	800207a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d106      	bne.n	8002058 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f815 	bl	8002082 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2202      	movs	r2, #2
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3304      	adds	r3, #4
 8002068:	4619      	mov	r1, r3
 800206a:	4610      	mov	r0, r2
 800206c:	f000 fbca 	bl	8002804 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2201      	movs	r2, #1
 80020a8:	6839      	ldr	r1, [r7, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fe94 	bl	8002dd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a15      	ldr	r2, [pc, #84]	; (800210c <HAL_TIM_PWM_Start+0x74>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d004      	beq.n	80020c4 <HAL_TIM_PWM_Start+0x2c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a14      	ldr	r2, [pc, #80]	; (8002110 <HAL_TIM_PWM_Start+0x78>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d101      	bne.n	80020c8 <HAL_TIM_PWM_Start+0x30>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <HAL_TIM_PWM_Start+0x32>
 80020c8:	2300      	movs	r3, #0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80020d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2b06      	cmp	r3, #6
 80020ee:	d007      	beq.n	8002100 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40010000 	.word	0x40010000
 8002110:	40010400 	.word	0x40010400

08002114 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e083      	b.n	8002230 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d106      	bne.n	8002142 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f002 f88d 	bl	800425c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2202      	movs	r2, #2
 8002146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002158:	f023 0307 	bic.w	r3, r3, #7
 800215c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3304      	adds	r3, #4
 8002166:	4619      	mov	r1, r3
 8002168:	4610      	mov	r0, r2
 800216a:	f000 fb4b 	bl	8002804 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4313      	orrs	r3, r2
 800218e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002196:	f023 0303 	bic.w	r3, r3, #3
 800219a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	021b      	lsls	r3, r3, #8
 80021a6:	4313      	orrs	r3, r2
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80021b4:	f023 030c 	bic.w	r3, r3, #12
 80021b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	4313      	orrs	r3, r2
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	011a      	lsls	r2, r3, #4
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	031b      	lsls	r3, r3, #12
 80021e4:	4313      	orrs	r3, r2
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80021f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80021fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	4313      	orrs	r3, r2
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <HAL_TIM_Encoder_Start+0x16>
 8002248:	2b04      	cmp	r3, #4
 800224a:	d008      	beq.n	800225e <HAL_TIM_Encoder_Start+0x26>
 800224c:	e00f      	b.n	800226e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2201      	movs	r2, #1
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fdbe 	bl	8002dd8 <TIM_CCxChannelCmd>
      break;
 800225c:	e016      	b.n	800228c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2201      	movs	r2, #1
 8002264:	2104      	movs	r1, #4
 8002266:	4618      	mov	r0, r3
 8002268:	f000 fdb6 	bl	8002dd8 <TIM_CCxChannelCmd>
      break;
 800226c:	e00e      	b.n	800228c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2201      	movs	r2, #1
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f000 fdae 	bl	8002dd8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2201      	movs	r2, #1
 8002282:	2104      	movs	r1, #4
 8002284:	4618      	mov	r0, r3
 8002286:	f000 fda7 	bl	8002dd8 <TIM_CCxChannelCmd>
      break;
 800228a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d122      	bne.n	8002302 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d11b      	bne.n	8002302 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f06f 0202 	mvn.w	r2, #2
 80022d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 fa6c 	bl	80027c6 <HAL_TIM_IC_CaptureCallback>
 80022ee:	e005      	b.n	80022fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 fa5e 	bl	80027b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fa6f 	bl	80027da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b04      	cmp	r3, #4
 800230e:	d122      	bne.n	8002356 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b04      	cmp	r3, #4
 800231c:	d11b      	bne.n	8002356 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f06f 0204 	mvn.w	r2, #4
 8002326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 fa42 	bl	80027c6 <HAL_TIM_IC_CaptureCallback>
 8002342:	e005      	b.n	8002350 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 fa34 	bl	80027b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fa45 	bl	80027da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b08      	cmp	r3, #8
 8002362:	d122      	bne.n	80023aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b08      	cmp	r3, #8
 8002370:	d11b      	bne.n	80023aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f06f 0208 	mvn.w	r2, #8
 800237a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2204      	movs	r2, #4
 8002380:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 fa18 	bl	80027c6 <HAL_TIM_IC_CaptureCallback>
 8002396:	e005      	b.n	80023a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fa0a 	bl	80027b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fa1b 	bl	80027da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d122      	bne.n	80023fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b10      	cmp	r3, #16
 80023c4:	d11b      	bne.n	80023fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f06f 0210 	mvn.w	r2, #16
 80023ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2208      	movs	r2, #8
 80023d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f9ee 	bl	80027c6 <HAL_TIM_IC_CaptureCallback>
 80023ea:	e005      	b.n	80023f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f9e0 	bl	80027b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f9f1 	bl	80027da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d10e      	bne.n	800242a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b01      	cmp	r3, #1
 8002418:	d107      	bne.n	800242a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f06f 0201 	mvn.w	r2, #1
 8002422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f001 fb9d 	bl	8003b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002434:	2b80      	cmp	r3, #128	; 0x80
 8002436:	d10e      	bne.n	8002456 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002442:	2b80      	cmp	r3, #128	; 0x80
 8002444:	d107      	bne.n	8002456 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800244e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 fd35 	bl	8002ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002460:	2b40      	cmp	r3, #64	; 0x40
 8002462:	d10e      	bne.n	8002482 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246e:	2b40      	cmp	r3, #64	; 0x40
 8002470:	d107      	bne.n	8002482 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800247a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f9b6 	bl	80027ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f003 0320 	and.w	r3, r3, #32
 800248c:	2b20      	cmp	r3, #32
 800248e:	d10e      	bne.n	80024ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	2b20      	cmp	r3, #32
 800249c:	d107      	bne.n	80024ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f06f 0220 	mvn.w	r2, #32
 80024a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fcff 	bl	8002eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e0b4      	b.n	800263c <HAL_TIM_PWM_ConfigChannel+0x184>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2202      	movs	r2, #2
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b0c      	cmp	r3, #12
 80024e6:	f200 809f 	bhi.w	8002628 <HAL_TIM_PWM_ConfigChannel+0x170>
 80024ea:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80024ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f0:	08002525 	.word	0x08002525
 80024f4:	08002629 	.word	0x08002629
 80024f8:	08002629 	.word	0x08002629
 80024fc:	08002629 	.word	0x08002629
 8002500:	08002565 	.word	0x08002565
 8002504:	08002629 	.word	0x08002629
 8002508:	08002629 	.word	0x08002629
 800250c:	08002629 	.word	0x08002629
 8002510:	080025a7 	.word	0x080025a7
 8002514:	08002629 	.word	0x08002629
 8002518:	08002629 	.word	0x08002629
 800251c:	08002629 	.word	0x08002629
 8002520:	080025e7 	.word	0x080025e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fa0a 	bl	8002944 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	6992      	ldr	r2, [r2, #24]
 800253a:	f042 0208 	orr.w	r2, r2, #8
 800253e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	6992      	ldr	r2, [r2, #24]
 800254a:	f022 0204 	bic.w	r2, r2, #4
 800254e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	6991      	ldr	r1, [r2, #24]
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	6912      	ldr	r2, [r2, #16]
 800255e:	430a      	orrs	r2, r1
 8002560:	619a      	str	r2, [r3, #24]
      break;
 8002562:	e062      	b.n	800262a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fa5a 	bl	8002a24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	6992      	ldr	r2, [r2, #24]
 800257a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800257e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	6992      	ldr	r2, [r2, #24]
 800258a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800258e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	6991      	ldr	r1, [r2, #24]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	6912      	ldr	r2, [r2, #16]
 800259e:	0212      	lsls	r2, r2, #8
 80025a0:	430a      	orrs	r2, r1
 80025a2:	619a      	str	r2, [r3, #24]
      break;
 80025a4:	e041      	b.n	800262a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68b9      	ldr	r1, [r7, #8]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 faaf 	bl	8002b10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	69d2      	ldr	r2, [r2, #28]
 80025bc:	f042 0208 	orr.w	r2, r2, #8
 80025c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	69d2      	ldr	r2, [r2, #28]
 80025cc:	f022 0204 	bic.w	r2, r2, #4
 80025d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	69d1      	ldr	r1, [r2, #28]
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	6912      	ldr	r2, [r2, #16]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	61da      	str	r2, [r3, #28]
      break;
 80025e4:	e021      	b.n	800262a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 fb03 	bl	8002bf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	69d2      	ldr	r2, [r2, #28]
 80025fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	69d2      	ldr	r2, [r2, #28]
 800260c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	69d1      	ldr	r1, [r2, #28]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	6912      	ldr	r2, [r2, #16]
 8002620:	0212      	lsls	r2, r2, #8
 8002622:	430a      	orrs	r2, r1
 8002624:	61da      	str	r2, [r3, #28]
      break;
 8002626:	e000      	b.n	800262a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002628:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_TIM_ConfigClockSource+0x18>
 8002658:	2302      	movs	r3, #2
 800265a:	e0a6      	b.n	80027aa <HAL_TIM_ConfigClockSource+0x166>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800267a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002682:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b40      	cmp	r3, #64	; 0x40
 8002692:	d067      	beq.n	8002764 <HAL_TIM_ConfigClockSource+0x120>
 8002694:	2b40      	cmp	r3, #64	; 0x40
 8002696:	d80b      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x6c>
 8002698:	2b10      	cmp	r3, #16
 800269a:	d073      	beq.n	8002784 <HAL_TIM_ConfigClockSource+0x140>
 800269c:	2b10      	cmp	r3, #16
 800269e:	d802      	bhi.n	80026a6 <HAL_TIM_ConfigClockSource+0x62>
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d06f      	beq.n	8002784 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80026a4:	e078      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	d06c      	beq.n	8002784 <HAL_TIM_ConfigClockSource+0x140>
 80026aa:	2b30      	cmp	r3, #48	; 0x30
 80026ac:	d06a      	beq.n	8002784 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80026ae:	e073      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026b0:	2b70      	cmp	r3, #112	; 0x70
 80026b2:	d00d      	beq.n	80026d0 <HAL_TIM_ConfigClockSource+0x8c>
 80026b4:	2b70      	cmp	r3, #112	; 0x70
 80026b6:	d804      	bhi.n	80026c2 <HAL_TIM_ConfigClockSource+0x7e>
 80026b8:	2b50      	cmp	r3, #80	; 0x50
 80026ba:	d033      	beq.n	8002724 <HAL_TIM_ConfigClockSource+0xe0>
 80026bc:	2b60      	cmp	r3, #96	; 0x60
 80026be:	d041      	beq.n	8002744 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80026c0:	e06a      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c6:	d066      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x152>
 80026c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026cc:	d017      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0xba>
      break;
 80026ce:	e063      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	6899      	ldr	r1, [r3, #8]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f000 fb5a 	bl	8002d98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	609a      	str	r2, [r3, #8]
      break;
 80026fc:	e04c      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6899      	ldr	r1, [r3, #8]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f000 fb43 	bl	8002d98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	6892      	ldr	r2, [r2, #8]
 800271c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002720:	609a      	str	r2, [r3, #8]
      break;
 8002722:	e039      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	461a      	mov	r2, r3
 8002732:	f000 fab7 	bl	8002ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2150      	movs	r1, #80	; 0x50
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fb10 	bl	8002d62 <TIM_ITRx_SetConfig>
      break;
 8002742:	e029      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	6859      	ldr	r1, [r3, #4]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	461a      	mov	r2, r3
 8002752:	f000 fad6 	bl	8002d02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2160      	movs	r1, #96	; 0x60
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fb00 	bl	8002d62 <TIM_ITRx_SetConfig>
      break;
 8002762:	e019      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	461a      	mov	r2, r3
 8002772:	f000 fa97 	bl	8002ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2140      	movs	r1, #64	; 0x40
 800277c:	4618      	mov	r0, r3
 800277e:	f000 faf0 	bl	8002d62 <TIM_ITRx_SetConfig>
      break;
 8002782:	e009      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4619      	mov	r1, r3
 800278e:	4610      	mov	r0, r2
 8002790:	f000 fae7 	bl	8002d62 <TIM_ITRx_SetConfig>
      break;
 8002794:	e000      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002796:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a40      	ldr	r2, [pc, #256]	; (8002918 <TIM_Base_SetConfig+0x114>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d013      	beq.n	8002844 <TIM_Base_SetConfig+0x40>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002822:	d00f      	beq.n	8002844 <TIM_Base_SetConfig+0x40>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a3d      	ldr	r2, [pc, #244]	; (800291c <TIM_Base_SetConfig+0x118>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00b      	beq.n	8002844 <TIM_Base_SetConfig+0x40>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a3c      	ldr	r2, [pc, #240]	; (8002920 <TIM_Base_SetConfig+0x11c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d007      	beq.n	8002844 <TIM_Base_SetConfig+0x40>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a3b      	ldr	r2, [pc, #236]	; (8002924 <TIM_Base_SetConfig+0x120>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d003      	beq.n	8002844 <TIM_Base_SetConfig+0x40>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a3a      	ldr	r2, [pc, #232]	; (8002928 <TIM_Base_SetConfig+0x124>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d108      	bne.n	8002856 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a2f      	ldr	r2, [pc, #188]	; (8002918 <TIM_Base_SetConfig+0x114>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d02b      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002864:	d027      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a2c      	ldr	r2, [pc, #176]	; (800291c <TIM_Base_SetConfig+0x118>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d023      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a2b      	ldr	r2, [pc, #172]	; (8002920 <TIM_Base_SetConfig+0x11c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d01f      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a2a      	ldr	r2, [pc, #168]	; (8002924 <TIM_Base_SetConfig+0x120>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d01b      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a29      	ldr	r2, [pc, #164]	; (8002928 <TIM_Base_SetConfig+0x124>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d017      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a28      	ldr	r2, [pc, #160]	; (800292c <TIM_Base_SetConfig+0x128>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d013      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a27      	ldr	r2, [pc, #156]	; (8002930 <TIM_Base_SetConfig+0x12c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00f      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a26      	ldr	r2, [pc, #152]	; (8002934 <TIM_Base_SetConfig+0x130>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00b      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a25      	ldr	r2, [pc, #148]	; (8002938 <TIM_Base_SetConfig+0x134>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d007      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a24      	ldr	r2, [pc, #144]	; (800293c <TIM_Base_SetConfig+0x138>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d003      	beq.n	80028b6 <TIM_Base_SetConfig+0xb2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a23      	ldr	r2, [pc, #140]	; (8002940 <TIM_Base_SetConfig+0x13c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d108      	bne.n	80028c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <TIM_Base_SetConfig+0x114>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d003      	beq.n	80028fc <TIM_Base_SetConfig+0xf8>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a0c      	ldr	r2, [pc, #48]	; (8002928 <TIM_Base_SetConfig+0x124>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d103      	bne.n	8002904 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	615a      	str	r2, [r3, #20]
}
 800290a:	bf00      	nop
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40010000 	.word	0x40010000
 800291c:	40000400 	.word	0x40000400
 8002920:	40000800 	.word	0x40000800
 8002924:	40000c00 	.word	0x40000c00
 8002928:	40010400 	.word	0x40010400
 800292c:	40014000 	.word	0x40014000
 8002930:	40014400 	.word	0x40014400
 8002934:	40014800 	.word	0x40014800
 8002938:	40001800 	.word	0x40001800
 800293c:	40001c00 	.word	0x40001c00
 8002940:	40002000 	.word	0x40002000

08002944 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	f023 0201 	bic.w	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0303 	bic.w	r3, r3, #3
 800297a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f023 0302 	bic.w	r3, r3, #2
 800298c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4313      	orrs	r3, r2
 8002996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a20      	ldr	r2, [pc, #128]	; (8002a1c <TIM_OC1_SetConfig+0xd8>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d003      	beq.n	80029a8 <TIM_OC1_SetConfig+0x64>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a1f      	ldr	r2, [pc, #124]	; (8002a20 <TIM_OC1_SetConfig+0xdc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d10c      	bne.n	80029c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f023 0308 	bic.w	r3, r3, #8
 80029ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f023 0304 	bic.w	r3, r3, #4
 80029c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a15      	ldr	r2, [pc, #84]	; (8002a1c <TIM_OC1_SetConfig+0xd8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d003      	beq.n	80029d2 <TIM_OC1_SetConfig+0x8e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a14      	ldr	r2, [pc, #80]	; (8002a20 <TIM_OC1_SetConfig+0xdc>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d111      	bne.n	80029f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	621a      	str	r2, [r3, #32]
}
 8002a10:	bf00      	nop
 8002a12:	371c      	adds	r7, #28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	40010000 	.word	0x40010000
 8002a20:	40010400 	.word	0x40010400

08002a24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	f023 0210 	bic.w	r2, r3, #16
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f023 0320 	bic.w	r3, r3, #32
 8002a6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a22      	ldr	r2, [pc, #136]	; (8002b08 <TIM_OC2_SetConfig+0xe4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d003      	beq.n	8002a8c <TIM_OC2_SetConfig+0x68>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a21      	ldr	r2, [pc, #132]	; (8002b0c <TIM_OC2_SetConfig+0xe8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d10d      	bne.n	8002aa8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aa6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a17      	ldr	r2, [pc, #92]	; (8002b08 <TIM_OC2_SetConfig+0xe4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d003      	beq.n	8002ab8 <TIM_OC2_SetConfig+0x94>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a16      	ldr	r2, [pc, #88]	; (8002b0c <TIM_OC2_SetConfig+0xe8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d113      	bne.n	8002ae0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002abe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	621a      	str	r2, [r3, #32]
}
 8002afa:	bf00      	nop
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	40010400 	.word	0x40010400

08002b10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f023 0303 	bic.w	r3, r3, #3
 8002b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a21      	ldr	r2, [pc, #132]	; (8002bf0 <TIM_OC3_SetConfig+0xe0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d003      	beq.n	8002b76 <TIM_OC3_SetConfig+0x66>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a20      	ldr	r2, [pc, #128]	; (8002bf4 <TIM_OC3_SetConfig+0xe4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d10d      	bne.n	8002b92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	021b      	lsls	r3, r3, #8
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a16      	ldr	r2, [pc, #88]	; (8002bf0 <TIM_OC3_SetConfig+0xe0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d003      	beq.n	8002ba2 <TIM_OC3_SetConfig+0x92>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <TIM_OC3_SetConfig+0xe4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d113      	bne.n	8002bca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	621a      	str	r2, [r3, #32]
}
 8002be4:	bf00      	nop
 8002be6:	371c      	adds	r7, #28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	40010000 	.word	0x40010000
 8002bf4:	40010400 	.word	0x40010400

08002bf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	021b      	lsls	r3, r3, #8
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	031b      	lsls	r3, r3, #12
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a12      	ldr	r2, [pc, #72]	; (8002c9c <TIM_OC4_SetConfig+0xa4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d003      	beq.n	8002c60 <TIM_OC4_SetConfig+0x68>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a11      	ldr	r2, [pc, #68]	; (8002ca0 <TIM_OC4_SetConfig+0xa8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d109      	bne.n	8002c74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	019b      	lsls	r3, r3, #6
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	621a      	str	r2, [r3, #32]
}
 8002c8e:	bf00      	nop
 8002c90:	371c      	adds	r7, #28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40010000 	.word	0x40010000
 8002ca0:	40010400 	.word	0x40010400

08002ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	f023 0201 	bic.w	r2, r3, #1
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f023 030a 	bic.w	r3, r3, #10
 8002ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	621a      	str	r2, [r3, #32]
}
 8002cf6:	bf00      	nop
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b087      	sub	sp, #28
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	f023 0210 	bic.w	r2, r3, #16
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	031b      	lsls	r3, r3, #12
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	621a      	str	r2, [r3, #32]
}
 8002d56:	bf00      	nop
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b085      	sub	sp, #20
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
 8002d6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f043 0307 	orr.w	r3, r3, #7
 8002d84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	609a      	str	r2, [r3, #8]
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002db2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	021a      	lsls	r2, r3, #8
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	609a      	str	r2, [r3, #8]
}
 8002dcc:	bf00      	nop
 8002dce:	371c      	adds	r7, #28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	2201      	movs	r2, #1
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a1a      	ldr	r2, [r3, #32]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a1a      	ldr	r2, [r3, #32]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	431a      	orrs	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	621a      	str	r2, [r3, #32]
}
 8002e16:	bf00      	nop
 8002e18:	371c      	adds	r7, #28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e032      	b.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2202      	movs	r2, #2
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e72:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <uGetCounterTim>:
 *      Author: kkarp
 */
#include "Motor_Control.h"

uint16_t uGetCounterTim(TIM_TypeDef* tim)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
	return tim->CNT;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	b29b      	uxth	r3, r3
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <uClearCounter>:
uint8_t uClearCounter(TIM_TypeDef* tim)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
	tim->CNT = 0;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	625a      	str	r2, [r3, #36]	; 0x24

//	if (tim->CNT == 0)
//		return 1;
//	else
//		return 0;
}
 8002efc:	bf00      	nop
 8002efe:	4618      	mov	r0, r3
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <vMotor_init>:
void vMotor_init(Motor_InitTypeDef* Motor_InitStruct1,
		Motor_InitTypeDef* Motor_InitStruct2)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
	Motor_InitStruct1->Motor_GPIO_int1 = Motor_GPIO_pin1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a1c      	ldr	r2, [pc, #112]	; (8002f8c <vMotor_init+0x80>)
 8002f1a:	609a      	str	r2, [r3, #8]
	Motor_InitStruct1->Motor_GPIO_int2 = Motor_GPIO_pin2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a1b      	ldr	r2, [pc, #108]	; (8002f8c <vMotor_init+0x80>)
 8002f20:	611a      	str	r2, [r3, #16]
	Motor_InitStruct1->Motor_Pin_int1 = Motor_Pin1;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f28:	819a      	strh	r2, [r3, #12]
	Motor_InitStruct1->Motor_Pin_int2 = Motor_Pin2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f30:	829a      	strh	r2, [r3, #20]
	Motor_InitStruct1->number_turns = 0;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	61da      	str	r2, [r3, #28]
	Motor_InitStruct1->speed = 0;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	759a      	strb	r2, [r3, #22]
	Motor_InitStruct1->Tim_Encoder = Motor1_Encoder;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <vMotor_init+0x84>)
 8002f42:	601a      	str	r2, [r3, #0]
	Motor_InitStruct1->Tim_PWM = Motor1_PWM;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a13      	ldr	r2, [pc, #76]	; (8002f94 <vMotor_init+0x88>)
 8002f48:	605a      	str	r2, [r3, #4]

	Motor_InitStruct2->Motor_GPIO_int1 = Motor_GPIO_pin3;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	4a0f      	ldr	r2, [pc, #60]	; (8002f8c <vMotor_init+0x80>)
 8002f4e:	609a      	str	r2, [r3, #8]
	Motor_InitStruct2->Motor_GPIO_int2 = Motor_GPIO_pin4;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	4a0e      	ldr	r2, [pc, #56]	; (8002f8c <vMotor_init+0x80>)
 8002f54:	611a      	str	r2, [r3, #16]
	Motor_InitStruct2->Motor_Pin_int1 = Motor_Pin3;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f5c:	819a      	strh	r2, [r3, #12]
	Motor_InitStruct2->Motor_Pin_int2 = Motor_Pin4;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f64:	829a      	strh	r2, [r3, #20]
	Motor_InitStruct2->number_turns = 0;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	61da      	str	r2, [r3, #28]
	Motor_InitStruct2->speed = 0;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	759a      	strb	r2, [r3, #22]
	Motor_InitStruct2->Tim_Encoder = Motor2_Encoder;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	4a08      	ldr	r2, [pc, #32]	; (8002f98 <vMotor_init+0x8c>)
 8002f76:	601a      	str	r2, [r3, #0]
	Motor_InitStruct2->Tim_PWM = Motor2_PWM;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	4a08      	ldr	r2, [pc, #32]	; (8002f9c <vMotor_init+0x90>)
 8002f7c:	605a      	str	r2, [r3, #4]
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40021800 	.word	0x40021800
 8002f90:	40000800 	.word	0x40000800
 8002f94:	40001c00 	.word	0x40001c00
 8002f98:	40010400 	.word	0x40010400
 8002f9c:	40002000 	.word	0x40002000

08002fa0 <vMotor_Control>:
void vMotor_Control(Motor_InitTypeDef* motor, uint8_t eBridgeControl)

{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	70fb      	strb	r3, [r7, #3]
	switch (eBridgeControl)
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d862      	bhi.n	8003078 <vMotor_Control+0xd8>
 8002fb2:	a201      	add	r2, pc, #4	; (adr r2, 8002fb8 <vMotor_Control+0x18>)
 8002fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb8:	08002fc9 	.word	0x08002fc9
 8002fbc:	08002ff7 	.word	0x08002ff7
 8002fc0:	08003023 	.word	0x08003023
 8002fc4:	0800304f 	.word	0x0800304f
	{
	case BreakeHard:
		HAL_GPIO_WritePin(motor->Motor_GPIO_int1, motor->Motor_Pin_int1,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6898      	ldr	r0, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	899b      	ldrh	r3, [r3, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	f7fe f9ca 	bl	800136c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(motor->Motor_GPIO_int2, motor->Motor_Pin_int2,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6918      	ldr	r0, [r3, #16]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	8a9b      	ldrh	r3, [r3, #20]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	f7fe f9c2 	bl	800136c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		motor->Tim_PWM->CCR1 = motor->Tim_PWM->ARR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6852      	ldr	r2, [r2, #4]
 8002ff0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ff2:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 8002ff4:	e041      	b.n	800307a <vMotor_Control+0xda>
	case Back:
		HAL_GPIO_WritePin(motor->Motor_GPIO_int1, motor->Motor_Pin_int1,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6898      	ldr	r0, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	899b      	ldrh	r3, [r3, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	4619      	mov	r1, r3
 8003002:	f7fe f9b3 	bl	800136c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(motor->Motor_GPIO_int2, motor->Motor_Pin_int2,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6918      	ldr	r0, [r3, #16]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	8a9b      	ldrh	r3, [r3, #20]
 800300e:	2201      	movs	r2, #1
 8003010:	4619      	mov	r1, r3
 8003012:	f7fe f9ab 	bl	800136c <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		motor->Tim_PWM->CCR1 = motor->dutyPWM;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6992      	ldr	r2, [r2, #24]
 800301e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8003020:	e02b      	b.n	800307a <vMotor_Control+0xda>
	case Forward:
		HAL_GPIO_WritePin(motor->Motor_GPIO_int1, motor->Motor_Pin_int1,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6898      	ldr	r0, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	899b      	ldrh	r3, [r3, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	4619      	mov	r1, r3
 800302e:	f7fe f99d 	bl	800136c <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		HAL_GPIO_WritePin(motor->Motor_GPIO_int2, motor->Motor_Pin_int2,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6918      	ldr	r0, [r3, #16]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	8a9b      	ldrh	r3, [r3, #20]
 800303a:	2200      	movs	r2, #0
 800303c:	4619      	mov	r1, r3
 800303e:	f7fe f995 	bl	800136c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		motor->Tim_PWM->CCR1 = motor->dutyPWM;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6992      	ldr	r2, [r2, #24]
 800304a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800304c:	e015      	b.n	800307a <vMotor_Control+0xda>
	case BreakeSoft:
		HAL_GPIO_WritePin(motor->Motor_GPIO_int1, motor->Motor_Pin_int1,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6898      	ldr	r0, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	899b      	ldrh	r3, [r3, #12]
 8003056:	2201      	movs	r2, #1
 8003058:	4619      	mov	r1, r3
 800305a:	f7fe f987 	bl	800136c <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		HAL_GPIO_WritePin(motor->Motor_GPIO_int2, motor->Motor_Pin_int2,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6918      	ldr	r0, [r3, #16]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	8a9b      	ldrh	r3, [r3, #20]
 8003066:	2201      	movs	r2, #1
 8003068:	4619      	mov	r1, r3
 800306a:	f7fe f97f 	bl	800136c <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		motor->Tim_PWM->CCR1 = 0;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8003076:	e000      	b.n	800307a <vMotor_Control+0xda>
	default:
		break;
 8003078:	bf00      	nop
	}

}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop

08003084 <vMotor_SetPWM>:
void vMotor_SetPWM(Motor_InitTypeDef* motor, uint8_t dutyPWM)
{
 8003084:	b590      	push	{r4, r7, lr}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	70fb      	strb	r3, [r7, #3]
	motor->dutyPWM = (motor->Tim_PWM->ARR * dutyPWM) / 100.0;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	fb02 f303 	mul.w	r3, r2, r3
 800309c:	4618      	mov	r0, r3
 800309e:	f7fd f9e7 	bl	8000470 <__aeabi_ui2d>
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <vMotor_SetPWM+0x4c>)
 80030a8:	f7fd fb82 	bl	80007b0 <__aeabi_ddiv>
 80030ac:	4603      	mov	r3, r0
 80030ae:	460c      	mov	r4, r1
 80030b0:	4618      	mov	r0, r3
 80030b2:	4621      	mov	r1, r4
 80030b4:	f7fd fc64 	bl	8000980 <__aeabi_d2uiz>
 80030b8:	4602      	mov	r2, r0
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	619a      	str	r2, [r3, #24]
	motor->Tim_PWM->CCR1 = motor->dutyPWM;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6992      	ldr	r2, [r2, #24]
 80030c6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd90      	pop	{r4, r7, pc}
 80030d0:	40590000 	.word	0x40590000

080030d4 <vMotorPID_init>:

void vMotorPID_init(MotorPID_InitTypeDef* PID1, MotorPID_InitTypeDef* PID2)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
	PID1->e_last = 0;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	611a      	str	r2, [r3, #16]
	PID1->e_sum = 0;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	615a      	str	r2, [r3, #20]
	PID1->e_sumMax = MaxPIDki;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a15      	ldr	r2, [pc, #84]	; (8003148 <vMotorPID_init+0x74>)
 80030f2:	619a      	str	r2, [r3, #24]
	PID1->kp = KdValue1;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a15      	ldr	r2, [pc, #84]	; (800314c <vMotorPID_init+0x78>)
 80030f8:	601a      	str	r2, [r3, #0]
	PID1->ki = KiValue1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a14      	ldr	r2, [pc, #80]	; (8003150 <vMotorPID_init+0x7c>)
 80030fe:	605a      	str	r2, [r3, #4]
	PID1->kd = KdValue1;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a12      	ldr	r2, [pc, #72]	; (800314c <vMotorPID_init+0x78>)
 8003104:	609a      	str	r2, [r3, #8]
	PID1->ValueTask = 90;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a12      	ldr	r2, [pc, #72]	; (8003154 <vMotorPID_init+0x80>)
 800310a:	61da      	str	r2, [r3, #28]

	PID2->e_last = 0;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	611a      	str	r2, [r3, #16]
	PID2->e_sum = 0;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	615a      	str	r2, [r3, #20]
	PID2->e_sumMax = MaxPIDki;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	4a0a      	ldr	r2, [pc, #40]	; (8003148 <vMotorPID_init+0x74>)
 8003120:	619a      	str	r2, [r3, #24]
	PID2->kp = KdValue2;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	4a09      	ldr	r2, [pc, #36]	; (800314c <vMotorPID_init+0x78>)
 8003126:	601a      	str	r2, [r3, #0]
	PID2->ki = KiValue2;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	4a09      	ldr	r2, [pc, #36]	; (8003150 <vMotorPID_init+0x7c>)
 800312c:	605a      	str	r2, [r3, #4]
	PID2->kd = KdValue2;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	4a06      	ldr	r2, [pc, #24]	; (800314c <vMotorPID_init+0x78>)
 8003132:	609a      	str	r2, [r3, #8]
	PID2->ValueTask = 90;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	4a07      	ldr	r2, [pc, #28]	; (8003154 <vMotorPID_init+0x80>)
 8003138:	61da      	str	r2, [r3, #28]
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	461c4000 	.word	0x461c4000
 800314c:	bcf5c28f 	.word	0xbcf5c28f
 8003150:	3d4ccccd 	.word	0x3d4ccccd
 8003154:	42b40000 	.word	0x42b40000

08003158 <vMotorPID_Control>:
void vMotorPID_Control(MotorPID_InitTypeDef* MotorPID, Motor_InitTypeDef* Motor)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	ed2d 8b02 	vpush	{d8}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
	MotorPID->e = MotorPID->ValueTask - uGetCounterTim(Motor->Tim_Encoder);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	ed93 8a07 	vldr	s16, [r3, #28]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff feaf 	bl	8002ed4 <uGetCounterTim>
 8003176:	4603      	mov	r3, r0
 8003178:	ee07 3a90 	vmov	s15, r3
 800317c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003180:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	edc3 7a03 	vstr	s15, [r3, #12]
	MotorPID->e_sum += MotorPID->e;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	ed93 7a05 	vldr	s14, [r3, #20]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	edd3 7a03 	vldr	s15, [r3, #12]
 8003196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	edc3 7a05 	vstr	s15, [r3, #20]
	if (MotorPID->e_sum > MotorPID->e_sumMax)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	ed93 7a05 	vldr	s14, [r3, #20]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80031ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b4:	dd03      	ble.n	80031be <vMotorPID_Control+0x66>
		MotorPID->e_sum = MotorPID->e_sumMax;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699a      	ldr	r2, [r3, #24]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	615a      	str	r2, [r3, #20]

	MotorPID->ExecutionValue = MotorPID->kp * MotorPID->e
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	ed93 7a00 	vldr	s14, [r3]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80031ca:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ MotorPID->ki * MotorPID->e_sum
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	edd3 6a01 	vldr	s13, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	edd3 7a05 	vldr	s15, [r3, #20]
 80031da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031de:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ MotorPID->kd * (MotorPID->e - MotorPID->e_last);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	ed93 6a03 	vldr	s12, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80031f4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80031f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031fc:	ee77 7a27 	vadd.f32	s15, s14, s15
	MotorPID->ExecutionValue = MotorPID->kp * MotorPID->e
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	edc3 7a08 	vstr	s15, [r3, #32]

	MotorPID->e_last = MotorPID->e;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	611a      	str	r2, [r3, #16]
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	ecbd 8b02 	vpop	{d8}
 8003218:	bd80      	pop	{r7, pc}

0800321a <ssd1306_write_byte>:
 *                           0: Writes to the command register
 *                           1: Writes to the display data ram
 * @retval None
 **/
static void ssd1306_write_byte(uint8_t chData, uint8_t chCmd)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	4603      	mov	r3, r0
 8003222:	460a      	mov	r2, r1
 8003224:	71fb      	strb	r3, [r7, #7]
 8003226:	4613      	mov	r3, r2
 8003228:	71bb      	strb	r3, [r7, #6]
#ifdef INTERFACE_4WIRE_SPI

	SSD1306_CS_CLR();
 800322a:	f000 f9b5 	bl	8003598 <SSD1306_CS_CLR>

	if (chCmd)
 800322e:	79bb      	ldrb	r3, [r7, #6]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <ssd1306_write_byte+0x20>
	{
		SSD1306_DC_SET();
 8003234:	f000 f9c8 	bl	80035c8 <SSD1306_DC_SET>
 8003238:	e001      	b.n	800323e <ssd1306_write_byte+0x24>
	} else
	{
		SSD1306_DC_CLR();
 800323a:	f000 f9d1 	bl	80035e0 <SSD1306_DC_CLR>
	}
	SSD1306_WRITE_BYTE(chData);
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	4618      	mov	r0, r3
 8003242:	f000 f9d9 	bl	80035f8 <SSD1306_WRITE_BYTE>

	SSD1306_DC_SET();
 8003246:	f000 f9bf 	bl	80035c8 <SSD1306_DC_SET>
	SSD1306_CS_SET();
 800324a:	f000 f999 	bl	8003580 <SSD1306_CS_SET>
	iic_wait_for_ack();

	iic_stop();

#endif
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <ssd1306_refresh_gram>:
 *
 * @retval  None
 **/

void ssd1306_refresh_gram(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
	uint8_t i, j;

	for (i = 0; i < 8; i++)
 800325e:	2300      	movs	r3, #0
 8003260:	71fb      	strb	r3, [r7, #7]
 8003262:	e026      	b.n	80032b2 <ssd1306_refresh_gram+0x5a>
	{
		ssd1306_write_byte(0xB0 + i, SSD1306_CMD);
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	3b50      	subs	r3, #80	; 0x50
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2100      	movs	r1, #0
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ffd4 	bl	800321a <ssd1306_write_byte>
		__SET_COL_START_ADDR()
 8003272:	2100      	movs	r1, #0
 8003274:	2002      	movs	r0, #2
 8003276:	f7ff ffd0 	bl	800321a <ssd1306_write_byte>
 800327a:	2100      	movs	r1, #0
 800327c:	2010      	movs	r0, #16
 800327e:	f7ff ffcc 	bl	800321a <ssd1306_write_byte>
		;
		for (j = 0; j < 128; j++)
 8003282:	2300      	movs	r3, #0
 8003284:	71bb      	strb	r3, [r7, #6]
 8003286:	e00d      	b.n	80032a4 <ssd1306_refresh_gram+0x4c>
		{
			ssd1306_write_byte(s_chDispalyBuffer[j][i], SSD1306_DAT);
 8003288:	79ba      	ldrb	r2, [r7, #6]
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	490c      	ldr	r1, [pc, #48]	; (80032c0 <ssd1306_refresh_gram+0x68>)
 800328e:	00d2      	lsls	r2, r2, #3
 8003290:	440a      	add	r2, r1
 8003292:	4413      	add	r3, r2
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2101      	movs	r1, #1
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ffbe 	bl	800321a <ssd1306_write_byte>
		for (j = 0; j < 128; j++)
 800329e:	79bb      	ldrb	r3, [r7, #6]
 80032a0:	3301      	adds	r3, #1
 80032a2:	71bb      	strb	r3, [r7, #6]
 80032a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	daed      	bge.n	8003288 <ssd1306_refresh_gram+0x30>
	for (i = 0; i < 8; i++)
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	3301      	adds	r3, #1
 80032b0:	71fb      	strb	r3, [r7, #7]
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	2b07      	cmp	r3, #7
 80032b6:	d9d5      	bls.n	8003264 <ssd1306_refresh_gram+0xc>
		}
	}
}
 80032b8:	bf00      	nop
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	2000008c 	.word	0x2000008c

080032c4 <ssd1306_clear_screen>:
 *
 * @retval  None
 **/

void ssd1306_clear_screen(uint8_t chFill)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	71fb      	strb	r3, [r7, #7]
	uint8_t i, j;

	for (i = 0; i < 8; i++)
 80032ce:	2300      	movs	r3, #0
 80032d0:	73fb      	strb	r3, [r7, #15]
 80032d2:	e023      	b.n	800331c <ssd1306_clear_screen+0x58>
	{
		ssd1306_write_byte(0xB0 + i, SSD1306_CMD);
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	3b50      	subs	r3, #80	; 0x50
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2100      	movs	r1, #0
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff9c 	bl	800321a <ssd1306_write_byte>
		__SET_COL_START_ADDR()
 80032e2:	2100      	movs	r1, #0
 80032e4:	2002      	movs	r0, #2
 80032e6:	f7ff ff98 	bl	800321a <ssd1306_write_byte>
 80032ea:	2100      	movs	r1, #0
 80032ec:	2010      	movs	r0, #16
 80032ee:	f7ff ff94 	bl	800321a <ssd1306_write_byte>
		;
		for (j = 0; j < 128; j++)
 80032f2:	2300      	movs	r3, #0
 80032f4:	73bb      	strb	r3, [r7, #14]
 80032f6:	e00a      	b.n	800330e <ssd1306_clear_screen+0x4a>
		{
			s_chDispalyBuffer[j][i] = chFill;
 80032f8:	7bba      	ldrb	r2, [r7, #14]
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	490c      	ldr	r1, [pc, #48]	; (8003330 <ssd1306_clear_screen+0x6c>)
 80032fe:	00d2      	lsls	r2, r2, #3
 8003300:	440a      	add	r2, r1
 8003302:	4413      	add	r3, r2
 8003304:	79fa      	ldrb	r2, [r7, #7]
 8003306:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 128; j++)
 8003308:	7bbb      	ldrb	r3, [r7, #14]
 800330a:	3301      	adds	r3, #1
 800330c:	73bb      	strb	r3, [r7, #14]
 800330e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003312:	2b00      	cmp	r3, #0
 8003314:	daf0      	bge.n	80032f8 <ssd1306_clear_screen+0x34>
	for (i = 0; i < 8; i++)
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	3301      	adds	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	2b07      	cmp	r3, #7
 8003320:	d9d8      	bls.n	80032d4 <ssd1306_clear_screen+0x10>
		}
	}

	ssd1306_refresh_gram();
 8003322:	f7ff ff99 	bl	8003258 <ssd1306_refresh_gram>
}
 8003326:	bf00      	nop
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	2000008c 	.word	0x2000008c

08003334 <ssd1306_draw_point>:
 *
 * @retval None
 **/

void ssd1306_draw_point(uint8_t chXpos, uint8_t chYpos, uint8_t chPoint)
{
 8003334:	b490      	push	{r4, r7}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	71fb      	strb	r3, [r7, #7]
 800333e:	460b      	mov	r3, r1
 8003340:	71bb      	strb	r3, [r7, #6]
 8003342:	4613      	mov	r3, r2
 8003344:	717b      	strb	r3, [r7, #5]
	uint8_t chPos, chBx, chTemp = 0;
 8003346:	2300      	movs	r3, #0
 8003348:	73fb      	strb	r3, [r7, #15]

	if (chXpos > 127 || chYpos > 63)
 800334a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334e:	2b00      	cmp	r3, #0
 8003350:	db41      	blt.n	80033d6 <ssd1306_draw_point+0xa2>
 8003352:	79bb      	ldrb	r3, [r7, #6]
 8003354:	2b3f      	cmp	r3, #63	; 0x3f
 8003356:	d83e      	bhi.n	80033d6 <ssd1306_draw_point+0xa2>
	{
		return;
	}
	chPos = 7 - chYpos / 8; // 
 8003358:	79bb      	ldrb	r3, [r7, #6]
 800335a:	08db      	lsrs	r3, r3, #3
 800335c:	b2db      	uxtb	r3, r3
 800335e:	f1c3 0307 	rsb	r3, r3, #7
 8003362:	73bb      	strb	r3, [r7, #14]
	chBx = chYpos % 8;
 8003364:	79bb      	ldrb	r3, [r7, #6]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	737b      	strb	r3, [r7, #13]
	chTemp = 1 << (7 - chBx);
 800336c:	7b7b      	ldrb	r3, [r7, #13]
 800336e:	f1c3 0307 	rsb	r3, r3, #7
 8003372:	2201      	movs	r2, #1
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	73fb      	strb	r3, [r7, #15]

	if (chPoint)
 800337a:	797b      	ldrb	r3, [r7, #5]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d012      	beq.n	80033a6 <ssd1306_draw_point+0x72>
	{
		s_chDispalyBuffer[chXpos][chPos] |= chTemp;
 8003380:	79fa      	ldrb	r2, [r7, #7]
 8003382:	7bbb      	ldrb	r3, [r7, #14]
 8003384:	79f8      	ldrb	r0, [r7, #7]
 8003386:	7bb9      	ldrb	r1, [r7, #14]
 8003388:	4c15      	ldr	r4, [pc, #84]	; (80033e0 <ssd1306_draw_point+0xac>)
 800338a:	00c0      	lsls	r0, r0, #3
 800338c:	4420      	add	r0, r4
 800338e:	4401      	add	r1, r0
 8003390:	7808      	ldrb	r0, [r1, #0]
 8003392:	7bf9      	ldrb	r1, [r7, #15]
 8003394:	4301      	orrs	r1, r0
 8003396:	b2c8      	uxtb	r0, r1
 8003398:	4911      	ldr	r1, [pc, #68]	; (80033e0 <ssd1306_draw_point+0xac>)
 800339a:	00d2      	lsls	r2, r2, #3
 800339c:	440a      	add	r2, r1
 800339e:	4413      	add	r3, r2
 80033a0:	4602      	mov	r2, r0
 80033a2:	701a      	strb	r2, [r3, #0]
 80033a4:	e018      	b.n	80033d8 <ssd1306_draw_point+0xa4>

	} else
	{
		s_chDispalyBuffer[chXpos][chPos] &= ~chTemp;
 80033a6:	79fa      	ldrb	r2, [r7, #7]
 80033a8:	7bbb      	ldrb	r3, [r7, #14]
 80033aa:	79f8      	ldrb	r0, [r7, #7]
 80033ac:	7bb9      	ldrb	r1, [r7, #14]
 80033ae:	4c0c      	ldr	r4, [pc, #48]	; (80033e0 <ssd1306_draw_point+0xac>)
 80033b0:	00c0      	lsls	r0, r0, #3
 80033b2:	4420      	add	r0, r4
 80033b4:	4401      	add	r1, r0
 80033b6:	7809      	ldrb	r1, [r1, #0]
 80033b8:	b248      	sxtb	r0, r1
 80033ba:	f997 100f 	ldrsb.w	r1, [r7, #15]
 80033be:	43c9      	mvns	r1, r1
 80033c0:	b249      	sxtb	r1, r1
 80033c2:	4001      	ands	r1, r0
 80033c4:	b249      	sxtb	r1, r1
 80033c6:	b2c8      	uxtb	r0, r1
 80033c8:	4905      	ldr	r1, [pc, #20]	; (80033e0 <ssd1306_draw_point+0xac>)
 80033ca:	00d2      	lsls	r2, r2, #3
 80033cc:	440a      	add	r2, r1
 80033ce:	4413      	add	r3, r2
 80033d0:	4602      	mov	r2, r0
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	e000      	b.n	80033d8 <ssd1306_draw_point+0xa4>
		return;
 80033d6:	bf00      	nop
	}
}
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc90      	pop	{r4, r7}
 80033de:	4770      	bx	lr
 80033e0:	2000008c 	.word	0x2000008c

080033e4 <ssd1306_draw_bitmap>:
	}
}

void ssd1306_draw_bitmap(uint8_t chXpos, uint8_t chYpos, const uint8_t *pchBmp,
		uint8_t chWidth, uint8_t chHeight)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	603a      	str	r2, [r7, #0]
 80033ec:	461a      	mov	r2, r3
 80033ee:	4603      	mov	r3, r0
 80033f0:	71fb      	strb	r3, [r7, #7]
 80033f2:	460b      	mov	r3, r1
 80033f4:	71bb      	strb	r3, [r7, #6]
 80033f6:	4613      	mov	r3, r2
 80033f8:	717b      	strb	r3, [r7, #5]
	uint16_t i, j, byteWidth = (chWidth + 7) / 8;
 80033fa:	797b      	ldrb	r3, [r7, #5]
 80033fc:	3307      	adds	r3, #7
 80033fe:	2b00      	cmp	r3, #0
 8003400:	da00      	bge.n	8003404 <ssd1306_draw_bitmap+0x20>
 8003402:	3307      	adds	r3, #7
 8003404:	10db      	asrs	r3, r3, #3
 8003406:	817b      	strh	r3, [r7, #10]

	for (j = 0; j < chHeight; j++)
 8003408:	2300      	movs	r3, #0
 800340a:	81bb      	strh	r3, [r7, #12]
 800340c:	e031      	b.n	8003472 <ssd1306_draw_bitmap+0x8e>
	{
		for (i = 0; i < chWidth; i++)
 800340e:	2300      	movs	r3, #0
 8003410:	81fb      	strh	r3, [r7, #14]
 8003412:	e026      	b.n	8003462 <ssd1306_draw_bitmap+0x7e>
		{
			if (*(pchBmp + j * byteWidth + i / 8) & (128 >> (i & 7)))
 8003414:	89bb      	ldrh	r3, [r7, #12]
 8003416:	897a      	ldrh	r2, [r7, #10]
 8003418:	fb02 f303 	mul.w	r3, r2, r3
 800341c:	461a      	mov	r2, r3
 800341e:	89fb      	ldrh	r3, [r7, #14]
 8003420:	08db      	lsrs	r3, r3, #3
 8003422:	b29b      	uxth	r3, r3
 8003424:	4413      	add	r3, r2
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	4413      	add	r3, r2
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	4619      	mov	r1, r3
 800342e:	89fb      	ldrh	r3, [r7, #14]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	2280      	movs	r2, #128	; 0x80
 8003436:	fa42 f303 	asr.w	r3, r2, r3
 800343a:	400b      	ands	r3, r1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00d      	beq.n	800345c <ssd1306_draw_bitmap+0x78>
			{
				ssd1306_draw_point(chXpos + i, chYpos + j, 1);
 8003440:	89fb      	ldrh	r3, [r7, #14]
 8003442:	b2da      	uxtb	r2, r3
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	4413      	add	r3, r2
 8003448:	b2d8      	uxtb	r0, r3
 800344a:	89bb      	ldrh	r3, [r7, #12]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	79bb      	ldrb	r3, [r7, #6]
 8003450:	4413      	add	r3, r2
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2201      	movs	r2, #1
 8003456:	4619      	mov	r1, r3
 8003458:	f7ff ff6c 	bl	8003334 <ssd1306_draw_point>
		for (i = 0; i < chWidth; i++)
 800345c:	89fb      	ldrh	r3, [r7, #14]
 800345e:	3301      	adds	r3, #1
 8003460:	81fb      	strh	r3, [r7, #14]
 8003462:	797b      	ldrb	r3, [r7, #5]
 8003464:	b29b      	uxth	r3, r3
 8003466:	89fa      	ldrh	r2, [r7, #14]
 8003468:	429a      	cmp	r2, r3
 800346a:	d3d3      	bcc.n	8003414 <ssd1306_draw_bitmap+0x30>
	for (j = 0; j < chHeight; j++)
 800346c:	89bb      	ldrh	r3, [r7, #12]
 800346e:	3301      	adds	r3, #1
 8003470:	81bb      	strh	r3, [r7, #12]
 8003472:	7e3b      	ldrb	r3, [r7, #24]
 8003474:	b29b      	uxth	r3, r3
 8003476:	89ba      	ldrh	r2, [r7, #12]
 8003478:	429a      	cmp	r2, r3
 800347a:	d3c8      	bcc.n	800340e <ssd1306_draw_bitmap+0x2a>
			}
		}
	}
}
 800347c:	bf00      	nop
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <ssd1306_init>:
 * @param  None
 *
 * @retval None
 **/
void ssd1306_init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0

#ifdef INTERFACE_4WIRE_SPI	  
	SSD1306_CS_SET();   //CS set
 8003488:	f000 f87a 	bl	8003580 <SSD1306_CS_SET>
	SSD1306_DC_CLR();   //D/C reset
 800348c:	f000 f8a8 	bl	80035e0 <SSD1306_DC_CLR>
	SSD1306_RES_SET();  //RES set
 8003490:	f000 f88e 	bl	80035b0 <SSD1306_RES_SET>
	SSD1306_DC_CLR();//D/C reset
	SSD1306_RES_SET();//RES set

#endif

	ssd1306_write_byte(0xAE, SSD1306_CMD);  //--turn off oled panel
 8003494:	2100      	movs	r1, #0
 8003496:	20ae      	movs	r0, #174	; 0xae
 8003498:	f7ff febf 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0x00, SSD1306_CMD);  //---set low column address
 800349c:	2100      	movs	r1, #0
 800349e:	2000      	movs	r0, #0
 80034a0:	f7ff febb 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0x10, SSD1306_CMD);  //---set high column address
 80034a4:	2100      	movs	r1, #0
 80034a6:	2010      	movs	r0, #16
 80034a8:	f7ff feb7 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0x40, SSD1306_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 80034ac:	2100      	movs	r1, #0
 80034ae:	2040      	movs	r0, #64	; 0x40
 80034b0:	f7ff feb3 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0x81, SSD1306_CMD);  //--set contrast control register
 80034b4:	2100      	movs	r1, #0
 80034b6:	2081      	movs	r0, #129	; 0x81
 80034b8:	f7ff feaf 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0xCF, SSD1306_CMD);  // Set SEG Output Current Brightness
 80034bc:	2100      	movs	r1, #0
 80034be:	20cf      	movs	r0, #207	; 0xcf
 80034c0:	f7ff feab 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0xA1, SSD1306_CMD);  //--Set SEG/Column Mapping
 80034c4:	2100      	movs	r1, #0
 80034c6:	20a1      	movs	r0, #161	; 0xa1
 80034c8:	f7ff fea7 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0xC0, SSD1306_CMD);  //Set COM/Row Scan Direction
 80034cc:	2100      	movs	r1, #0
 80034ce:	20c0      	movs	r0, #192	; 0xc0
 80034d0:	f7ff fea3 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0xA6, SSD1306_CMD);  //--set normal display
 80034d4:	2100      	movs	r1, #0
 80034d6:	20a6      	movs	r0, #166	; 0xa6
 80034d8:	f7ff fe9f 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0xA8, SSD1306_CMD);  //--set multiplex ratio(1 to 64)
 80034dc:	2100      	movs	r1, #0
 80034de:	20a8      	movs	r0, #168	; 0xa8
 80034e0:	f7ff fe9b 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0x3f, SSD1306_CMD);  //--1/64 duty
 80034e4:	2100      	movs	r1, #0
 80034e6:	203f      	movs	r0, #63	; 0x3f
 80034e8:	f7ff fe97 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0xD3, SSD1306_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 80034ec:	2100      	movs	r1, #0
 80034ee:	20d3      	movs	r0, #211	; 0xd3
 80034f0:	f7ff fe93 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0x00, SSD1306_CMD);  //-not offset
 80034f4:	2100      	movs	r1, #0
 80034f6:	2000      	movs	r0, #0
 80034f8:	f7ff fe8f 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0xd5, SSD1306_CMD); //--set display clock divide ratio/oscillator frequency
 80034fc:	2100      	movs	r1, #0
 80034fe:	20d5      	movs	r0, #213	; 0xd5
 8003500:	f7ff fe8b 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0x80, SSD1306_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 8003504:	2100      	movs	r1, #0
 8003506:	2080      	movs	r0, #128	; 0x80
 8003508:	f7ff fe87 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0xD9, SSD1306_CMD);  //--set pre-charge period
 800350c:	2100      	movs	r1, #0
 800350e:	20d9      	movs	r0, #217	; 0xd9
 8003510:	f7ff fe83 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0xF1, SSD1306_CMD); //Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8003514:	2100      	movs	r1, #0
 8003516:	20f1      	movs	r0, #241	; 0xf1
 8003518:	f7ff fe7f 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0xDA, SSD1306_CMD); //--set com pins hardware configuration
 800351c:	2100      	movs	r1, #0
 800351e:	20da      	movs	r0, #218	; 0xda
 8003520:	f7ff fe7b 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0x12, SSD1306_CMD);
 8003524:	2100      	movs	r1, #0
 8003526:	2012      	movs	r0, #18
 8003528:	f7ff fe77 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0xDB, SSD1306_CMD);  //--set vcomh
 800352c:	2100      	movs	r1, #0
 800352e:	20db      	movs	r0, #219	; 0xdb
 8003530:	f7ff fe73 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0x40, SSD1306_CMD);  //Set VCOM Deselect Level
 8003534:	2100      	movs	r1, #0
 8003536:	2040      	movs	r0, #64	; 0x40
 8003538:	f7ff fe6f 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0x20, SSD1306_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 800353c:	2100      	movs	r1, #0
 800353e:	2020      	movs	r0, #32
 8003540:	f7ff fe6b 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0x02, SSD1306_CMD);  //
 8003544:	2100      	movs	r1, #0
 8003546:	2002      	movs	r0, #2
 8003548:	f7ff fe67 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0x8D, SSD1306_CMD);  //--set Charge Pump enable/disable
 800354c:	2100      	movs	r1, #0
 800354e:	208d      	movs	r0, #141	; 0x8d
 8003550:	f7ff fe63 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0x14, SSD1306_CMD);  //--set(0x10) disable
 8003554:	2100      	movs	r1, #0
 8003556:	2014      	movs	r0, #20
 8003558:	f7ff fe5f 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0xA4, SSD1306_CMD); // Disable Entire Display On (0xa4/0xa5)
 800355c:	2100      	movs	r1, #0
 800355e:	20a4      	movs	r0, #164	; 0xa4
 8003560:	f7ff fe5b 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0xA6, SSD1306_CMD); // Disable Inverse Display On (0xa6/a7)
 8003564:	2100      	movs	r1, #0
 8003566:	20a6      	movs	r0, #166	; 0xa6
 8003568:	f7ff fe57 	bl	800321a <ssd1306_write_byte>
	ssd1306_write_byte(0xAF, SSD1306_CMD);  //--turn on oled panel
 800356c:	2100      	movs	r1, #0
 800356e:	20af      	movs	r0, #175	; 0xaf
 8003570:	f7ff fe53 	bl	800321a <ssd1306_write_byte>

	ssd1306_clear_screen(0x00);
 8003574:	2000      	movs	r0, #0
 8003576:	f7ff fea5 	bl	80032c4 <ssd1306_clear_screen>
}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <SSD1306_CS_SET>:

///moje
void SSD1306_CS_SET()
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_CS_GPIO, SSD1306_CS_PIN, GPIO_PIN_SET);
 8003584:	2201      	movs	r2, #1
 8003586:	2104      	movs	r1, #4
 8003588:	4802      	ldr	r0, [pc, #8]	; (8003594 <SSD1306_CS_SET+0x14>)
 800358a:	f7fd feef 	bl	800136c <HAL_GPIO_WritePin>
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40021800 	.word	0x40021800

08003598 <SSD1306_CS_CLR>:
void SSD1306_CS_CLR()
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_CS_GPIO, SSD1306_CS_PIN, GPIO_PIN_RESET);
 800359c:	2200      	movs	r2, #0
 800359e:	2104      	movs	r1, #4
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <SSD1306_CS_CLR+0x14>)
 80035a2:	f7fd fee3 	bl	800136c <HAL_GPIO_WritePin>
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40021800 	.word	0x40021800

080035b0 <SSD1306_RES_SET>:

void SSD1306_RES_SET()
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_RES_GPIO, SSD1306_RES_PIN, GPIO_PIN_SET);
 80035b4:	2201      	movs	r2, #1
 80035b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035ba:	4802      	ldr	r0, [pc, #8]	; (80035c4 <SSD1306_RES_SET+0x14>)
 80035bc:	f7fd fed6 	bl	800136c <HAL_GPIO_WritePin>
}
 80035c0:	bf00      	nop
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40020800 	.word	0x40020800

080035c8 <SSD1306_DC_SET>:
{
	HAL_GPIO_WritePin(SSD1306_RES_GPIO, SSD1306_RES_PIN, GPIO_PIN_RESET);
}

void SSD1306_DC_SET()
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_DC_GPIO, SSD1306_DC_PIN, GPIO_PIN_SET);
 80035cc:	2201      	movs	r2, #1
 80035ce:	2108      	movs	r1, #8
 80035d0:	4802      	ldr	r0, [pc, #8]	; (80035dc <SSD1306_DC_SET+0x14>)
 80035d2:	f7fd fecb 	bl	800136c <HAL_GPIO_WritePin>
}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40021800 	.word	0x40021800

080035e0 <SSD1306_DC_CLR>:
void SSD1306_DC_CLR()
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_DC_GPIO, SSD1306_DC_PIN, GPIO_PIN_RESET);
 80035e4:	2200      	movs	r2, #0
 80035e6:	2108      	movs	r1, #8
 80035e8:	4802      	ldr	r0, [pc, #8]	; (80035f4 <SSD1306_DC_CLR+0x14>)
 80035ea:	f7fd febf 	bl	800136c <HAL_GPIO_WritePin>
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40021800 	.word	0x40021800

080035f8 <SSD1306_WRITE_BYTE>:
{
	HAL_GPIO_WritePin(SSD1306_DIN_GPIO, SSD1306_DIN_PIN, GPIO_PIN_RESET);
}

void SSD1306_WRITE_BYTE(uint8_t DATA)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi3, &DATA, 1, 1000);
 8003602:	1df9      	adds	r1, r7, #7
 8003604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003608:	2201      	movs	r2, #1
 800360a:	4803      	ldr	r0, [pc, #12]	; (8003618 <SSD1306_WRITE_BYTE+0x20>)
 800360c:	f7fe fb05 	bl	8001c1a <HAL_SPI_Transmit>

}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	200004cc 	.word	0x200004cc

0800361c <ssd1306_hello_word>:
/*-------------------------------END OF FILE LIBRARY-------------------------------*/

/*-------------------------------USER INTERFACE-------------------------------*/

void ssd1306_hello_word()
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af02      	add	r7, sp, #8
	ssd1306_draw_bitmap(30, 30, (uint8_t* )c_chBmp4016, 40, 16);
 8003622:	2310      	movs	r3, #16
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	2328      	movs	r3, #40	; 0x28
 8003628:	4a04      	ldr	r2, [pc, #16]	; (800363c <ssd1306_hello_word+0x20>)
 800362a:	211e      	movs	r1, #30
 800362c:	201e      	movs	r0, #30
 800362e:	f7ff fed9 	bl	80033e4 <ssd1306_draw_bitmap>
	ssd1306_refresh_gram();
	HAL_Delay(1000);
	ssd1306_display_string(0, 0, (uint8_t *) "Praca Magisterska", 12, 1);
	//ssd1306_display_string(10, 16, (uint8_t *) "Kamil Karpiak", 14, 1);
	 * */
	ssd1306_refresh_gram();
 8003632:	f7ff fe11 	bl	8003258 <ssd1306_refresh_gram>

}
 8003636:	bf00      	nop
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	08004e6c 	.word	0x08004e6c

08003640 <MX_GFXSIMULATOR_Init>:

/* USER CODE END 0 */

/* GFXSIMULATOR init function */
void MX_GFXSIMULATOR_Init(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0

}
 8003644:	bf00      	nop
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
	...

08003650 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08c      	sub	sp, #48	; 0x30
 8003654:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003656:	f107 031c 	add.w	r3, r7, #28
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	605a      	str	r2, [r3, #4]
 8003660:	609a      	str	r2, [r3, #8]
 8003662:	60da      	str	r2, [r3, #12]
 8003664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	61bb      	str	r3, [r7, #24]
 800366a:	4a40      	ldr	r2, [pc, #256]	; (800376c <MX_GPIO_Init+0x11c>)
 800366c:	4b3f      	ldr	r3, [pc, #252]	; (800376c <MX_GPIO_Init+0x11c>)
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	f043 0320 	orr.w	r3, r3, #32
 8003674:	6313      	str	r3, [r2, #48]	; 0x30
 8003676:	4b3d      	ldr	r3, [pc, #244]	; (800376c <MX_GPIO_Init+0x11c>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	61bb      	str	r3, [r7, #24]
 8003680:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	4a39      	ldr	r2, [pc, #228]	; (800376c <MX_GPIO_Init+0x11c>)
 8003688:	4b38      	ldr	r3, [pc, #224]	; (800376c <MX_GPIO_Init+0x11c>)
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	f043 0308 	orr.w	r3, r3, #8
 8003690:	6313      	str	r3, [r2, #48]	; 0x30
 8003692:	4b36      	ldr	r3, [pc, #216]	; (800376c <MX_GPIO_Init+0x11c>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	4a32      	ldr	r2, [pc, #200]	; (800376c <MX_GPIO_Init+0x11c>)
 80036a4:	4b31      	ldr	r3, [pc, #196]	; (800376c <MX_GPIO_Init+0x11c>)
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ac:	6313      	str	r3, [r2, #48]	; 0x30
 80036ae:	4b2f      	ldr	r3, [pc, #188]	; (800376c <MX_GPIO_Init+0x11c>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	4a2b      	ldr	r2, [pc, #172]	; (800376c <MX_GPIO_Init+0x11c>)
 80036c0:	4b2a      	ldr	r3, [pc, #168]	; (800376c <MX_GPIO_Init+0x11c>)
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	f043 0304 	orr.w	r3, r3, #4
 80036c8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ca:	4b28      	ldr	r3, [pc, #160]	; (800376c <MX_GPIO_Init+0x11c>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d6:	2300      	movs	r3, #0
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	4a24      	ldr	r2, [pc, #144]	; (800376c <MX_GPIO_Init+0x11c>)
 80036dc:	4b23      	ldr	r3, [pc, #140]	; (800376c <MX_GPIO_Init+0x11c>)
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	6313      	str	r3, [r2, #48]	; 0x30
 80036e6:	4b21      	ldr	r3, [pc, #132]	; (800376c <MX_GPIO_Init+0x11c>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	60bb      	str	r3, [r7, #8]
 80036f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	607b      	str	r3, [r7, #4]
 80036f6:	4a1d      	ldr	r2, [pc, #116]	; (800376c <MX_GPIO_Init+0x11c>)
 80036f8:	4b1c      	ldr	r3, [pc, #112]	; (800376c <MX_GPIO_Init+0x11c>)
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	f043 0302 	orr.w	r3, r3, #2
 8003700:	6313      	str	r3, [r2, #48]	; 0x30
 8003702:	4b1a      	ldr	r3, [pc, #104]	; (800376c <MX_GPIO_Init+0x11c>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	607b      	str	r3, [r7, #4]
 800370c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OLED_CS_Pin|OLED_DC_Pin|GPIO_Motor_Control4_Pin|GPIO_Motor_control2_Pin 
 800370e:	2200      	movs	r2, #0
 8003710:	f64a 410c 	movw	r1, #44044	; 0xac0c
 8003714:	4816      	ldr	r0, [pc, #88]	; (8003770 <MX_GPIO_Init+0x120>)
 8003716:	f7fd fe29 	bl	800136c <HAL_GPIO_WritePin>
                          |GPIO_Motor_Control3_Pin|GPIO_Motor_control1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, GPIO_PIN_RESET);
 800371a:	2200      	movs	r2, #0
 800371c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003720:	4814      	ldr	r0, [pc, #80]	; (8003774 <MX_GPIO_Init+0x124>)
 8003722:	f7fd fe23 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin 
                           PGPin PGPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin|GPIO_Motor_Control4_Pin|GPIO_Motor_control2_Pin 
 8003726:	f64a 430c 	movw	r3, #44044	; 0xac0c
 800372a:	61fb      	str	r3, [r7, #28]
                          |GPIO_Motor_Control3_Pin|GPIO_Motor_control1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800372c:	2301      	movs	r3, #1
 800372e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003730:	2300      	movs	r3, #0
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003734:	2300      	movs	r3, #0
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003738:	f107 031c 	add.w	r3, r7, #28
 800373c:	4619      	mov	r1, r3
 800373e:	480c      	ldr	r0, [pc, #48]	; (8003770 <MX_GPIO_Init+0x120>)
 8003740:	f7fd fc6a 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RES_Pin;
 8003744:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800374a:	2301      	movs	r3, #1
 800374c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374e:	2300      	movs	r3, #0
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003752:	2300      	movs	r3, #0
 8003754:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OLED_RES_GPIO_Port, &GPIO_InitStruct);
 8003756:	f107 031c 	add.w	r3, r7, #28
 800375a:	4619      	mov	r1, r3
 800375c:	4805      	ldr	r0, [pc, #20]	; (8003774 <MX_GPIO_Init+0x124>)
 800375e:	f7fd fc5b 	bl	8001018 <HAL_GPIO_Init>

}
 8003762:	bf00      	nop
 8003764:	3730      	adds	r7, #48	; 0x30
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40023800 	.word	0x40023800
 8003770:	40021800 	.word	0x40021800
 8003774:	40020800 	.word	0x40020800

08003778 <__NVIC_SetPriority>:
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	6039      	str	r1, [r7, #0]
 8003782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003788:	2b00      	cmp	r3, #0
 800378a:	db0a      	blt.n	80037a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800378c:	490d      	ldr	r1, [pc, #52]	; (80037c4 <__NVIC_SetPriority+0x4c>)
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	0112      	lsls	r2, r2, #4
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	440b      	add	r3, r1
 800379c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037a0:	e00a      	b.n	80037b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a2:	4909      	ldr	r1, [pc, #36]	; (80037c8 <__NVIC_SetPriority+0x50>)
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	3b04      	subs	r3, #4
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	0112      	lsls	r2, r2, #4
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	440b      	add	r3, r1
 80037b6:	761a      	strb	r2, [r3, #24]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	e000e100 	.word	0xe000e100
 80037c8:	e000ed00 	.word	0xe000ed00

080037cc <SysTick_Config>:
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037dc:	d301      	bcc.n	80037e2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80037de:	2301      	movs	r3, #1
 80037e0:	e00f      	b.n	8003802 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037e2:	4a0a      	ldr	r2, [pc, #40]	; (800380c <SysTick_Config+0x40>)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ea:	210f      	movs	r1, #15
 80037ec:	f04f 30ff 	mov.w	r0, #4294967295
 80037f0:	f7ff ffc2 	bl	8003778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037f4:	4b05      	ldr	r3, [pc, #20]	; (800380c <SysTick_Config+0x40>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037fa:	4b04      	ldr	r3, [pc, #16]	; (800380c <SysTick_Config+0x40>)
 80037fc:	2207      	movs	r2, #7
 80037fe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	e000e010 	.word	0xe000e010

08003810 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003818:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800381c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d013      	beq.n	8003850 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003828:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800382c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003830:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00b      	beq.n	8003850 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003838:	e000      	b.n	800383c <ITM_SendChar+0x2c>
    {
      __NOP();
 800383a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800383c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f9      	beq.n	800383a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003846:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003850:	687b      	ldr	r3, [r7, #4]
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b0a4      	sub	sp, #144	; 0x90
 8003864:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003866:	f7fd fa33 	bl	8000cd0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800386a:	f000 f905 	bl	8003a78 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	if (SysTick_Config(SystemCoreClock / 1000))
 800386e:	4b70      	ldr	r3, [pc, #448]	; (8003a30 <main+0x1d0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a70      	ldr	r2, [pc, #448]	; (8003a34 <main+0x1d4>)
 8003874:	fba2 2303 	umull	r2, r3, r2, r3
 8003878:	099b      	lsrs	r3, r3, #6
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff ffa6 	bl	80037cc <SysTick_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d000      	beq.n	8003888 <main+0x28>
	{
		while (1)
 8003886:	e7fe      	b.n	8003886 <main+0x26>
			;
	}
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003888:	f7ff fee2 	bl	8003650 <MX_GPIO_Init>
	MX_SPI3_Init();
 800388c:	f000 f98c 	bl	8003ba8 <MX_SPI3_Init>
	MX_TIM13_Init();
 8003890:	f000 fc48 	bl	8004124 <MX_TIM13_Init>
	MX_TIM14_Init();
 8003894:	f000 fc94 	bl	80041c0 <MX_TIM14_Init>
	MX_TIM4_Init();
 8003898:	f000 fb5e 	bl	8003f58 <MX_TIM4_Init>
	MX_TIM8_Init();
 800389c:	f000 fbb0 	bl	8004000 <MX_TIM8_Init>
	MX_GFXSIMULATOR_Init();
 80038a0:	f7ff fece 	bl	8003640 <MX_GFXSIMULATOR_Init>
	MX_TIM12_Init();
 80038a4:	f000 fc04 	bl	80040b0 <MX_TIM12_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80038a8:	f000 f950 	bl	8003b4c <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	ssd1306_init();
 80038ac:	f7ff fdea 	bl	8003484 <ssd1306_init>
	ssd1306_clear_screen(0xFF);
 80038b0:	20ff      	movs	r0, #255	; 0xff
 80038b2:	f7ff fd07 	bl	80032c4 <ssd1306_clear_screen>
	HAL_Delay(1000);
 80038b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038ba:	f7fd fa7b 	bl	8000db4 <HAL_Delay>
	ssd1306_clear_screen(0x00);
 80038be:	2000      	movs	r0, #0
 80038c0:	f7ff fd00 	bl	80032c4 <ssd1306_clear_screen>
	ssd1306_hello_word();
 80038c4:	f7ff feaa 	bl	800361c <ssd1306_hello_word>
	printf("Start\n");
 80038c8:	485b      	ldr	r0, [pc, #364]	; (8003a38 <main+0x1d8>)
 80038ca:	f000 fead 	bl	8004628 <puts>
	ITM_SendChar('A');
 80038ce:	2041      	movs	r0, #65	; 0x41
 80038d0:	f7ff ff9e 	bl	8003810 <ITM_SendChar>

	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80038d4:	2100      	movs	r1, #0
 80038d6:	4859      	ldr	r0, [pc, #356]	; (8003a3c <main+0x1dc>)
 80038d8:	f7fe fbde 	bl	8002098 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80038dc:	2100      	movs	r1, #0
 80038de:	4858      	ldr	r0, [pc, #352]	; (8003a40 <main+0x1e0>)
 80038e0:	f7fe fbda 	bl	8002098 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80038e4:	213c      	movs	r1, #60	; 0x3c
 80038e6:	4857      	ldr	r0, [pc, #348]	; (8003a44 <main+0x1e4>)
 80038e8:	f7fe fca6 	bl	8002238 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 80038ec:	213c      	movs	r1, #60	; 0x3c
 80038ee:	4856      	ldr	r0, [pc, #344]	; (8003a48 <main+0x1e8>)
 80038f0:	f7fe fca2 	bl	8002238 <HAL_TIM_Encoder_Start>

	vMotor_init(&MotorLeft, &MotorRight);
 80038f4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80038f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80038fc:	4611      	mov	r1, r2
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff fb04 	bl	8002f0c <vMotor_init>
	vMotorPID_init(&MotorPID_Left, &MotorPID_Right);
 8003904:	f107 0208 	add.w	r2, r7, #8
 8003908:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff fbe0 	bl	80030d4 <vMotorPID_init>

	HAL_Delay(2000);
 8003914:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003918:	f7fd fa4c 	bl	8000db4 <HAL_Delay>
	vMotor_Control(&MotorLeft, Forward);
 800391c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003920:	2102      	movs	r1, #2
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff fb3c 	bl	8002fa0 <vMotor_Control>
	vMotor_Control(&MotorRight, Forward);
 8003928:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800392c:	2102      	movs	r1, #2
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff fb36 	bl	8002fa0 <vMotor_Control>

	HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003934:	202b      	movs	r0, #43	; 0x2b
 8003936:	f7fd fb54 	bl	8000fe2 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim12);
 800393a:	4844      	ldr	r0, [pc, #272]	; (8003a4c <main+0x1ec>)
 800393c:	f7fe fb52 	bl	8001fe4 <HAL_TIM_Base_Start_IT>
//		PWM13 = TIM13->CCR1;
//		PWM14 = TIM13->CCR1;
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (FlagPID >= 5)
 8003940:	4b43      	ldr	r3, [pc, #268]	; (8003a50 <main+0x1f0>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b04      	cmp	r3, #4
 8003948:	d9fa      	bls.n	8003940 <main+0xe0>
		{
			FlagPID = 0;
 800394a:	4b41      	ldr	r3, [pc, #260]	; (8003a50 <main+0x1f0>)
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
			vMotorPID_Control(&MotorPID_Left, &MotorLeft);
 8003950:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003954:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003958:	4611      	mov	r1, r2
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fbfc 	bl	8003158 <vMotorPID_Control>
			zadana = MotorPID_Left.ValueTask;
 8003960:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003968:	edc7 7a01 	vstr	s15, [r7, #4]
 800396c:	88bb      	ldrh	r3, [r7, #4]
 800396e:	b29a      	uxth	r2, r3
 8003970:	4b38      	ldr	r3, [pc, #224]	; (8003a54 <main+0x1f4>)
 8003972:	801a      	strh	r2, [r3, #0]
			rzeczywista1 = uGetCounterTim(MotorLeft.Tim_Encoder);
 8003974:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff faac 	bl	8002ed4 <uGetCounterTim>
 800397c:	4603      	mov	r3, r0
 800397e:	461a      	mov	r2, r3
 8003980:	4b35      	ldr	r3, [pc, #212]	; (8003a58 <main+0x1f8>)
 8003982:	801a      	strh	r2, [r3, #0]
			rzeczywista2 = uGetCounterTim(MotorRight.Tim_Encoder);
 8003984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff faa4 	bl	8002ed4 <uGetCounterTim>
 800398c:	4603      	mov	r3, r0
 800398e:	461a      	mov	r2, r3
 8003990:	4b32      	ldr	r3, [pc, #200]	; (8003a5c <main+0x1fc>)
 8003992:	801a      	strh	r2, [r3, #0]
			uClearCounter(MotorLeft.Tim_Encoder);
 8003994:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff faa9 	bl	8002eee <uClearCounter>
			error1 = MotorPID_Left.ExecutionValue;
 800399c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80039a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039a4:	ee17 2a90 	vmov	r2, s15
 80039a8:	4b2d      	ldr	r3, [pc, #180]	; (8003a60 <main+0x200>)
 80039aa:	601a      	str	r2, [r3, #0]
			MotorPID_Left.kd = MotorPID_Right.kd = kdd;
 80039ac:	4b2d      	ldr	r3, [pc, #180]	; (8003a64 <main+0x204>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	637b      	str	r3, [r7, #52]	; 0x34
			MotorPID_Left.ki = MotorPID_Right.ki = kii;
 80039b6:	4b2c      	ldr	r3, [pc, #176]	; (8003a68 <main+0x208>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	633b      	str	r3, [r7, #48]	; 0x30
			MotorPID_Left.kp = MotorPID_Right.kp = kpp;
 80039c0:	4b2a      	ldr	r3, [pc, #168]	; (8003a6c <main+0x20c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c

			MotorPID_Left.ValueTask = MotorPID_Right.ValueTask = speed;
 80039ca:	4b29      	ldr	r3, [pc, #164]	; (8003a70 <main+0x210>)
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	ee07 3a90 	vmov	s15, r3
 80039d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	64bb      	str	r3, [r7, #72]	; 0x48

			vMotorPID_Control(&MotorPID_Right, &MotorRight);
 80039e0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80039e4:	f107 0308 	add.w	r3, r7, #8
 80039e8:	4611      	mov	r1, r2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff fbb4 	bl	8003158 <vMotorPID_Control>
			uClearCounter(MotorRight.Tim_Encoder);
 80039f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff fa7b 	bl	8002eee <uClearCounter>
			error2 = MotorPID_Right.ExecutionValue;
 80039f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80039fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a00:	ee17 2a90 	vmov	r2, s15
 8003a04:	4b1b      	ldr	r3, [pc, #108]	; (8003a74 <main+0x214>)
 8003a06:	601a      	str	r2, [r3, #0]
			vMotor_SetPWM(&MotorLeft, error1);
 8003a08:	4b15      	ldr	r3, [pc, #84]	; (8003a60 <main+0x200>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fb35 	bl	8003084 <vMotor_SetPWM>
			vMotor_SetPWM(&MotorRight, error2);
 8003a1a:	4b16      	ldr	r3, [pc, #88]	; (8003a74 <main+0x214>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a24:	4611      	mov	r1, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fb2c 	bl	8003084 <vMotor_SetPWM>
		if (FlagPID >= 5)
 8003a2c:	e788      	b.n	8003940 <main+0xe0>
 8003a2e:	bf00      	nop
 8003a30:	20000008 	.word	0x20000008
 8003a34:	10624dd3 	.word	0x10624dd3
 8003a38:	08004e64 	.word	0x08004e64
 8003a3c:	200005a4 	.word	0x200005a4
 8003a40:	200005e4 	.word	0x200005e4
 8003a44:	20000564 	.word	0x20000564
 8003a48:	20000524 	.word	0x20000524
 8003a4c:	20000624 	.word	0x20000624
 8003a50:	200004b8 	.word	0x200004b8
 8003a54:	200004ac 	.word	0x200004ac
 8003a58:	200004bc 	.word	0x200004bc
 8003a5c:	200004b6 	.word	0x200004b6
 8003a60:	200004c0 	.word	0x200004c0
 8003a64:	200004a8 	.word	0x200004a8
 8003a68:	200004a0 	.word	0x200004a0
 8003a6c:	200004b0 	.word	0x200004b0
 8003a70:	200004c4 	.word	0x200004c4
 8003a74:	200004c8 	.word	0x200004c8

08003a78 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b094      	sub	sp, #80	; 0x50
 8003a7c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8003a7e:	f107 0320 	add.w	r3, r7, #32
 8003a82:	2230      	movs	r2, #48	; 0x30
 8003a84:	2100      	movs	r1, #0
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fd6a 	bl	8004560 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8003a8c:	f107 030c 	add.w	r3, r7, #12
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60bb      	str	r3, [r7, #8]
 8003aa0:	4a28      	ldr	r2, [pc, #160]	; (8003b44 <SystemClock_Config+0xcc>)
 8003aa2:	4b28      	ldr	r3, [pc, #160]	; (8003b44 <SystemClock_Config+0xcc>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8003aac:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <SystemClock_Config+0xcc>)
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ab8:	2300      	movs	r3, #0
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	4a22      	ldr	r2, [pc, #136]	; (8003b48 <SystemClock_Config+0xd0>)
 8003abe:	4b22      	ldr	r3, [pc, #136]	; (8003b48 <SystemClock_Config+0xd0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4b1f      	ldr	r3, [pc, #124]	; (8003b48 <SystemClock_Config+0xd0>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ad0:	607b      	str	r3, [r7, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003adc:	2310      	movs	r3, #16
 8003ade:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003ae8:	2308      	movs	r3, #8
 8003aea:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 160;
 8003aec:	23a0      	movs	r3, #160	; 0xa0
 8003aee:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003af0:	2302      	movs	r3, #2
 8003af2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8003af4:	2304      	movs	r3, #4
 8003af6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003af8:	f107 0320 	add.w	r3, r7, #32
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fd fc4f 	bl	80013a0 <HAL_RCC_OscConfig>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8003b08:	f000 f846 	bl	8003b98 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003b0c:	230f      	movs	r3, #15
 8003b0e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b10:	2302      	movs	r3, #2
 8003b12:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003b1c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b22:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003b24:	f107 030c 	add.w	r3, r7, #12
 8003b28:	2105      	movs	r1, #5
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fd fe7a 	bl	8001824 <HAL_RCC_ClockConfig>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8003b36:	f000 f82f 	bl	8003b98 <Error_Handler>
	}
}
 8003b3a:	bf00      	nop
 8003b3c:	3750      	adds	r7, #80	; 0x50
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40023800 	.word	0x40023800
 8003b48:	40007000 	.word	0x40007000

08003b4c <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
	/* TIM8_BRK_TIM12_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003b50:	2200      	movs	r2, #0
 8003b52:	2100      	movs	r1, #0
 8003b54:	202b      	movs	r0, #43	; 0x2b
 8003b56:	f7fd fa28 	bl	8000faa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003b5a:	202b      	movs	r0, #43	; 0x2b
 8003b5c:	f7fd fa41 	bl	8000fe2 <HAL_NVIC_EnableIRQ>
}
 8003b60:	bf00      	nop
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM12)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a07      	ldr	r2, [pc, #28]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d106      	bne.n	8003b84 <HAL_TIM_PeriodElapsedCallback+0x20>
		FlagPID++;
 8003b76:	4b07      	ldr	r3, [pc, #28]	; (8003b94 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	4b04      	ldr	r3, [pc, #16]	; (8003b94 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003b82:	701a      	strb	r2, [r3, #0]
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	40001800 	.word	0x40001800
 8003b94:	200004b8 	.word	0x200004b8

08003b98 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003b9c:	bf00      	nop
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
	...

08003ba8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8003bac:	4b17      	ldr	r3, [pc, #92]	; (8003c0c <MX_SPI3_Init+0x64>)
 8003bae:	4a18      	ldr	r2, [pc, #96]	; (8003c10 <MX_SPI3_Init+0x68>)
 8003bb0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003bb2:	4b16      	ldr	r3, [pc, #88]	; (8003c0c <MX_SPI3_Init+0x64>)
 8003bb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bb8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003bba:	4b14      	ldr	r3, [pc, #80]	; (8003c0c <MX_SPI3_Init+0x64>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bc0:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <MX_SPI3_Init+0x64>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bc6:	4b11      	ldr	r3, [pc, #68]	; (8003c0c <MX_SPI3_Init+0x64>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bcc:	4b0f      	ldr	r3, [pc, #60]	; (8003c0c <MX_SPI3_Init+0x64>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003bd2:	4b0e      	ldr	r3, [pc, #56]	; (8003c0c <MX_SPI3_Init+0x64>)
 8003bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bda:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <MX_SPI3_Init+0x64>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003be0:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <MX_SPI3_Init+0x64>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003be6:	4b09      	ldr	r3, [pc, #36]	; (8003c0c <MX_SPI3_Init+0x64>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bec:	4b07      	ldr	r3, [pc, #28]	; (8003c0c <MX_SPI3_Init+0x64>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003bf2:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <MX_SPI3_Init+0x64>)
 8003bf4:	220a      	movs	r2, #10
 8003bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003bf8:	4804      	ldr	r0, [pc, #16]	; (8003c0c <MX_SPI3_Init+0x64>)
 8003bfa:	f7fd ffab 	bl	8001b54 <HAL_SPI_Init>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003c04:	f7ff ffc8 	bl	8003b98 <Error_Handler>
  }

}
 8003c08:	bf00      	nop
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	200004cc 	.word	0x200004cc
 8003c10:	40003c00 	.word	0x40003c00

08003c14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08a      	sub	sp, #40	; 0x28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c1c:	f107 0314 	add.w	r3, r7, #20
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	605a      	str	r2, [r3, #4]
 8003c26:	609a      	str	r2, [r3, #8]
 8003c28:	60da      	str	r2, [r3, #12]
 8003c2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a19      	ldr	r2, [pc, #100]	; (8003c98 <HAL_SPI_MspInit+0x84>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d12c      	bne.n	8003c90 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	4a18      	ldr	r2, [pc, #96]	; (8003c9c <HAL_SPI_MspInit+0x88>)
 8003c3c:	4b17      	ldr	r3, [pc, #92]	; (8003c9c <HAL_SPI_MspInit+0x88>)
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c44:	6413      	str	r3, [r2, #64]	; 0x40
 8003c46:	4b15      	ldr	r3, [pc, #84]	; (8003c9c <HAL_SPI_MspInit+0x88>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	4a11      	ldr	r2, [pc, #68]	; (8003c9c <HAL_SPI_MspInit+0x88>)
 8003c58:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <HAL_SPI_MspInit+0x88>)
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	f043 0304 	orr.w	r3, r3, #4
 8003c60:	6313      	str	r3, [r2, #48]	; 0x30
 8003c62:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <HAL_SPI_MspInit+0x88>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003c6e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c74:	2302      	movs	r3, #2
 8003c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003c80:	2306      	movs	r3, #6
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4805      	ldr	r0, [pc, #20]	; (8003ca0 <HAL_SPI_MspInit+0x8c>)
 8003c8c:	f7fd f9c4 	bl	8001018 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003c90:	bf00      	nop
 8003c92:	3728      	adds	r7, #40	; 0x28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40003c00 	.word	0x40003c00
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	40020800 	.word	0x40020800

08003ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	607b      	str	r3, [r7, #4]
 8003cae:	4a10      	ldr	r2, [pc, #64]	; (8003cf0 <HAL_MspInit+0x4c>)
 8003cb0:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <HAL_MspInit+0x4c>)
 8003cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003cba:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <HAL_MspInit+0x4c>)
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc2:	607b      	str	r3, [r7, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	603b      	str	r3, [r7, #0]
 8003cca:	4a09      	ldr	r2, [pc, #36]	; (8003cf0 <HAL_MspInit+0x4c>)
 8003ccc:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <HAL_MspInit+0x4c>)
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cd6:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_MspInit+0x4c>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40023800 	.word	0x40023800

08003cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d02:	b480      	push	{r7}
 8003d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d06:	e7fe      	b.n	8003d06 <HardFault_Handler+0x4>

08003d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d0c:	e7fe      	b.n	8003d0c <MemManage_Handler+0x4>

08003d0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d12:	e7fe      	b.n	8003d12 <BusFault_Handler+0x4>

08003d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d18:	e7fe      	b.n	8003d18 <UsageFault_Handler+0x4>

08003d1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d1e:	bf00      	nop
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d36:	b480      	push	{r7}
 8003d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d3a:	bf00      	nop
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d48:	f7fd f814 	bl	8000d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d4c:	bf00      	nop
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003d54:	4803      	ldr	r0, [pc, #12]	; (8003d64 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8003d56:	f7fe faa6 	bl	80022a6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8003d5a:	4803      	ldr	r0, [pc, #12]	; (8003d68 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8003d5c:	f7fe faa3 	bl	80022a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003d60:	bf00      	nop
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20000524 	.word	0x20000524
 8003d68:	20000624 	.word	0x20000624

08003d6c <ITM_SendChar>:
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003d74:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d78:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d013      	beq.n	8003dac <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003d84:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d88:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003d8c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00b      	beq.n	8003dac <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 8003d94:	e000      	b.n	8003d98 <ITM_SendChar+0x2c>
      __NOP();
 8003d96:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003d98:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f9      	beq.n	8003d96 <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003da2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	701a      	strb	r2, [r3, #0]
  return (ch);
 8003dac:	687b      	ldr	r3, [r7, #4]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dba:	b590      	push	{r4, r7, lr}
 8003dbc:	b087      	sub	sp, #28
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	e00a      	b.n	8003de2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003dcc:	68bc      	ldr	r4, [r7, #8]
 8003dce:	1c63      	adds	r3, r4, #1
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	f3af 8000 	nop.w
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	3301      	adds	r3, #1
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	dbf0      	blt.n	8003dcc <_read+0x12>
	}

return len;
 8003dea:	687b      	ldr	r3, [r7, #4]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd90      	pop	{r4, r7, pc}

08003df4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	e009      	b.n	8003e1a <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	60ba      	str	r2, [r7, #8]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff ffac 	bl	8003d6c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	3301      	adds	r3, #1
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	dbf1      	blt.n	8003e06 <_write+0x12>
	}
	return len;
 8003e22:	687b      	ldr	r3, [r7, #4]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <_sbrk>:

caddr_t _sbrk(int incr)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003e34:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <_sbrk+0x50>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d102      	bne.n	8003e42 <_sbrk+0x16>
		heap_end = &end;
 8003e3c:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <_sbrk+0x50>)
 8003e3e:	4a10      	ldr	r2, [pc, #64]	; (8003e80 <_sbrk+0x54>)
 8003e40:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003e42:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <_sbrk+0x50>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003e48:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <_sbrk+0x50>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4413      	add	r3, r2
 8003e50:	466a      	mov	r2, sp
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d907      	bls.n	8003e66 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003e56:	f000 fb59 	bl	800450c <__errno>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	230c      	movs	r3, #12
 8003e5e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003e60:	f04f 33ff 	mov.w	r3, #4294967295
 8003e64:	e006      	b.n	8003e74 <_sbrk+0x48>
	}

	heap_end += incr;
 8003e66:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <_sbrk+0x50>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	4a03      	ldr	r2, [pc, #12]	; (8003e7c <_sbrk+0x50>)
 8003e70:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003e72:	68fb      	ldr	r3, [r7, #12]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	2000048c 	.word	0x2000048c
 8003e80:	20000668 	.word	0x20000668

08003e84 <_close>:

int _close(int file)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
	return -1;
 8003e8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003eac:	605a      	str	r2, [r3, #4]
	return 0;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <_isatty>:

int _isatty(int file)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
	return 1;
 8003ec4:	2301      	movs	r3, #1
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b085      	sub	sp, #20
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	60f8      	str	r0, [r7, #12]
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	607a      	str	r2, [r7, #4]
	return 0;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ef0:	4a16      	ldr	r2, [pc, #88]	; (8003f4c <SystemInit+0x60>)
 8003ef2:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <SystemInit+0x60>)
 8003ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003f00:	4a13      	ldr	r2, [pc, #76]	; (8003f50 <SystemInit+0x64>)
 8003f02:	4b13      	ldr	r3, [pc, #76]	; (8003f50 <SystemInit+0x64>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f0c:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <SystemInit+0x64>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003f12:	4a0f      	ldr	r2, [pc, #60]	; (8003f50 <SystemInit+0x64>)
 8003f14:	4b0e      	ldr	r3, [pc, #56]	; (8003f50 <SystemInit+0x64>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f20:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003f22:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <SystemInit+0x64>)
 8003f24:	4a0b      	ldr	r2, [pc, #44]	; (8003f54 <SystemInit+0x68>)
 8003f26:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003f28:	4a09      	ldr	r2, [pc, #36]	; (8003f50 <SystemInit+0x64>)
 8003f2a:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <SystemInit+0x64>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003f34:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <SystemInit+0x64>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f3a:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <SystemInit+0x60>)
 8003f3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f40:	609a      	str	r2, [r3, #8]
#endif
}
 8003f42:	bf00      	nop
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	e000ed00 	.word	0xe000ed00
 8003f50:	40023800 	.word	0x40023800
 8003f54:	24003010 	.word	0x24003010

08003f58 <MX_TIM4_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08c      	sub	sp, #48	; 0x30
 8003f5c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f5e:	f107 030c 	add.w	r3, r7, #12
 8003f62:	2224      	movs	r2, #36	; 0x24
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fafa 	bl	8004560 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f6c:	1d3b      	adds	r3, r7, #4
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8003f74:	4b20      	ldr	r3, [pc, #128]	; (8003ff8 <MX_TIM4_Init+0xa0>)
 8003f76:	4a21      	ldr	r2, [pc, #132]	; (8003ffc <MX_TIM4_Init+0xa4>)
 8003f78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003f7a:	4b1f      	ldr	r3, [pc, #124]	; (8003ff8 <MX_TIM4_Init+0xa0>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f80:	4b1d      	ldr	r3, [pc, #116]	; (8003ff8 <MX_TIM4_Init+0xa0>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8003f86:	4b1c      	ldr	r3, [pc, #112]	; (8003ff8 <MX_TIM4_Init+0xa0>)
 8003f88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ff8 <MX_TIM4_Init+0xa0>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f94:	4b18      	ldr	r3, [pc, #96]	; (8003ff8 <MX_TIM4_Init+0xa0>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8003faa:	230f      	movs	r3, #15
 8003fac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8003fba:	230f      	movs	r3, #15
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003fbe:	f107 030c 	add.w	r3, r7, #12
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	480c      	ldr	r0, [pc, #48]	; (8003ff8 <MX_TIM4_Init+0xa0>)
 8003fc6:	f7fe f8a5 	bl	8002114 <HAL_TIM_Encoder_Init>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003fd0:	f7ff fde2 	bl	8003b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003fdc:	1d3b      	adds	r3, r7, #4
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4805      	ldr	r0, [pc, #20]	; (8003ff8 <MX_TIM4_Init+0xa0>)
 8003fe2:	f7fe ff1e 	bl	8002e22 <HAL_TIMEx_MasterConfigSynchronization>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003fec:	f7ff fdd4 	bl	8003b98 <Error_Handler>
  }

}
 8003ff0:	bf00      	nop
 8003ff2:	3730      	adds	r7, #48	; 0x30
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	20000564 	.word	0x20000564
 8003ffc:	40000800 	.word	0x40000800

08004000 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08c      	sub	sp, #48	; 0x30
 8004004:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8004006:	f107 030c 	add.w	r3, r7, #12
 800400a:	2224      	movs	r2, #36	; 0x24
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f000 faa6 	bl	8004560 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004014:	1d3b      	adds	r3, r7, #4
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 800401c:	4b22      	ldr	r3, [pc, #136]	; (80040a8 <MX_TIM8_Init+0xa8>)
 800401e:	4a23      	ldr	r2, [pc, #140]	; (80040ac <MX_TIM8_Init+0xac>)
 8004020:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004022:	4b21      	ldr	r3, [pc, #132]	; (80040a8 <MX_TIM8_Init+0xa8>)
 8004024:	2200      	movs	r2, #0
 8004026:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004028:	4b1f      	ldr	r3, [pc, #124]	; (80040a8 <MX_TIM8_Init+0xa8>)
 800402a:	2200      	movs	r2, #0
 800402c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 800402e:	4b1e      	ldr	r3, [pc, #120]	; (80040a8 <MX_TIM8_Init+0xa8>)
 8004030:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004034:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004036:	4b1c      	ldr	r3, [pc, #112]	; (80040a8 <MX_TIM8_Init+0xa8>)
 8004038:	2200      	movs	r2, #0
 800403a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800403c:	4b1a      	ldr	r3, [pc, #104]	; (80040a8 <MX_TIM8_Init+0xa8>)
 800403e:	2200      	movs	r2, #0
 8004040:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004042:	4b19      	ldr	r3, [pc, #100]	; (80040a8 <MX_TIM8_Init+0xa8>)
 8004044:	2200      	movs	r2, #0
 8004046:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004048:	2303      	movs	r3, #3
 800404a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800404c:	2300      	movs	r3, #0
 800404e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004050:	2301      	movs	r3, #1
 8004052:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004054:	2300      	movs	r3, #0
 8004056:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8004058:	230f      	movs	r3, #15
 800405a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800405c:	2300      	movs	r3, #0
 800405e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004060:	2301      	movs	r3, #1
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004064:	2300      	movs	r3, #0
 8004066:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8004068:	230f      	movs	r3, #15
 800406a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800406c:	f107 030c 	add.w	r3, r7, #12
 8004070:	4619      	mov	r1, r3
 8004072:	480d      	ldr	r0, [pc, #52]	; (80040a8 <MX_TIM8_Init+0xa8>)
 8004074:	f7fe f84e 	bl	8002114 <HAL_TIM_Encoder_Init>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800407e:	f7ff fd8b 	bl	8003b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004082:	2300      	movs	r3, #0
 8004084:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800408a:	1d3b      	adds	r3, r7, #4
 800408c:	4619      	mov	r1, r3
 800408e:	4806      	ldr	r0, [pc, #24]	; (80040a8 <MX_TIM8_Init+0xa8>)
 8004090:	f7fe fec7 	bl	8002e22 <HAL_TIMEx_MasterConfigSynchronization>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800409a:	f7ff fd7d 	bl	8003b98 <Error_Handler>
  }

}
 800409e:	bf00      	nop
 80040a0:	3730      	adds	r7, #48	; 0x30
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	20000524 	.word	0x20000524
 80040ac:	40010400 	.word	0x40010400

080040b0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040b6:	463b      	mov	r3, r7
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	609a      	str	r2, [r3, #8]
 80040c0:	60da      	str	r2, [r3, #12]

  htim12.Instance = TIM12;
 80040c2:	4b16      	ldr	r3, [pc, #88]	; (800411c <MX_TIM12_Init+0x6c>)
 80040c4:	4a16      	ldr	r2, [pc, #88]	; (8004120 <MX_TIM12_Init+0x70>)
 80040c6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 40000-1;
 80040c8:	4b14      	ldr	r3, [pc, #80]	; (800411c <MX_TIM12_Init+0x6c>)
 80040ca:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80040ce:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040d0:	4b12      	ldr	r3, [pc, #72]	; (800411c <MX_TIM12_Init+0x6c>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1;
 80040d6:	4b11      	ldr	r3, [pc, #68]	; (800411c <MX_TIM12_Init+0x6c>)
 80040d8:	2201      	movs	r2, #1
 80040da:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80040dc:	4b0f      	ldr	r3, [pc, #60]	; (800411c <MX_TIM12_Init+0x6c>)
 80040de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040e2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040e4:	4b0d      	ldr	r3, [pc, #52]	; (800411c <MX_TIM12_Init+0x6c>)
 80040e6:	2280      	movs	r2, #128	; 0x80
 80040e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80040ea:	480c      	ldr	r0, [pc, #48]	; (800411c <MX_TIM12_Init+0x6c>)
 80040ec:	f7fd ff4f 	bl	8001f8e <HAL_TIM_Base_Init>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 80040f6:	f7ff fd4f 	bl	8003b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040fe:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004100:	463b      	mov	r3, r7
 8004102:	4619      	mov	r1, r3
 8004104:	4805      	ldr	r0, [pc, #20]	; (800411c <MX_TIM12_Init+0x6c>)
 8004106:	f7fe fa9d 	bl	8002644 <HAL_TIM_ConfigClockSource>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8004110:	f7ff fd42 	bl	8003b98 <Error_Handler>
  }

}
 8004114:	bf00      	nop
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	20000624 	.word	0x20000624
 8004120:	40001800 	.word	0x40001800

08004124 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800412a:	1d3b      	adds	r3, r7, #4
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	609a      	str	r2, [r3, #8]
 8004134:	60da      	str	r2, [r3, #12]
 8004136:	611a      	str	r2, [r3, #16]
 8004138:	615a      	str	r2, [r3, #20]
 800413a:	619a      	str	r2, [r3, #24]

  htim13.Instance = TIM13;
 800413c:	4b1e      	ldr	r3, [pc, #120]	; (80041b8 <MX_TIM13_Init+0x94>)
 800413e:	4a1f      	ldr	r2, [pc, #124]	; (80041bc <MX_TIM13_Init+0x98>)
 8004140:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 45-1;
 8004142:	4b1d      	ldr	r3, [pc, #116]	; (80041b8 <MX_TIM13_Init+0x94>)
 8004144:	222c      	movs	r2, #44	; 0x2c
 8004146:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004148:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <MX_TIM13_Init+0x94>)
 800414a:	2200      	movs	r2, #0
 800414c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100;
 800414e:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <MX_TIM13_Init+0x94>)
 8004150:	2264      	movs	r2, #100	; 0x64
 8004152:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8004154:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <MX_TIM13_Init+0x94>)
 8004156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800415a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800415c:	4b16      	ldr	r3, [pc, #88]	; (80041b8 <MX_TIM13_Init+0x94>)
 800415e:	2280      	movs	r2, #128	; 0x80
 8004160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004162:	4815      	ldr	r0, [pc, #84]	; (80041b8 <MX_TIM13_Init+0x94>)
 8004164:	f7fd ff13 	bl	8001f8e <HAL_TIM_Base_Init>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800416e:	f7ff fd13 	bl	8003b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8004172:	4811      	ldr	r0, [pc, #68]	; (80041b8 <MX_TIM13_Init+0x94>)
 8004174:	f7fd ff5a 	bl	800202c <HAL_TIM_PWM_Init>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800417e:	f7ff fd0b 	bl	8003b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004182:	2360      	movs	r3, #96	; 0x60
 8004184:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 80;
 8004186:	2350      	movs	r3, #80	; 0x50
 8004188:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800418e:	2300      	movs	r3, #0
 8004190:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004192:	1d3b      	adds	r3, r7, #4
 8004194:	2200      	movs	r2, #0
 8004196:	4619      	mov	r1, r3
 8004198:	4807      	ldr	r0, [pc, #28]	; (80041b8 <MX_TIM13_Init+0x94>)
 800419a:	f7fe f98d 	bl	80024b8 <HAL_TIM_PWM_ConfigChannel>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80041a4:	f7ff fcf8 	bl	8003b98 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim13);
 80041a8:	4803      	ldr	r0, [pc, #12]	; (80041b8 <MX_TIM13_Init+0x94>)
 80041aa:	f000 f923 	bl	80043f4 <HAL_TIM_MspPostInit>

}
 80041ae:	bf00      	nop
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	200005a4 	.word	0x200005a4
 80041bc:	40001c00 	.word	0x40001c00

080041c0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041c6:	1d3b      	adds	r3, r7, #4
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	605a      	str	r2, [r3, #4]
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	60da      	str	r2, [r3, #12]
 80041d2:	611a      	str	r2, [r3, #16]
 80041d4:	615a      	str	r2, [r3, #20]
 80041d6:	619a      	str	r2, [r3, #24]

  htim14.Instance = TIM14;
 80041d8:	4b1e      	ldr	r3, [pc, #120]	; (8004254 <MX_TIM14_Init+0x94>)
 80041da:	4a1f      	ldr	r2, [pc, #124]	; (8004258 <MX_TIM14_Init+0x98>)
 80041dc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 45-1;
 80041de:	4b1d      	ldr	r3, [pc, #116]	; (8004254 <MX_TIM14_Init+0x94>)
 80041e0:	222c      	movs	r2, #44	; 0x2c
 80041e2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041e4:	4b1b      	ldr	r3, [pc, #108]	; (8004254 <MX_TIM14_Init+0x94>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100;
 80041ea:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <MX_TIM14_Init+0x94>)
 80041ec:	2264      	movs	r2, #100	; 0x64
 80041ee:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80041f0:	4b18      	ldr	r3, [pc, #96]	; (8004254 <MX_TIM14_Init+0x94>)
 80041f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041f6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041f8:	4b16      	ldr	r3, [pc, #88]	; (8004254 <MX_TIM14_Init+0x94>)
 80041fa:	2280      	movs	r2, #128	; 0x80
 80041fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80041fe:	4815      	ldr	r0, [pc, #84]	; (8004254 <MX_TIM14_Init+0x94>)
 8004200:	f7fd fec5 	bl	8001f8e <HAL_TIM_Base_Init>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 800420a:	f7ff fcc5 	bl	8003b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800420e:	4811      	ldr	r0, [pc, #68]	; (8004254 <MX_TIM14_Init+0x94>)
 8004210:	f7fd ff0c 	bl	800202c <HAL_TIM_PWM_Init>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 800421a:	f7ff fcbd 	bl	8003b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800421e:	2360      	movs	r3, #96	; 0x60
 8004220:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 80;
 8004222:	2350      	movs	r3, #80	; 0x50
 8004224:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800422e:	1d3b      	adds	r3, r7, #4
 8004230:	2200      	movs	r2, #0
 8004232:	4619      	mov	r1, r3
 8004234:	4807      	ldr	r0, [pc, #28]	; (8004254 <MX_TIM14_Init+0x94>)
 8004236:	f7fe f93f 	bl	80024b8 <HAL_TIM_PWM_ConfigChannel>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8004240:	f7ff fcaa 	bl	8003b98 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 8004244:	4803      	ldr	r0, [pc, #12]	; (8004254 <MX_TIM14_Init+0x94>)
 8004246:	f000 f8d5 	bl	80043f4 <HAL_TIM_MspPostInit>

}
 800424a:	bf00      	nop
 800424c:	3720      	adds	r7, #32
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	200005e4 	.word	0x200005e4
 8004258:	40002000 	.word	0x40002000

0800425c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08c      	sub	sp, #48	; 0x30
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004264:	f107 031c 	add.w	r3, r7, #28
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	609a      	str	r2, [r3, #8]
 8004270:	60da      	str	r2, [r3, #12]
 8004272:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a32      	ldr	r2, [pc, #200]	; (8004344 <HAL_TIM_Encoder_MspInit+0xe8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d12d      	bne.n	80042da <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800427e:	2300      	movs	r3, #0
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	4a31      	ldr	r2, [pc, #196]	; (8004348 <HAL_TIM_Encoder_MspInit+0xec>)
 8004284:	4b30      	ldr	r3, [pc, #192]	; (8004348 <HAL_TIM_Encoder_MspInit+0xec>)
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	f043 0304 	orr.w	r3, r3, #4
 800428c:	6413      	str	r3, [r2, #64]	; 0x40
 800428e:	4b2e      	ldr	r3, [pc, #184]	; (8004348 <HAL_TIM_Encoder_MspInit+0xec>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	4a2a      	ldr	r2, [pc, #168]	; (8004348 <HAL_TIM_Encoder_MspInit+0xec>)
 80042a0:	4b29      	ldr	r3, [pc, #164]	; (8004348 <HAL_TIM_Encoder_MspInit+0xec>)
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	f043 0308 	orr.w	r3, r3, #8
 80042a8:	6313      	str	r3, [r2, #48]	; 0x30
 80042aa:	4b27      	ldr	r3, [pc, #156]	; (8004348 <HAL_TIM_Encoder_MspInit+0xec>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80042b6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80042ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042bc:	2302      	movs	r3, #2
 80042be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c0:	2300      	movs	r3, #0
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c4:	2300      	movs	r3, #0
 80042c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80042c8:	2302      	movs	r3, #2
 80042ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042cc:	f107 031c 	add.w	r3, r7, #28
 80042d0:	4619      	mov	r1, r3
 80042d2:	481e      	ldr	r0, [pc, #120]	; (800434c <HAL_TIM_Encoder_MspInit+0xf0>)
 80042d4:	f7fc fea0 	bl	8001018 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80042d8:	e030      	b.n	800433c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM8)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a1c      	ldr	r2, [pc, #112]	; (8004350 <HAL_TIM_Encoder_MspInit+0xf4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d12b      	bne.n	800433c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80042e4:	2300      	movs	r3, #0
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	4a17      	ldr	r2, [pc, #92]	; (8004348 <HAL_TIM_Encoder_MspInit+0xec>)
 80042ea:	4b17      	ldr	r3, [pc, #92]	; (8004348 <HAL_TIM_Encoder_MspInit+0xec>)
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	f043 0302 	orr.w	r3, r3, #2
 80042f2:	6453      	str	r3, [r2, #68]	; 0x44
 80042f4:	4b14      	ldr	r3, [pc, #80]	; (8004348 <HAL_TIM_Encoder_MspInit+0xec>)
 80042f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	4a10      	ldr	r2, [pc, #64]	; (8004348 <HAL_TIM_Encoder_MspInit+0xec>)
 8004306:	4b10      	ldr	r3, [pc, #64]	; (8004348 <HAL_TIM_Encoder_MspInit+0xec>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	f043 0304 	orr.w	r3, r3, #4
 800430e:	6313      	str	r3, [r2, #48]	; 0x30
 8004310:	4b0d      	ldr	r3, [pc, #52]	; (8004348 <HAL_TIM_Encoder_MspInit+0xec>)
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800431c:	23c0      	movs	r3, #192	; 0xc0
 800431e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004320:	2302      	movs	r3, #2
 8004322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004324:	2300      	movs	r3, #0
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004328:	2300      	movs	r3, #0
 800432a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800432c:	2303      	movs	r3, #3
 800432e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004330:	f107 031c 	add.w	r3, r7, #28
 8004334:	4619      	mov	r1, r3
 8004336:	4807      	ldr	r0, [pc, #28]	; (8004354 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004338:	f7fc fe6e 	bl	8001018 <HAL_GPIO_Init>
}
 800433c:	bf00      	nop
 800433e:	3730      	adds	r7, #48	; 0x30
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40000800 	.word	0x40000800
 8004348:	40023800 	.word	0x40023800
 800434c:	40020c00 	.word	0x40020c00
 8004350:	40010400 	.word	0x40010400
 8004354:	40020800 	.word	0x40020800

08004358 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM12)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1f      	ldr	r2, [pc, #124]	; (80043e4 <HAL_TIM_Base_MspInit+0x8c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d10e      	bne.n	8004388 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	4a1e      	ldr	r2, [pc, #120]	; (80043e8 <HAL_TIM_Base_MspInit+0x90>)
 8004370:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <HAL_TIM_Base_MspInit+0x90>)
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004378:	6413      	str	r3, [r2, #64]	; 0x40
 800437a:	4b1b      	ldr	r3, [pc, #108]	; (80043e8 <HAL_TIM_Base_MspInit+0x90>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8004386:	e026      	b.n	80043d6 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM13)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a17      	ldr	r2, [pc, #92]	; (80043ec <HAL_TIM_Base_MspInit+0x94>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d10e      	bne.n	80043b0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004392:	2300      	movs	r3, #0
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	4a14      	ldr	r2, [pc, #80]	; (80043e8 <HAL_TIM_Base_MspInit+0x90>)
 8004398:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <HAL_TIM_Base_MspInit+0x90>)
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a0:	6413      	str	r3, [r2, #64]	; 0x40
 80043a2:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <HAL_TIM_Base_MspInit+0x90>)
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	693b      	ldr	r3, [r7, #16]
}
 80043ae:	e012      	b.n	80043d6 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM14)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a0e      	ldr	r2, [pc, #56]	; (80043f0 <HAL_TIM_Base_MspInit+0x98>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d10d      	bne.n	80043d6 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	4a0a      	ldr	r2, [pc, #40]	; (80043e8 <HAL_TIM_Base_MspInit+0x90>)
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <HAL_TIM_Base_MspInit+0x90>)
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ca:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <HAL_TIM_Base_MspInit+0x90>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	68fb      	ldr	r3, [r7, #12]
}
 80043d6:	bf00      	nop
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40001800 	.word	0x40001800
 80043e8:	40023800 	.word	0x40023800
 80043ec:	40001c00 	.word	0x40001c00
 80043f0:	40002000 	.word	0x40002000

080043f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08a      	sub	sp, #40	; 0x28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043fc:	f107 0314 	add.w	r3, r7, #20
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	605a      	str	r2, [r3, #4]
 8004406:	609a      	str	r2, [r3, #8]
 8004408:	60da      	str	r2, [r3, #12]
 800440a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a25      	ldr	r2, [pc, #148]	; (80044a8 <HAL_TIM_MspPostInit+0xb4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d11f      	bne.n	8004456 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	613b      	str	r3, [r7, #16]
 800441a:	4a24      	ldr	r2, [pc, #144]	; (80044ac <HAL_TIM_MspPostInit+0xb8>)
 800441c:	4b23      	ldr	r3, [pc, #140]	; (80044ac <HAL_TIM_MspPostInit+0xb8>)
 800441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004420:	f043 0320 	orr.w	r3, r3, #32
 8004424:	6313      	str	r3, [r2, #48]	; 0x30
 8004426:	4b21      	ldr	r3, [pc, #132]	; (80044ac <HAL_TIM_MspPostInit+0xb8>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration    
    PF8     ------> TIM13_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004432:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004438:	2302      	movs	r3, #2
 800443a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443c:	2300      	movs	r3, #0
 800443e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004440:	2300      	movs	r3, #0
 8004442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8004444:	2309      	movs	r3, #9
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004448:	f107 0314 	add.w	r3, r7, #20
 800444c:	4619      	mov	r1, r3
 800444e:	4818      	ldr	r0, [pc, #96]	; (80044b0 <HAL_TIM_MspPostInit+0xbc>)
 8004450:	f7fc fde2 	bl	8001018 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8004454:	e023      	b.n	800449e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM14)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a16      	ldr	r2, [pc, #88]	; (80044b4 <HAL_TIM_MspPostInit+0xc0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d11e      	bne.n	800449e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	4a11      	ldr	r2, [pc, #68]	; (80044ac <HAL_TIM_MspPostInit+0xb8>)
 8004466:	4b11      	ldr	r3, [pc, #68]	; (80044ac <HAL_TIM_MspPostInit+0xb8>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	f043 0320 	orr.w	r3, r3, #32
 800446e:	6313      	str	r3, [r2, #48]	; 0x30
 8004470:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <HAL_TIM_MspPostInit+0xb8>)
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	f003 0320 	and.w	r3, r3, #32
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800447c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004482:	2302      	movs	r3, #2
 8004484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800448a:	2300      	movs	r3, #0
 800448c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800448e:	2309      	movs	r3, #9
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004492:	f107 0314 	add.w	r3, r7, #20
 8004496:	4619      	mov	r1, r3
 8004498:	4805      	ldr	r0, [pc, #20]	; (80044b0 <HAL_TIM_MspPostInit+0xbc>)
 800449a:	f7fc fdbd 	bl	8001018 <HAL_GPIO_Init>
}
 800449e:	bf00      	nop
 80044a0:	3728      	adds	r7, #40	; 0x28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40001c00 	.word	0x40001c00
 80044ac:	40023800 	.word	0x40023800
 80044b0:	40021400 	.word	0x40021400
 80044b4:	40002000 	.word	0x40002000

080044b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80044b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044f0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80044bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80044be:	e003      	b.n	80044c8 <LoopCopyDataInit>

080044c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80044c0:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80044c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80044c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80044c6:	3104      	adds	r1, #4

080044c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80044c8:	480b      	ldr	r0, [pc, #44]	; (80044f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80044ca:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80044cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80044ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80044d0:	d3f6      	bcc.n	80044c0 <CopyDataInit>
  ldr  r2, =_sbss
 80044d2:	4a0b      	ldr	r2, [pc, #44]	; (8004500 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80044d4:	e002      	b.n	80044dc <LoopFillZerobss>

080044d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80044d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80044d8:	f842 3b04 	str.w	r3, [r2], #4

080044dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80044de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80044e0:	d3f9      	bcc.n	80044d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80044e2:	f7ff fd03 	bl	8003eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044e6:	f000 f817 	bl	8004518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044ea:	f7ff f9b9 	bl	8003860 <main>
  bx  lr    
 80044ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80044f0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80044f4:	08004f50 	.word	0x08004f50
  ldr  r0, =_sdata
 80044f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80044fc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8004500:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8004504:	20000668 	.word	0x20000668

08004508 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004508:	e7fe      	b.n	8004508 <ADC_IRQHandler>
	...

0800450c <__errno>:
 800450c:	4b01      	ldr	r3, [pc, #4]	; (8004514 <__errno+0x8>)
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	2000000c 	.word	0x2000000c

08004518 <__libc_init_array>:
 8004518:	b570      	push	{r4, r5, r6, lr}
 800451a:	4e0d      	ldr	r6, [pc, #52]	; (8004550 <__libc_init_array+0x38>)
 800451c:	4c0d      	ldr	r4, [pc, #52]	; (8004554 <__libc_init_array+0x3c>)
 800451e:	1ba4      	subs	r4, r4, r6
 8004520:	10a4      	asrs	r4, r4, #2
 8004522:	2500      	movs	r5, #0
 8004524:	42a5      	cmp	r5, r4
 8004526:	d109      	bne.n	800453c <__libc_init_array+0x24>
 8004528:	4e0b      	ldr	r6, [pc, #44]	; (8004558 <__libc_init_array+0x40>)
 800452a:	4c0c      	ldr	r4, [pc, #48]	; (800455c <__libc_init_array+0x44>)
 800452c:	f000 fc8e 	bl	8004e4c <_init>
 8004530:	1ba4      	subs	r4, r4, r6
 8004532:	10a4      	asrs	r4, r4, #2
 8004534:	2500      	movs	r5, #0
 8004536:	42a5      	cmp	r5, r4
 8004538:	d105      	bne.n	8004546 <__libc_init_array+0x2e>
 800453a:	bd70      	pop	{r4, r5, r6, pc}
 800453c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004540:	4798      	blx	r3
 8004542:	3501      	adds	r5, #1
 8004544:	e7ee      	b.n	8004524 <__libc_init_array+0xc>
 8004546:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800454a:	4798      	blx	r3
 800454c:	3501      	adds	r5, #1
 800454e:	e7f2      	b.n	8004536 <__libc_init_array+0x1e>
 8004550:	08004f48 	.word	0x08004f48
 8004554:	08004f48 	.word	0x08004f48
 8004558:	08004f48 	.word	0x08004f48
 800455c:	08004f4c 	.word	0x08004f4c

08004560 <memset>:
 8004560:	4402      	add	r2, r0
 8004562:	4603      	mov	r3, r0
 8004564:	4293      	cmp	r3, r2
 8004566:	d100      	bne.n	800456a <memset+0xa>
 8004568:	4770      	bx	lr
 800456a:	f803 1b01 	strb.w	r1, [r3], #1
 800456e:	e7f9      	b.n	8004564 <memset+0x4>

08004570 <_puts_r>:
 8004570:	b570      	push	{r4, r5, r6, lr}
 8004572:	460e      	mov	r6, r1
 8004574:	4605      	mov	r5, r0
 8004576:	b118      	cbz	r0, 8004580 <_puts_r+0x10>
 8004578:	6983      	ldr	r3, [r0, #24]
 800457a:	b90b      	cbnz	r3, 8004580 <_puts_r+0x10>
 800457c:	f000 fa0e 	bl	800499c <__sinit>
 8004580:	69ab      	ldr	r3, [r5, #24]
 8004582:	68ac      	ldr	r4, [r5, #8]
 8004584:	b913      	cbnz	r3, 800458c <_puts_r+0x1c>
 8004586:	4628      	mov	r0, r5
 8004588:	f000 fa08 	bl	800499c <__sinit>
 800458c:	4b23      	ldr	r3, [pc, #140]	; (800461c <_puts_r+0xac>)
 800458e:	429c      	cmp	r4, r3
 8004590:	d117      	bne.n	80045c2 <_puts_r+0x52>
 8004592:	686c      	ldr	r4, [r5, #4]
 8004594:	89a3      	ldrh	r3, [r4, #12]
 8004596:	071b      	lsls	r3, r3, #28
 8004598:	d51d      	bpl.n	80045d6 <_puts_r+0x66>
 800459a:	6923      	ldr	r3, [r4, #16]
 800459c:	b1db      	cbz	r3, 80045d6 <_puts_r+0x66>
 800459e:	3e01      	subs	r6, #1
 80045a0:	68a3      	ldr	r3, [r4, #8]
 80045a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80045a6:	3b01      	subs	r3, #1
 80045a8:	60a3      	str	r3, [r4, #8]
 80045aa:	b9e9      	cbnz	r1, 80045e8 <_puts_r+0x78>
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	da2e      	bge.n	800460e <_puts_r+0x9e>
 80045b0:	4622      	mov	r2, r4
 80045b2:	210a      	movs	r1, #10
 80045b4:	4628      	mov	r0, r5
 80045b6:	f000 f83f 	bl	8004638 <__swbuf_r>
 80045ba:	3001      	adds	r0, #1
 80045bc:	d011      	beq.n	80045e2 <_puts_r+0x72>
 80045be:	200a      	movs	r0, #10
 80045c0:	bd70      	pop	{r4, r5, r6, pc}
 80045c2:	4b17      	ldr	r3, [pc, #92]	; (8004620 <_puts_r+0xb0>)
 80045c4:	429c      	cmp	r4, r3
 80045c6:	d101      	bne.n	80045cc <_puts_r+0x5c>
 80045c8:	68ac      	ldr	r4, [r5, #8]
 80045ca:	e7e3      	b.n	8004594 <_puts_r+0x24>
 80045cc:	4b15      	ldr	r3, [pc, #84]	; (8004624 <_puts_r+0xb4>)
 80045ce:	429c      	cmp	r4, r3
 80045d0:	bf08      	it	eq
 80045d2:	68ec      	ldreq	r4, [r5, #12]
 80045d4:	e7de      	b.n	8004594 <_puts_r+0x24>
 80045d6:	4621      	mov	r1, r4
 80045d8:	4628      	mov	r0, r5
 80045da:	f000 f87f 	bl	80046dc <__swsetup_r>
 80045de:	2800      	cmp	r0, #0
 80045e0:	d0dd      	beq.n	800459e <_puts_r+0x2e>
 80045e2:	f04f 30ff 	mov.w	r0, #4294967295
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	da04      	bge.n	80045f6 <_puts_r+0x86>
 80045ec:	69a2      	ldr	r2, [r4, #24]
 80045ee:	4293      	cmp	r3, r2
 80045f0:	db06      	blt.n	8004600 <_puts_r+0x90>
 80045f2:	290a      	cmp	r1, #10
 80045f4:	d004      	beq.n	8004600 <_puts_r+0x90>
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	6022      	str	r2, [r4, #0]
 80045fc:	7019      	strb	r1, [r3, #0]
 80045fe:	e7cf      	b.n	80045a0 <_puts_r+0x30>
 8004600:	4622      	mov	r2, r4
 8004602:	4628      	mov	r0, r5
 8004604:	f000 f818 	bl	8004638 <__swbuf_r>
 8004608:	3001      	adds	r0, #1
 800460a:	d1c9      	bne.n	80045a0 <_puts_r+0x30>
 800460c:	e7e9      	b.n	80045e2 <_puts_r+0x72>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	200a      	movs	r0, #10
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	6022      	str	r2, [r4, #0]
 8004616:	7018      	strb	r0, [r3, #0]
 8004618:	bd70      	pop	{r4, r5, r6, pc}
 800461a:	bf00      	nop
 800461c:	08004f00 	.word	0x08004f00
 8004620:	08004f20 	.word	0x08004f20
 8004624:	08004ee0 	.word	0x08004ee0

08004628 <puts>:
 8004628:	4b02      	ldr	r3, [pc, #8]	; (8004634 <puts+0xc>)
 800462a:	4601      	mov	r1, r0
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	f7ff bf9f 	b.w	8004570 <_puts_r>
 8004632:	bf00      	nop
 8004634:	2000000c 	.word	0x2000000c

08004638 <__swbuf_r>:
 8004638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463a:	460e      	mov	r6, r1
 800463c:	4614      	mov	r4, r2
 800463e:	4605      	mov	r5, r0
 8004640:	b118      	cbz	r0, 800464a <__swbuf_r+0x12>
 8004642:	6983      	ldr	r3, [r0, #24]
 8004644:	b90b      	cbnz	r3, 800464a <__swbuf_r+0x12>
 8004646:	f000 f9a9 	bl	800499c <__sinit>
 800464a:	4b21      	ldr	r3, [pc, #132]	; (80046d0 <__swbuf_r+0x98>)
 800464c:	429c      	cmp	r4, r3
 800464e:	d12a      	bne.n	80046a6 <__swbuf_r+0x6e>
 8004650:	686c      	ldr	r4, [r5, #4]
 8004652:	69a3      	ldr	r3, [r4, #24]
 8004654:	60a3      	str	r3, [r4, #8]
 8004656:	89a3      	ldrh	r3, [r4, #12]
 8004658:	071a      	lsls	r2, r3, #28
 800465a:	d52e      	bpl.n	80046ba <__swbuf_r+0x82>
 800465c:	6923      	ldr	r3, [r4, #16]
 800465e:	b363      	cbz	r3, 80046ba <__swbuf_r+0x82>
 8004660:	6923      	ldr	r3, [r4, #16]
 8004662:	6820      	ldr	r0, [r4, #0]
 8004664:	1ac0      	subs	r0, r0, r3
 8004666:	6963      	ldr	r3, [r4, #20]
 8004668:	b2f6      	uxtb	r6, r6
 800466a:	4298      	cmp	r0, r3
 800466c:	4637      	mov	r7, r6
 800466e:	db04      	blt.n	800467a <__swbuf_r+0x42>
 8004670:	4621      	mov	r1, r4
 8004672:	4628      	mov	r0, r5
 8004674:	f000 f928 	bl	80048c8 <_fflush_r>
 8004678:	bb28      	cbnz	r0, 80046c6 <__swbuf_r+0x8e>
 800467a:	68a3      	ldr	r3, [r4, #8]
 800467c:	3b01      	subs	r3, #1
 800467e:	60a3      	str	r3, [r4, #8]
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	6022      	str	r2, [r4, #0]
 8004686:	701e      	strb	r6, [r3, #0]
 8004688:	6963      	ldr	r3, [r4, #20]
 800468a:	3001      	adds	r0, #1
 800468c:	4298      	cmp	r0, r3
 800468e:	d004      	beq.n	800469a <__swbuf_r+0x62>
 8004690:	89a3      	ldrh	r3, [r4, #12]
 8004692:	07db      	lsls	r3, r3, #31
 8004694:	d519      	bpl.n	80046ca <__swbuf_r+0x92>
 8004696:	2e0a      	cmp	r6, #10
 8004698:	d117      	bne.n	80046ca <__swbuf_r+0x92>
 800469a:	4621      	mov	r1, r4
 800469c:	4628      	mov	r0, r5
 800469e:	f000 f913 	bl	80048c8 <_fflush_r>
 80046a2:	b190      	cbz	r0, 80046ca <__swbuf_r+0x92>
 80046a4:	e00f      	b.n	80046c6 <__swbuf_r+0x8e>
 80046a6:	4b0b      	ldr	r3, [pc, #44]	; (80046d4 <__swbuf_r+0x9c>)
 80046a8:	429c      	cmp	r4, r3
 80046aa:	d101      	bne.n	80046b0 <__swbuf_r+0x78>
 80046ac:	68ac      	ldr	r4, [r5, #8]
 80046ae:	e7d0      	b.n	8004652 <__swbuf_r+0x1a>
 80046b0:	4b09      	ldr	r3, [pc, #36]	; (80046d8 <__swbuf_r+0xa0>)
 80046b2:	429c      	cmp	r4, r3
 80046b4:	bf08      	it	eq
 80046b6:	68ec      	ldreq	r4, [r5, #12]
 80046b8:	e7cb      	b.n	8004652 <__swbuf_r+0x1a>
 80046ba:	4621      	mov	r1, r4
 80046bc:	4628      	mov	r0, r5
 80046be:	f000 f80d 	bl	80046dc <__swsetup_r>
 80046c2:	2800      	cmp	r0, #0
 80046c4:	d0cc      	beq.n	8004660 <__swbuf_r+0x28>
 80046c6:	f04f 37ff 	mov.w	r7, #4294967295
 80046ca:	4638      	mov	r0, r7
 80046cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ce:	bf00      	nop
 80046d0:	08004f00 	.word	0x08004f00
 80046d4:	08004f20 	.word	0x08004f20
 80046d8:	08004ee0 	.word	0x08004ee0

080046dc <__swsetup_r>:
 80046dc:	4b32      	ldr	r3, [pc, #200]	; (80047a8 <__swsetup_r+0xcc>)
 80046de:	b570      	push	{r4, r5, r6, lr}
 80046e0:	681d      	ldr	r5, [r3, #0]
 80046e2:	4606      	mov	r6, r0
 80046e4:	460c      	mov	r4, r1
 80046e6:	b125      	cbz	r5, 80046f2 <__swsetup_r+0x16>
 80046e8:	69ab      	ldr	r3, [r5, #24]
 80046ea:	b913      	cbnz	r3, 80046f2 <__swsetup_r+0x16>
 80046ec:	4628      	mov	r0, r5
 80046ee:	f000 f955 	bl	800499c <__sinit>
 80046f2:	4b2e      	ldr	r3, [pc, #184]	; (80047ac <__swsetup_r+0xd0>)
 80046f4:	429c      	cmp	r4, r3
 80046f6:	d10f      	bne.n	8004718 <__swsetup_r+0x3c>
 80046f8:	686c      	ldr	r4, [r5, #4]
 80046fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046fe:	b29a      	uxth	r2, r3
 8004700:	0715      	lsls	r5, r2, #28
 8004702:	d42c      	bmi.n	800475e <__swsetup_r+0x82>
 8004704:	06d0      	lsls	r0, r2, #27
 8004706:	d411      	bmi.n	800472c <__swsetup_r+0x50>
 8004708:	2209      	movs	r2, #9
 800470a:	6032      	str	r2, [r6, #0]
 800470c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004710:	81a3      	strh	r3, [r4, #12]
 8004712:	f04f 30ff 	mov.w	r0, #4294967295
 8004716:	bd70      	pop	{r4, r5, r6, pc}
 8004718:	4b25      	ldr	r3, [pc, #148]	; (80047b0 <__swsetup_r+0xd4>)
 800471a:	429c      	cmp	r4, r3
 800471c:	d101      	bne.n	8004722 <__swsetup_r+0x46>
 800471e:	68ac      	ldr	r4, [r5, #8]
 8004720:	e7eb      	b.n	80046fa <__swsetup_r+0x1e>
 8004722:	4b24      	ldr	r3, [pc, #144]	; (80047b4 <__swsetup_r+0xd8>)
 8004724:	429c      	cmp	r4, r3
 8004726:	bf08      	it	eq
 8004728:	68ec      	ldreq	r4, [r5, #12]
 800472a:	e7e6      	b.n	80046fa <__swsetup_r+0x1e>
 800472c:	0751      	lsls	r1, r2, #29
 800472e:	d512      	bpl.n	8004756 <__swsetup_r+0x7a>
 8004730:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004732:	b141      	cbz	r1, 8004746 <__swsetup_r+0x6a>
 8004734:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004738:	4299      	cmp	r1, r3
 800473a:	d002      	beq.n	8004742 <__swsetup_r+0x66>
 800473c:	4630      	mov	r0, r6
 800473e:	f000 fa1b 	bl	8004b78 <_free_r>
 8004742:	2300      	movs	r3, #0
 8004744:	6363      	str	r3, [r4, #52]	; 0x34
 8004746:	89a3      	ldrh	r3, [r4, #12]
 8004748:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800474c:	81a3      	strh	r3, [r4, #12]
 800474e:	2300      	movs	r3, #0
 8004750:	6063      	str	r3, [r4, #4]
 8004752:	6923      	ldr	r3, [r4, #16]
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	89a3      	ldrh	r3, [r4, #12]
 8004758:	f043 0308 	orr.w	r3, r3, #8
 800475c:	81a3      	strh	r3, [r4, #12]
 800475e:	6923      	ldr	r3, [r4, #16]
 8004760:	b94b      	cbnz	r3, 8004776 <__swsetup_r+0x9a>
 8004762:	89a3      	ldrh	r3, [r4, #12]
 8004764:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800476c:	d003      	beq.n	8004776 <__swsetup_r+0x9a>
 800476e:	4621      	mov	r1, r4
 8004770:	4630      	mov	r0, r6
 8004772:	f000 f9c1 	bl	8004af8 <__smakebuf_r>
 8004776:	89a2      	ldrh	r2, [r4, #12]
 8004778:	f012 0301 	ands.w	r3, r2, #1
 800477c:	d00c      	beq.n	8004798 <__swsetup_r+0xbc>
 800477e:	2300      	movs	r3, #0
 8004780:	60a3      	str	r3, [r4, #8]
 8004782:	6963      	ldr	r3, [r4, #20]
 8004784:	425b      	negs	r3, r3
 8004786:	61a3      	str	r3, [r4, #24]
 8004788:	6923      	ldr	r3, [r4, #16]
 800478a:	b953      	cbnz	r3, 80047a2 <__swsetup_r+0xc6>
 800478c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004790:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004794:	d1ba      	bne.n	800470c <__swsetup_r+0x30>
 8004796:	bd70      	pop	{r4, r5, r6, pc}
 8004798:	0792      	lsls	r2, r2, #30
 800479a:	bf58      	it	pl
 800479c:	6963      	ldrpl	r3, [r4, #20]
 800479e:	60a3      	str	r3, [r4, #8]
 80047a0:	e7f2      	b.n	8004788 <__swsetup_r+0xac>
 80047a2:	2000      	movs	r0, #0
 80047a4:	e7f7      	b.n	8004796 <__swsetup_r+0xba>
 80047a6:	bf00      	nop
 80047a8:	2000000c 	.word	0x2000000c
 80047ac:	08004f00 	.word	0x08004f00
 80047b0:	08004f20 	.word	0x08004f20
 80047b4:	08004ee0 	.word	0x08004ee0

080047b8 <__sflush_r>:
 80047b8:	898a      	ldrh	r2, [r1, #12]
 80047ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047be:	4605      	mov	r5, r0
 80047c0:	0710      	lsls	r0, r2, #28
 80047c2:	460c      	mov	r4, r1
 80047c4:	d45a      	bmi.n	800487c <__sflush_r+0xc4>
 80047c6:	684b      	ldr	r3, [r1, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	dc05      	bgt.n	80047d8 <__sflush_r+0x20>
 80047cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	dc02      	bgt.n	80047d8 <__sflush_r+0x20>
 80047d2:	2000      	movs	r0, #0
 80047d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047da:	2e00      	cmp	r6, #0
 80047dc:	d0f9      	beq.n	80047d2 <__sflush_r+0x1a>
 80047de:	2300      	movs	r3, #0
 80047e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047e4:	682f      	ldr	r7, [r5, #0]
 80047e6:	602b      	str	r3, [r5, #0]
 80047e8:	d033      	beq.n	8004852 <__sflush_r+0x9a>
 80047ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047ec:	89a3      	ldrh	r3, [r4, #12]
 80047ee:	075a      	lsls	r2, r3, #29
 80047f0:	d505      	bpl.n	80047fe <__sflush_r+0x46>
 80047f2:	6863      	ldr	r3, [r4, #4]
 80047f4:	1ac0      	subs	r0, r0, r3
 80047f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047f8:	b10b      	cbz	r3, 80047fe <__sflush_r+0x46>
 80047fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047fc:	1ac0      	subs	r0, r0, r3
 80047fe:	2300      	movs	r3, #0
 8004800:	4602      	mov	r2, r0
 8004802:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004804:	6a21      	ldr	r1, [r4, #32]
 8004806:	4628      	mov	r0, r5
 8004808:	47b0      	blx	r6
 800480a:	1c43      	adds	r3, r0, #1
 800480c:	89a3      	ldrh	r3, [r4, #12]
 800480e:	d106      	bne.n	800481e <__sflush_r+0x66>
 8004810:	6829      	ldr	r1, [r5, #0]
 8004812:	291d      	cmp	r1, #29
 8004814:	d84b      	bhi.n	80048ae <__sflush_r+0xf6>
 8004816:	4a2b      	ldr	r2, [pc, #172]	; (80048c4 <__sflush_r+0x10c>)
 8004818:	40ca      	lsrs	r2, r1
 800481a:	07d6      	lsls	r6, r2, #31
 800481c:	d547      	bpl.n	80048ae <__sflush_r+0xf6>
 800481e:	2200      	movs	r2, #0
 8004820:	6062      	str	r2, [r4, #4]
 8004822:	04d9      	lsls	r1, r3, #19
 8004824:	6922      	ldr	r2, [r4, #16]
 8004826:	6022      	str	r2, [r4, #0]
 8004828:	d504      	bpl.n	8004834 <__sflush_r+0x7c>
 800482a:	1c42      	adds	r2, r0, #1
 800482c:	d101      	bne.n	8004832 <__sflush_r+0x7a>
 800482e:	682b      	ldr	r3, [r5, #0]
 8004830:	b903      	cbnz	r3, 8004834 <__sflush_r+0x7c>
 8004832:	6560      	str	r0, [r4, #84]	; 0x54
 8004834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004836:	602f      	str	r7, [r5, #0]
 8004838:	2900      	cmp	r1, #0
 800483a:	d0ca      	beq.n	80047d2 <__sflush_r+0x1a>
 800483c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004840:	4299      	cmp	r1, r3
 8004842:	d002      	beq.n	800484a <__sflush_r+0x92>
 8004844:	4628      	mov	r0, r5
 8004846:	f000 f997 	bl	8004b78 <_free_r>
 800484a:	2000      	movs	r0, #0
 800484c:	6360      	str	r0, [r4, #52]	; 0x34
 800484e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004852:	6a21      	ldr	r1, [r4, #32]
 8004854:	2301      	movs	r3, #1
 8004856:	4628      	mov	r0, r5
 8004858:	47b0      	blx	r6
 800485a:	1c41      	adds	r1, r0, #1
 800485c:	d1c6      	bne.n	80047ec <__sflush_r+0x34>
 800485e:	682b      	ldr	r3, [r5, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0c3      	beq.n	80047ec <__sflush_r+0x34>
 8004864:	2b1d      	cmp	r3, #29
 8004866:	d001      	beq.n	800486c <__sflush_r+0xb4>
 8004868:	2b16      	cmp	r3, #22
 800486a:	d101      	bne.n	8004870 <__sflush_r+0xb8>
 800486c:	602f      	str	r7, [r5, #0]
 800486e:	e7b0      	b.n	80047d2 <__sflush_r+0x1a>
 8004870:	89a3      	ldrh	r3, [r4, #12]
 8004872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004876:	81a3      	strh	r3, [r4, #12]
 8004878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800487c:	690f      	ldr	r7, [r1, #16]
 800487e:	2f00      	cmp	r7, #0
 8004880:	d0a7      	beq.n	80047d2 <__sflush_r+0x1a>
 8004882:	0793      	lsls	r3, r2, #30
 8004884:	680e      	ldr	r6, [r1, #0]
 8004886:	bf08      	it	eq
 8004888:	694b      	ldreq	r3, [r1, #20]
 800488a:	600f      	str	r7, [r1, #0]
 800488c:	bf18      	it	ne
 800488e:	2300      	movne	r3, #0
 8004890:	eba6 0807 	sub.w	r8, r6, r7
 8004894:	608b      	str	r3, [r1, #8]
 8004896:	f1b8 0f00 	cmp.w	r8, #0
 800489a:	dd9a      	ble.n	80047d2 <__sflush_r+0x1a>
 800489c:	4643      	mov	r3, r8
 800489e:	463a      	mov	r2, r7
 80048a0:	6a21      	ldr	r1, [r4, #32]
 80048a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048a4:	4628      	mov	r0, r5
 80048a6:	47b0      	blx	r6
 80048a8:	2800      	cmp	r0, #0
 80048aa:	dc07      	bgt.n	80048bc <__sflush_r+0x104>
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b2:	81a3      	strh	r3, [r4, #12]
 80048b4:	f04f 30ff 	mov.w	r0, #4294967295
 80048b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048bc:	4407      	add	r7, r0
 80048be:	eba8 0800 	sub.w	r8, r8, r0
 80048c2:	e7e8      	b.n	8004896 <__sflush_r+0xde>
 80048c4:	20400001 	.word	0x20400001

080048c8 <_fflush_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	690b      	ldr	r3, [r1, #16]
 80048cc:	4605      	mov	r5, r0
 80048ce:	460c      	mov	r4, r1
 80048d0:	b1db      	cbz	r3, 800490a <_fflush_r+0x42>
 80048d2:	b118      	cbz	r0, 80048dc <_fflush_r+0x14>
 80048d4:	6983      	ldr	r3, [r0, #24]
 80048d6:	b90b      	cbnz	r3, 80048dc <_fflush_r+0x14>
 80048d8:	f000 f860 	bl	800499c <__sinit>
 80048dc:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <_fflush_r+0x48>)
 80048de:	429c      	cmp	r4, r3
 80048e0:	d109      	bne.n	80048f6 <_fflush_r+0x2e>
 80048e2:	686c      	ldr	r4, [r5, #4]
 80048e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048e8:	b17b      	cbz	r3, 800490a <_fflush_r+0x42>
 80048ea:	4621      	mov	r1, r4
 80048ec:	4628      	mov	r0, r5
 80048ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048f2:	f7ff bf61 	b.w	80047b8 <__sflush_r>
 80048f6:	4b07      	ldr	r3, [pc, #28]	; (8004914 <_fflush_r+0x4c>)
 80048f8:	429c      	cmp	r4, r3
 80048fa:	d101      	bne.n	8004900 <_fflush_r+0x38>
 80048fc:	68ac      	ldr	r4, [r5, #8]
 80048fe:	e7f1      	b.n	80048e4 <_fflush_r+0x1c>
 8004900:	4b05      	ldr	r3, [pc, #20]	; (8004918 <_fflush_r+0x50>)
 8004902:	429c      	cmp	r4, r3
 8004904:	bf08      	it	eq
 8004906:	68ec      	ldreq	r4, [r5, #12]
 8004908:	e7ec      	b.n	80048e4 <_fflush_r+0x1c>
 800490a:	2000      	movs	r0, #0
 800490c:	bd38      	pop	{r3, r4, r5, pc}
 800490e:	bf00      	nop
 8004910:	08004f00 	.word	0x08004f00
 8004914:	08004f20 	.word	0x08004f20
 8004918:	08004ee0 	.word	0x08004ee0

0800491c <_cleanup_r>:
 800491c:	4901      	ldr	r1, [pc, #4]	; (8004924 <_cleanup_r+0x8>)
 800491e:	f000 b8a9 	b.w	8004a74 <_fwalk_reent>
 8004922:	bf00      	nop
 8004924:	080048c9 	.word	0x080048c9

08004928 <std.isra.0>:
 8004928:	2300      	movs	r3, #0
 800492a:	b510      	push	{r4, lr}
 800492c:	4604      	mov	r4, r0
 800492e:	6003      	str	r3, [r0, #0]
 8004930:	6043      	str	r3, [r0, #4]
 8004932:	6083      	str	r3, [r0, #8]
 8004934:	8181      	strh	r1, [r0, #12]
 8004936:	6643      	str	r3, [r0, #100]	; 0x64
 8004938:	81c2      	strh	r2, [r0, #14]
 800493a:	6103      	str	r3, [r0, #16]
 800493c:	6143      	str	r3, [r0, #20]
 800493e:	6183      	str	r3, [r0, #24]
 8004940:	4619      	mov	r1, r3
 8004942:	2208      	movs	r2, #8
 8004944:	305c      	adds	r0, #92	; 0x5c
 8004946:	f7ff fe0b 	bl	8004560 <memset>
 800494a:	4b05      	ldr	r3, [pc, #20]	; (8004960 <std.isra.0+0x38>)
 800494c:	6263      	str	r3, [r4, #36]	; 0x24
 800494e:	4b05      	ldr	r3, [pc, #20]	; (8004964 <std.isra.0+0x3c>)
 8004950:	62a3      	str	r3, [r4, #40]	; 0x28
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <std.isra.0+0x40>)
 8004954:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004956:	4b05      	ldr	r3, [pc, #20]	; (800496c <std.isra.0+0x44>)
 8004958:	6224      	str	r4, [r4, #32]
 800495a:	6323      	str	r3, [r4, #48]	; 0x30
 800495c:	bd10      	pop	{r4, pc}
 800495e:	bf00      	nop
 8004960:	08004cf1 	.word	0x08004cf1
 8004964:	08004d13 	.word	0x08004d13
 8004968:	08004d4b 	.word	0x08004d4b
 800496c:	08004d6f 	.word	0x08004d6f

08004970 <__sfmoreglue>:
 8004970:	b570      	push	{r4, r5, r6, lr}
 8004972:	1e4a      	subs	r2, r1, #1
 8004974:	2568      	movs	r5, #104	; 0x68
 8004976:	4355      	muls	r5, r2
 8004978:	460e      	mov	r6, r1
 800497a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800497e:	f000 f949 	bl	8004c14 <_malloc_r>
 8004982:	4604      	mov	r4, r0
 8004984:	b140      	cbz	r0, 8004998 <__sfmoreglue+0x28>
 8004986:	2100      	movs	r1, #0
 8004988:	e880 0042 	stmia.w	r0, {r1, r6}
 800498c:	300c      	adds	r0, #12
 800498e:	60a0      	str	r0, [r4, #8]
 8004990:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004994:	f7ff fde4 	bl	8004560 <memset>
 8004998:	4620      	mov	r0, r4
 800499a:	bd70      	pop	{r4, r5, r6, pc}

0800499c <__sinit>:
 800499c:	6983      	ldr	r3, [r0, #24]
 800499e:	b510      	push	{r4, lr}
 80049a0:	4604      	mov	r4, r0
 80049a2:	bb33      	cbnz	r3, 80049f2 <__sinit+0x56>
 80049a4:	6483      	str	r3, [r0, #72]	; 0x48
 80049a6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80049a8:	6503      	str	r3, [r0, #80]	; 0x50
 80049aa:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <__sinit+0x58>)
 80049ac:	4a12      	ldr	r2, [pc, #72]	; (80049f8 <__sinit+0x5c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6282      	str	r2, [r0, #40]	; 0x28
 80049b2:	4298      	cmp	r0, r3
 80049b4:	bf04      	itt	eq
 80049b6:	2301      	moveq	r3, #1
 80049b8:	6183      	streq	r3, [r0, #24]
 80049ba:	f000 f81f 	bl	80049fc <__sfp>
 80049be:	6060      	str	r0, [r4, #4]
 80049c0:	4620      	mov	r0, r4
 80049c2:	f000 f81b 	bl	80049fc <__sfp>
 80049c6:	60a0      	str	r0, [r4, #8]
 80049c8:	4620      	mov	r0, r4
 80049ca:	f000 f817 	bl	80049fc <__sfp>
 80049ce:	2200      	movs	r2, #0
 80049d0:	60e0      	str	r0, [r4, #12]
 80049d2:	2104      	movs	r1, #4
 80049d4:	6860      	ldr	r0, [r4, #4]
 80049d6:	f7ff ffa7 	bl	8004928 <std.isra.0>
 80049da:	2201      	movs	r2, #1
 80049dc:	2109      	movs	r1, #9
 80049de:	68a0      	ldr	r0, [r4, #8]
 80049e0:	f7ff ffa2 	bl	8004928 <std.isra.0>
 80049e4:	2202      	movs	r2, #2
 80049e6:	2112      	movs	r1, #18
 80049e8:	68e0      	ldr	r0, [r4, #12]
 80049ea:	f7ff ff9d 	bl	8004928 <std.isra.0>
 80049ee:	2301      	movs	r3, #1
 80049f0:	61a3      	str	r3, [r4, #24]
 80049f2:	bd10      	pop	{r4, pc}
 80049f4:	08004edc 	.word	0x08004edc
 80049f8:	0800491d 	.word	0x0800491d

080049fc <__sfp>:
 80049fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fe:	4b1c      	ldr	r3, [pc, #112]	; (8004a70 <__sfp+0x74>)
 8004a00:	681e      	ldr	r6, [r3, #0]
 8004a02:	69b3      	ldr	r3, [r6, #24]
 8004a04:	4607      	mov	r7, r0
 8004a06:	b913      	cbnz	r3, 8004a0e <__sfp+0x12>
 8004a08:	4630      	mov	r0, r6
 8004a0a:	f7ff ffc7 	bl	800499c <__sinit>
 8004a0e:	3648      	adds	r6, #72	; 0x48
 8004a10:	68b4      	ldr	r4, [r6, #8]
 8004a12:	6873      	ldr	r3, [r6, #4]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	d503      	bpl.n	8004a20 <__sfp+0x24>
 8004a18:	6833      	ldr	r3, [r6, #0]
 8004a1a:	b133      	cbz	r3, 8004a2a <__sfp+0x2e>
 8004a1c:	6836      	ldr	r6, [r6, #0]
 8004a1e:	e7f7      	b.n	8004a10 <__sfp+0x14>
 8004a20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a24:	b16d      	cbz	r5, 8004a42 <__sfp+0x46>
 8004a26:	3468      	adds	r4, #104	; 0x68
 8004a28:	e7f4      	b.n	8004a14 <__sfp+0x18>
 8004a2a:	2104      	movs	r1, #4
 8004a2c:	4638      	mov	r0, r7
 8004a2e:	f7ff ff9f 	bl	8004970 <__sfmoreglue>
 8004a32:	6030      	str	r0, [r6, #0]
 8004a34:	2800      	cmp	r0, #0
 8004a36:	d1f1      	bne.n	8004a1c <__sfp+0x20>
 8004a38:	230c      	movs	r3, #12
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	4604      	mov	r4, r0
 8004a3e:	4620      	mov	r0, r4
 8004a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a46:	81e3      	strh	r3, [r4, #14]
 8004a48:	2301      	movs	r3, #1
 8004a4a:	81a3      	strh	r3, [r4, #12]
 8004a4c:	6665      	str	r5, [r4, #100]	; 0x64
 8004a4e:	6025      	str	r5, [r4, #0]
 8004a50:	60a5      	str	r5, [r4, #8]
 8004a52:	6065      	str	r5, [r4, #4]
 8004a54:	6125      	str	r5, [r4, #16]
 8004a56:	6165      	str	r5, [r4, #20]
 8004a58:	61a5      	str	r5, [r4, #24]
 8004a5a:	2208      	movs	r2, #8
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a62:	f7ff fd7d 	bl	8004560 <memset>
 8004a66:	6365      	str	r5, [r4, #52]	; 0x34
 8004a68:	63a5      	str	r5, [r4, #56]	; 0x38
 8004a6a:	64a5      	str	r5, [r4, #72]	; 0x48
 8004a6c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004a6e:	e7e6      	b.n	8004a3e <__sfp+0x42>
 8004a70:	08004edc 	.word	0x08004edc

08004a74 <_fwalk_reent>:
 8004a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a78:	4680      	mov	r8, r0
 8004a7a:	4689      	mov	r9, r1
 8004a7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a80:	2600      	movs	r6, #0
 8004a82:	b914      	cbnz	r4, 8004a8a <_fwalk_reent+0x16>
 8004a84:	4630      	mov	r0, r6
 8004a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a8a:	68a5      	ldr	r5, [r4, #8]
 8004a8c:	6867      	ldr	r7, [r4, #4]
 8004a8e:	3f01      	subs	r7, #1
 8004a90:	d501      	bpl.n	8004a96 <_fwalk_reent+0x22>
 8004a92:	6824      	ldr	r4, [r4, #0]
 8004a94:	e7f5      	b.n	8004a82 <_fwalk_reent+0xe>
 8004a96:	89ab      	ldrh	r3, [r5, #12]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d907      	bls.n	8004aac <_fwalk_reent+0x38>
 8004a9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	d003      	beq.n	8004aac <_fwalk_reent+0x38>
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	47c8      	blx	r9
 8004aaa:	4306      	orrs	r6, r0
 8004aac:	3568      	adds	r5, #104	; 0x68
 8004aae:	e7ee      	b.n	8004a8e <_fwalk_reent+0x1a>

08004ab0 <__swhatbuf_r>:
 8004ab0:	b570      	push	{r4, r5, r6, lr}
 8004ab2:	460e      	mov	r6, r1
 8004ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab8:	2900      	cmp	r1, #0
 8004aba:	b090      	sub	sp, #64	; 0x40
 8004abc:	4614      	mov	r4, r2
 8004abe:	461d      	mov	r5, r3
 8004ac0:	da07      	bge.n	8004ad2 <__swhatbuf_r+0x22>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	602b      	str	r3, [r5, #0]
 8004ac6:	89b3      	ldrh	r3, [r6, #12]
 8004ac8:	061a      	lsls	r2, r3, #24
 8004aca:	d410      	bmi.n	8004aee <__swhatbuf_r+0x3e>
 8004acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ad0:	e00e      	b.n	8004af0 <__swhatbuf_r+0x40>
 8004ad2:	aa01      	add	r2, sp, #4
 8004ad4:	f000 f972 	bl	8004dbc <_fstat_r>
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	dbf2      	blt.n	8004ac2 <__swhatbuf_r+0x12>
 8004adc:	9a02      	ldr	r2, [sp, #8]
 8004ade:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ae2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ae6:	425a      	negs	r2, r3
 8004ae8:	415a      	adcs	r2, r3
 8004aea:	602a      	str	r2, [r5, #0]
 8004aec:	e7ee      	b.n	8004acc <__swhatbuf_r+0x1c>
 8004aee:	2340      	movs	r3, #64	; 0x40
 8004af0:	2000      	movs	r0, #0
 8004af2:	6023      	str	r3, [r4, #0]
 8004af4:	b010      	add	sp, #64	; 0x40
 8004af6:	bd70      	pop	{r4, r5, r6, pc}

08004af8 <__smakebuf_r>:
 8004af8:	898b      	ldrh	r3, [r1, #12]
 8004afa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004afc:	079d      	lsls	r5, r3, #30
 8004afe:	4606      	mov	r6, r0
 8004b00:	460c      	mov	r4, r1
 8004b02:	d507      	bpl.n	8004b14 <__smakebuf_r+0x1c>
 8004b04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	6123      	str	r3, [r4, #16]
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	6163      	str	r3, [r4, #20]
 8004b10:	b002      	add	sp, #8
 8004b12:	bd70      	pop	{r4, r5, r6, pc}
 8004b14:	ab01      	add	r3, sp, #4
 8004b16:	466a      	mov	r2, sp
 8004b18:	f7ff ffca 	bl	8004ab0 <__swhatbuf_r>
 8004b1c:	9900      	ldr	r1, [sp, #0]
 8004b1e:	4605      	mov	r5, r0
 8004b20:	4630      	mov	r0, r6
 8004b22:	f000 f877 	bl	8004c14 <_malloc_r>
 8004b26:	b948      	cbnz	r0, 8004b3c <__smakebuf_r+0x44>
 8004b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b2c:	059a      	lsls	r2, r3, #22
 8004b2e:	d4ef      	bmi.n	8004b10 <__smakebuf_r+0x18>
 8004b30:	f023 0303 	bic.w	r3, r3, #3
 8004b34:	f043 0302 	orr.w	r3, r3, #2
 8004b38:	81a3      	strh	r3, [r4, #12]
 8004b3a:	e7e3      	b.n	8004b04 <__smakebuf_r+0xc>
 8004b3c:	4b0d      	ldr	r3, [pc, #52]	; (8004b74 <__smakebuf_r+0x7c>)
 8004b3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b40:	89a3      	ldrh	r3, [r4, #12]
 8004b42:	6020      	str	r0, [r4, #0]
 8004b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b48:	81a3      	strh	r3, [r4, #12]
 8004b4a:	9b00      	ldr	r3, [sp, #0]
 8004b4c:	6163      	str	r3, [r4, #20]
 8004b4e:	9b01      	ldr	r3, [sp, #4]
 8004b50:	6120      	str	r0, [r4, #16]
 8004b52:	b15b      	cbz	r3, 8004b6c <__smakebuf_r+0x74>
 8004b54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b58:	4630      	mov	r0, r6
 8004b5a:	f000 f941 	bl	8004de0 <_isatty_r>
 8004b5e:	b128      	cbz	r0, 8004b6c <__smakebuf_r+0x74>
 8004b60:	89a3      	ldrh	r3, [r4, #12]
 8004b62:	f023 0303 	bic.w	r3, r3, #3
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	81a3      	strh	r3, [r4, #12]
 8004b6c:	89a3      	ldrh	r3, [r4, #12]
 8004b6e:	431d      	orrs	r5, r3
 8004b70:	81a5      	strh	r5, [r4, #12]
 8004b72:	e7cd      	b.n	8004b10 <__smakebuf_r+0x18>
 8004b74:	0800491d 	.word	0x0800491d

08004b78 <_free_r>:
 8004b78:	b538      	push	{r3, r4, r5, lr}
 8004b7a:	4605      	mov	r5, r0
 8004b7c:	2900      	cmp	r1, #0
 8004b7e:	d045      	beq.n	8004c0c <_free_r+0x94>
 8004b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b84:	1f0c      	subs	r4, r1, #4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	bfb8      	it	lt
 8004b8a:	18e4      	addlt	r4, r4, r3
 8004b8c:	f000 f94a 	bl	8004e24 <__malloc_lock>
 8004b90:	4a1f      	ldr	r2, [pc, #124]	; (8004c10 <_free_r+0x98>)
 8004b92:	6813      	ldr	r3, [r2, #0]
 8004b94:	4610      	mov	r0, r2
 8004b96:	b933      	cbnz	r3, 8004ba6 <_free_r+0x2e>
 8004b98:	6063      	str	r3, [r4, #4]
 8004b9a:	6014      	str	r4, [r2, #0]
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ba2:	f000 b940 	b.w	8004e26 <__malloc_unlock>
 8004ba6:	42a3      	cmp	r3, r4
 8004ba8:	d90c      	bls.n	8004bc4 <_free_r+0x4c>
 8004baa:	6821      	ldr	r1, [r4, #0]
 8004bac:	1862      	adds	r2, r4, r1
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	bf04      	itt	eq
 8004bb2:	681a      	ldreq	r2, [r3, #0]
 8004bb4:	685b      	ldreq	r3, [r3, #4]
 8004bb6:	6063      	str	r3, [r4, #4]
 8004bb8:	bf04      	itt	eq
 8004bba:	1852      	addeq	r2, r2, r1
 8004bbc:	6022      	streq	r2, [r4, #0]
 8004bbe:	6004      	str	r4, [r0, #0]
 8004bc0:	e7ec      	b.n	8004b9c <_free_r+0x24>
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	b10a      	cbz	r2, 8004bcc <_free_r+0x54>
 8004bc8:	42a2      	cmp	r2, r4
 8004bca:	d9fa      	bls.n	8004bc2 <_free_r+0x4a>
 8004bcc:	6819      	ldr	r1, [r3, #0]
 8004bce:	1858      	adds	r0, r3, r1
 8004bd0:	42a0      	cmp	r0, r4
 8004bd2:	d10b      	bne.n	8004bec <_free_r+0x74>
 8004bd4:	6820      	ldr	r0, [r4, #0]
 8004bd6:	4401      	add	r1, r0
 8004bd8:	1858      	adds	r0, r3, r1
 8004bda:	4282      	cmp	r2, r0
 8004bdc:	6019      	str	r1, [r3, #0]
 8004bde:	d1dd      	bne.n	8004b9c <_free_r+0x24>
 8004be0:	6810      	ldr	r0, [r2, #0]
 8004be2:	6852      	ldr	r2, [r2, #4]
 8004be4:	605a      	str	r2, [r3, #4]
 8004be6:	4401      	add	r1, r0
 8004be8:	6019      	str	r1, [r3, #0]
 8004bea:	e7d7      	b.n	8004b9c <_free_r+0x24>
 8004bec:	d902      	bls.n	8004bf4 <_free_r+0x7c>
 8004bee:	230c      	movs	r3, #12
 8004bf0:	602b      	str	r3, [r5, #0]
 8004bf2:	e7d3      	b.n	8004b9c <_free_r+0x24>
 8004bf4:	6820      	ldr	r0, [r4, #0]
 8004bf6:	1821      	adds	r1, r4, r0
 8004bf8:	428a      	cmp	r2, r1
 8004bfa:	bf04      	itt	eq
 8004bfc:	6811      	ldreq	r1, [r2, #0]
 8004bfe:	6852      	ldreq	r2, [r2, #4]
 8004c00:	6062      	str	r2, [r4, #4]
 8004c02:	bf04      	itt	eq
 8004c04:	1809      	addeq	r1, r1, r0
 8004c06:	6021      	streq	r1, [r4, #0]
 8004c08:	605c      	str	r4, [r3, #4]
 8004c0a:	e7c7      	b.n	8004b9c <_free_r+0x24>
 8004c0c:	bd38      	pop	{r3, r4, r5, pc}
 8004c0e:	bf00      	nop
 8004c10:	20000490 	.word	0x20000490

08004c14 <_malloc_r>:
 8004c14:	b570      	push	{r4, r5, r6, lr}
 8004c16:	1ccd      	adds	r5, r1, #3
 8004c18:	f025 0503 	bic.w	r5, r5, #3
 8004c1c:	3508      	adds	r5, #8
 8004c1e:	2d0c      	cmp	r5, #12
 8004c20:	bf38      	it	cc
 8004c22:	250c      	movcc	r5, #12
 8004c24:	2d00      	cmp	r5, #0
 8004c26:	4606      	mov	r6, r0
 8004c28:	db01      	blt.n	8004c2e <_malloc_r+0x1a>
 8004c2a:	42a9      	cmp	r1, r5
 8004c2c:	d903      	bls.n	8004c36 <_malloc_r+0x22>
 8004c2e:	230c      	movs	r3, #12
 8004c30:	6033      	str	r3, [r6, #0]
 8004c32:	2000      	movs	r0, #0
 8004c34:	bd70      	pop	{r4, r5, r6, pc}
 8004c36:	f000 f8f5 	bl	8004e24 <__malloc_lock>
 8004c3a:	4a23      	ldr	r2, [pc, #140]	; (8004cc8 <_malloc_r+0xb4>)
 8004c3c:	6814      	ldr	r4, [r2, #0]
 8004c3e:	4621      	mov	r1, r4
 8004c40:	b991      	cbnz	r1, 8004c68 <_malloc_r+0x54>
 8004c42:	4c22      	ldr	r4, [pc, #136]	; (8004ccc <_malloc_r+0xb8>)
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	b91b      	cbnz	r3, 8004c50 <_malloc_r+0x3c>
 8004c48:	4630      	mov	r0, r6
 8004c4a:	f000 f841 	bl	8004cd0 <_sbrk_r>
 8004c4e:	6020      	str	r0, [r4, #0]
 8004c50:	4629      	mov	r1, r5
 8004c52:	4630      	mov	r0, r6
 8004c54:	f000 f83c 	bl	8004cd0 <_sbrk_r>
 8004c58:	1c43      	adds	r3, r0, #1
 8004c5a:	d126      	bne.n	8004caa <_malloc_r+0x96>
 8004c5c:	230c      	movs	r3, #12
 8004c5e:	6033      	str	r3, [r6, #0]
 8004c60:	4630      	mov	r0, r6
 8004c62:	f000 f8e0 	bl	8004e26 <__malloc_unlock>
 8004c66:	e7e4      	b.n	8004c32 <_malloc_r+0x1e>
 8004c68:	680b      	ldr	r3, [r1, #0]
 8004c6a:	1b5b      	subs	r3, r3, r5
 8004c6c:	d41a      	bmi.n	8004ca4 <_malloc_r+0x90>
 8004c6e:	2b0b      	cmp	r3, #11
 8004c70:	d90f      	bls.n	8004c92 <_malloc_r+0x7e>
 8004c72:	600b      	str	r3, [r1, #0]
 8004c74:	50cd      	str	r5, [r1, r3]
 8004c76:	18cc      	adds	r4, r1, r3
 8004c78:	4630      	mov	r0, r6
 8004c7a:	f000 f8d4 	bl	8004e26 <__malloc_unlock>
 8004c7e:	f104 000b 	add.w	r0, r4, #11
 8004c82:	1d23      	adds	r3, r4, #4
 8004c84:	f020 0007 	bic.w	r0, r0, #7
 8004c88:	1ac3      	subs	r3, r0, r3
 8004c8a:	d01b      	beq.n	8004cc4 <_malloc_r+0xb0>
 8004c8c:	425a      	negs	r2, r3
 8004c8e:	50e2      	str	r2, [r4, r3]
 8004c90:	bd70      	pop	{r4, r5, r6, pc}
 8004c92:	428c      	cmp	r4, r1
 8004c94:	bf0d      	iteet	eq
 8004c96:	6863      	ldreq	r3, [r4, #4]
 8004c98:	684b      	ldrne	r3, [r1, #4]
 8004c9a:	6063      	strne	r3, [r4, #4]
 8004c9c:	6013      	streq	r3, [r2, #0]
 8004c9e:	bf18      	it	ne
 8004ca0:	460c      	movne	r4, r1
 8004ca2:	e7e9      	b.n	8004c78 <_malloc_r+0x64>
 8004ca4:	460c      	mov	r4, r1
 8004ca6:	6849      	ldr	r1, [r1, #4]
 8004ca8:	e7ca      	b.n	8004c40 <_malloc_r+0x2c>
 8004caa:	1cc4      	adds	r4, r0, #3
 8004cac:	f024 0403 	bic.w	r4, r4, #3
 8004cb0:	42a0      	cmp	r0, r4
 8004cb2:	d005      	beq.n	8004cc0 <_malloc_r+0xac>
 8004cb4:	1a21      	subs	r1, r4, r0
 8004cb6:	4630      	mov	r0, r6
 8004cb8:	f000 f80a 	bl	8004cd0 <_sbrk_r>
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d0cd      	beq.n	8004c5c <_malloc_r+0x48>
 8004cc0:	6025      	str	r5, [r4, #0]
 8004cc2:	e7d9      	b.n	8004c78 <_malloc_r+0x64>
 8004cc4:	bd70      	pop	{r4, r5, r6, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20000490 	.word	0x20000490
 8004ccc:	20000494 	.word	0x20000494

08004cd0 <_sbrk_r>:
 8004cd0:	b538      	push	{r3, r4, r5, lr}
 8004cd2:	4c06      	ldr	r4, [pc, #24]	; (8004cec <_sbrk_r+0x1c>)
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	4605      	mov	r5, r0
 8004cd8:	4608      	mov	r0, r1
 8004cda:	6023      	str	r3, [r4, #0]
 8004cdc:	f7ff f8a6 	bl	8003e2c <_sbrk>
 8004ce0:	1c43      	adds	r3, r0, #1
 8004ce2:	d102      	bne.n	8004cea <_sbrk_r+0x1a>
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	b103      	cbz	r3, 8004cea <_sbrk_r+0x1a>
 8004ce8:	602b      	str	r3, [r5, #0]
 8004cea:	bd38      	pop	{r3, r4, r5, pc}
 8004cec:	20000664 	.word	0x20000664

08004cf0 <__sread>:
 8004cf0:	b510      	push	{r4, lr}
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf8:	f000 f896 	bl	8004e28 <_read_r>
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	bfab      	itete	ge
 8004d00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d02:	89a3      	ldrhlt	r3, [r4, #12]
 8004d04:	181b      	addge	r3, r3, r0
 8004d06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d0a:	bfac      	ite	ge
 8004d0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d0e:	81a3      	strhlt	r3, [r4, #12]
 8004d10:	bd10      	pop	{r4, pc}

08004d12 <__swrite>:
 8004d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d16:	461f      	mov	r7, r3
 8004d18:	898b      	ldrh	r3, [r1, #12]
 8004d1a:	05db      	lsls	r3, r3, #23
 8004d1c:	4605      	mov	r5, r0
 8004d1e:	460c      	mov	r4, r1
 8004d20:	4616      	mov	r6, r2
 8004d22:	d505      	bpl.n	8004d30 <__swrite+0x1e>
 8004d24:	2302      	movs	r3, #2
 8004d26:	2200      	movs	r2, #0
 8004d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d2c:	f000 f868 	bl	8004e00 <_lseek_r>
 8004d30:	89a3      	ldrh	r3, [r4, #12]
 8004d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d3a:	81a3      	strh	r3, [r4, #12]
 8004d3c:	4632      	mov	r2, r6
 8004d3e:	463b      	mov	r3, r7
 8004d40:	4628      	mov	r0, r5
 8004d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d46:	f000 b817 	b.w	8004d78 <_write_r>

08004d4a <__sseek>:
 8004d4a:	b510      	push	{r4, lr}
 8004d4c:	460c      	mov	r4, r1
 8004d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d52:	f000 f855 	bl	8004e00 <_lseek_r>
 8004d56:	1c43      	adds	r3, r0, #1
 8004d58:	89a3      	ldrh	r3, [r4, #12]
 8004d5a:	bf15      	itete	ne
 8004d5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d66:	81a3      	strheq	r3, [r4, #12]
 8004d68:	bf18      	it	ne
 8004d6a:	81a3      	strhne	r3, [r4, #12]
 8004d6c:	bd10      	pop	{r4, pc}

08004d6e <__sclose>:
 8004d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d72:	f000 b813 	b.w	8004d9c <_close_r>
	...

08004d78 <_write_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	4c07      	ldr	r4, [pc, #28]	; (8004d98 <_write_r+0x20>)
 8004d7c:	4605      	mov	r5, r0
 8004d7e:	4608      	mov	r0, r1
 8004d80:	4611      	mov	r1, r2
 8004d82:	2200      	movs	r2, #0
 8004d84:	6022      	str	r2, [r4, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	f7ff f834 	bl	8003df4 <_write>
 8004d8c:	1c43      	adds	r3, r0, #1
 8004d8e:	d102      	bne.n	8004d96 <_write_r+0x1e>
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	b103      	cbz	r3, 8004d96 <_write_r+0x1e>
 8004d94:	602b      	str	r3, [r5, #0]
 8004d96:	bd38      	pop	{r3, r4, r5, pc}
 8004d98:	20000664 	.word	0x20000664

08004d9c <_close_r>:
 8004d9c:	b538      	push	{r3, r4, r5, lr}
 8004d9e:	4c06      	ldr	r4, [pc, #24]	; (8004db8 <_close_r+0x1c>)
 8004da0:	2300      	movs	r3, #0
 8004da2:	4605      	mov	r5, r0
 8004da4:	4608      	mov	r0, r1
 8004da6:	6023      	str	r3, [r4, #0]
 8004da8:	f7ff f86c 	bl	8003e84 <_close>
 8004dac:	1c43      	adds	r3, r0, #1
 8004dae:	d102      	bne.n	8004db6 <_close_r+0x1a>
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	b103      	cbz	r3, 8004db6 <_close_r+0x1a>
 8004db4:	602b      	str	r3, [r5, #0]
 8004db6:	bd38      	pop	{r3, r4, r5, pc}
 8004db8:	20000664 	.word	0x20000664

08004dbc <_fstat_r>:
 8004dbc:	b538      	push	{r3, r4, r5, lr}
 8004dbe:	4c07      	ldr	r4, [pc, #28]	; (8004ddc <_fstat_r+0x20>)
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	4605      	mov	r5, r0
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	f7ff f867 	bl	8003e9c <_fstat>
 8004dce:	1c43      	adds	r3, r0, #1
 8004dd0:	d102      	bne.n	8004dd8 <_fstat_r+0x1c>
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	b103      	cbz	r3, 8004dd8 <_fstat_r+0x1c>
 8004dd6:	602b      	str	r3, [r5, #0]
 8004dd8:	bd38      	pop	{r3, r4, r5, pc}
 8004dda:	bf00      	nop
 8004ddc:	20000664 	.word	0x20000664

08004de0 <_isatty_r>:
 8004de0:	b538      	push	{r3, r4, r5, lr}
 8004de2:	4c06      	ldr	r4, [pc, #24]	; (8004dfc <_isatty_r+0x1c>)
 8004de4:	2300      	movs	r3, #0
 8004de6:	4605      	mov	r5, r0
 8004de8:	4608      	mov	r0, r1
 8004dea:	6023      	str	r3, [r4, #0]
 8004dec:	f7ff f866 	bl	8003ebc <_isatty>
 8004df0:	1c43      	adds	r3, r0, #1
 8004df2:	d102      	bne.n	8004dfa <_isatty_r+0x1a>
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	b103      	cbz	r3, 8004dfa <_isatty_r+0x1a>
 8004df8:	602b      	str	r3, [r5, #0]
 8004dfa:	bd38      	pop	{r3, r4, r5, pc}
 8004dfc:	20000664 	.word	0x20000664

08004e00 <_lseek_r>:
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4c07      	ldr	r4, [pc, #28]	; (8004e20 <_lseek_r+0x20>)
 8004e04:	4605      	mov	r5, r0
 8004e06:	4608      	mov	r0, r1
 8004e08:	4611      	mov	r1, r2
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	6022      	str	r2, [r4, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f7ff f85f 	bl	8003ed2 <_lseek>
 8004e14:	1c43      	adds	r3, r0, #1
 8004e16:	d102      	bne.n	8004e1e <_lseek_r+0x1e>
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	b103      	cbz	r3, 8004e1e <_lseek_r+0x1e>
 8004e1c:	602b      	str	r3, [r5, #0]
 8004e1e:	bd38      	pop	{r3, r4, r5, pc}
 8004e20:	20000664 	.word	0x20000664

08004e24 <__malloc_lock>:
 8004e24:	4770      	bx	lr

08004e26 <__malloc_unlock>:
 8004e26:	4770      	bx	lr

08004e28 <_read_r>:
 8004e28:	b538      	push	{r3, r4, r5, lr}
 8004e2a:	4c07      	ldr	r4, [pc, #28]	; (8004e48 <_read_r+0x20>)
 8004e2c:	4605      	mov	r5, r0
 8004e2e:	4608      	mov	r0, r1
 8004e30:	4611      	mov	r1, r2
 8004e32:	2200      	movs	r2, #0
 8004e34:	6022      	str	r2, [r4, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	f7fe ffbf 	bl	8003dba <_read>
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d102      	bne.n	8004e46 <_read_r+0x1e>
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	b103      	cbz	r3, 8004e46 <_read_r+0x1e>
 8004e44:	602b      	str	r3, [r5, #0]
 8004e46:	bd38      	pop	{r3, r4, r5, pc}
 8004e48:	20000664 	.word	0x20000664

08004e4c <_init>:
 8004e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4e:	bf00      	nop
 8004e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e52:	bc08      	pop	{r3}
 8004e54:	469e      	mov	lr, r3
 8004e56:	4770      	bx	lr

08004e58 <_fini>:
 8004e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5a:	bf00      	nop
 8004e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e5e:	bc08      	pop	{r3}
 8004e60:	469e      	mov	lr, r3
 8004e62:	4770      	bx	lr
