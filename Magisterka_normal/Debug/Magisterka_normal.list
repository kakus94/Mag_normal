
Magisterka_normal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b68  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bac  08006d18  08006d18  00016d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080078c4  080078c4  000178c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080078cc  080078cc  000178cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080078d0  080078d0  000178d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  080078d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          00000764  20000070  20000070  00020070  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  200007d4  200007d4  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001353f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002e16  00000000  00000000  000335df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001150  00000000  00000000  000363f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000fc0  00000000  00000000  00037548  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00026135  00000000  00000000  00038508  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000d1f7  00000000  00000000  0005e63d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000dbb72  00000000  00000000  0006b834  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  001473a6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004e54  00000000  00000000  00147424  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006d00 	.word	0x08006d00

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08006d00 	.word	0x08006d00

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__aeabi_d2uiz>:
 8000a24:	004a      	lsls	r2, r1, #1
 8000a26:	d211      	bcs.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d211      	bcs.n	8000a52 <__aeabi_d2uiz+0x2e>
 8000a2e:	d50d      	bpl.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d40e      	bmi.n	8000a58 <__aeabi_d2uiz+0x34>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d102      	bne.n	8000a5e <__aeabi_d2uiz+0x3a>
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	4770      	bx	lr
 8000a5e:	f04f 0000 	mov.w	r0, #0
 8000a62:	4770      	bx	lr

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295
 8000a78:	f000 b97a 	b.w	8000d70 <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a98:	468c      	mov	ip, r1
 8000a9a:	460d      	mov	r5, r1
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	9e08      	ldr	r6, [sp, #32]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d151      	bne.n	8000b48 <__udivmoddi4+0xb4>
 8000aa4:	428a      	cmp	r2, r1
 8000aa6:	4617      	mov	r7, r2
 8000aa8:	d96d      	bls.n	8000b86 <__udivmoddi4+0xf2>
 8000aaa:	fab2 fe82 	clz	lr, r2
 8000aae:	f1be 0f00 	cmp.w	lr, #0
 8000ab2:	d00b      	beq.n	8000acc <__udivmoddi4+0x38>
 8000ab4:	f1ce 0c20 	rsb	ip, lr, #32
 8000ab8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000abc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000ac0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ac4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ac8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000acc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000ad0:	0c25      	lsrs	r5, r4, #16
 8000ad2:	fbbc f8fa 	udiv	r8, ip, sl
 8000ad6:	fa1f f987 	uxth.w	r9, r7
 8000ada:	fb0a cc18 	mls	ip, sl, r8, ip
 8000ade:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000ae2:	fb08 f309 	mul.w	r3, r8, r9
 8000ae6:	42ab      	cmp	r3, r5
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x6c>
 8000aea:	19ed      	adds	r5, r5, r7
 8000aec:	f108 32ff 	add.w	r2, r8, #4294967295
 8000af0:	f080 8123 	bcs.w	8000d3a <__udivmoddi4+0x2a6>
 8000af4:	42ab      	cmp	r3, r5
 8000af6:	f240 8120 	bls.w	8000d3a <__udivmoddi4+0x2a6>
 8000afa:	f1a8 0802 	sub.w	r8, r8, #2
 8000afe:	443d      	add	r5, r7
 8000b00:	1aed      	subs	r5, r5, r3
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b08:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b10:	fb00 f909 	mul.w	r9, r0, r9
 8000b14:	45a1      	cmp	r9, r4
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x98>
 8000b18:	19e4      	adds	r4, r4, r7
 8000b1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1e:	f080 810a 	bcs.w	8000d36 <__udivmoddi4+0x2a2>
 8000b22:	45a1      	cmp	r9, r4
 8000b24:	f240 8107 	bls.w	8000d36 <__udivmoddi4+0x2a2>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	443c      	add	r4, r7
 8000b2c:	eba4 0409 	sub.w	r4, r4, r9
 8000b30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b34:	2100      	movs	r1, #0
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d061      	beq.n	8000bfe <__udivmoddi4+0x16a>
 8000b3a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b3e:	2300      	movs	r3, #0
 8000b40:	6034      	str	r4, [r6, #0]
 8000b42:	6073      	str	r3, [r6, #4]
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	428b      	cmp	r3, r1
 8000b4a:	d907      	bls.n	8000b5c <__udivmoddi4+0xc8>
 8000b4c:	2e00      	cmp	r6, #0
 8000b4e:	d054      	beq.n	8000bfa <__udivmoddi4+0x166>
 8000b50:	2100      	movs	r1, #0
 8000b52:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b56:	4608      	mov	r0, r1
 8000b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5c:	fab3 f183 	clz	r1, r3
 8000b60:	2900      	cmp	r1, #0
 8000b62:	f040 808e 	bne.w	8000c82 <__udivmoddi4+0x1ee>
 8000b66:	42ab      	cmp	r3, r5
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xdc>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80fa 	bhi.w	8000d64 <__udivmoddi4+0x2d0>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb65 0503 	sbc.w	r5, r5, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	46ac      	mov	ip, r5
 8000b7a:	2e00      	cmp	r6, #0
 8000b7c:	d03f      	beq.n	8000bfe <__udivmoddi4+0x16a>
 8000b7e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	b912      	cbnz	r2, 8000b8e <__udivmoddi4+0xfa>
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b8e:	fab7 fe87 	clz	lr, r7
 8000b92:	f1be 0f00 	cmp.w	lr, #0
 8000b96:	d134      	bne.n	8000c02 <__udivmoddi4+0x16e>
 8000b98:	1beb      	subs	r3, r5, r7
 8000b9a:	0c3a      	lsrs	r2, r7, #16
 8000b9c:	fa1f fc87 	uxth.w	ip, r7
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ba6:	0c25      	lsrs	r5, r4, #16
 8000ba8:	fb02 3318 	mls	r3, r2, r8, r3
 8000bac:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bb0:	fb0c f308 	mul.w	r3, ip, r8
 8000bb4:	42ab      	cmp	r3, r5
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x134>
 8000bb8:	19ed      	adds	r5, r5, r7
 8000bba:	f108 30ff 	add.w	r0, r8, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x132>
 8000bc0:	42ab      	cmp	r3, r5
 8000bc2:	f200 80d1 	bhi.w	8000d68 <__udivmoddi4+0x2d4>
 8000bc6:	4680      	mov	r8, r0
 8000bc8:	1aed      	subs	r5, r5, r3
 8000bca:	b2a3      	uxth	r3, r4
 8000bcc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000bd0:	fb02 5510 	mls	r5, r2, r0, r5
 8000bd4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000bd8:	fb0c fc00 	mul.w	ip, ip, r0
 8000bdc:	45a4      	cmp	ip, r4
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x15c>
 8000be0:	19e4      	adds	r4, r4, r7
 8000be2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x15a>
 8000be8:	45a4      	cmp	ip, r4
 8000bea:	f200 80b8 	bhi.w	8000d5e <__udivmoddi4+0x2ca>
 8000bee:	4618      	mov	r0, r3
 8000bf0:	eba4 040c 	sub.w	r4, r4, ip
 8000bf4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bf8:	e79d      	b.n	8000b36 <__udivmoddi4+0xa2>
 8000bfa:	4631      	mov	r1, r6
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	f1ce 0420 	rsb	r4, lr, #32
 8000c06:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c0a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c0e:	fa20 f804 	lsr.w	r8, r0, r4
 8000c12:	0c3a      	lsrs	r2, r7, #16
 8000c14:	fa25 f404 	lsr.w	r4, r5, r4
 8000c18:	ea48 0803 	orr.w	r8, r8, r3
 8000c1c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c20:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c24:	fb02 4411 	mls	r4, r2, r1, r4
 8000c28:	fa1f fc87 	uxth.w	ip, r7
 8000c2c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c30:	fb01 f30c 	mul.w	r3, r1, ip
 8000c34:	42ab      	cmp	r3, r5
 8000c36:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c3a:	d909      	bls.n	8000c50 <__udivmoddi4+0x1bc>
 8000c3c:	19ed      	adds	r5, r5, r7
 8000c3e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c42:	f080 808a 	bcs.w	8000d5a <__udivmoddi4+0x2c6>
 8000c46:	42ab      	cmp	r3, r5
 8000c48:	f240 8087 	bls.w	8000d5a <__udivmoddi4+0x2c6>
 8000c4c:	3902      	subs	r1, #2
 8000c4e:	443d      	add	r5, r7
 8000c50:	1aeb      	subs	r3, r5, r3
 8000c52:	fa1f f588 	uxth.w	r5, r8
 8000c56:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c5a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c5e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c62:	fb00 f30c 	mul.w	r3, r0, ip
 8000c66:	42ab      	cmp	r3, r5
 8000c68:	d907      	bls.n	8000c7a <__udivmoddi4+0x1e6>
 8000c6a:	19ed      	adds	r5, r5, r7
 8000c6c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c70:	d26f      	bcs.n	8000d52 <__udivmoddi4+0x2be>
 8000c72:	42ab      	cmp	r3, r5
 8000c74:	d96d      	bls.n	8000d52 <__udivmoddi4+0x2be>
 8000c76:	3802      	subs	r0, #2
 8000c78:	443d      	add	r5, r7
 8000c7a:	1aeb      	subs	r3, r5, r3
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	e78f      	b.n	8000ba2 <__udivmoddi4+0x10e>
 8000c82:	f1c1 0720 	rsb	r7, r1, #32
 8000c86:	fa22 f807 	lsr.w	r8, r2, r7
 8000c8a:	408b      	lsls	r3, r1
 8000c8c:	fa05 f401 	lsl.w	r4, r5, r1
 8000c90:	ea48 0303 	orr.w	r3, r8, r3
 8000c94:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c98:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ca2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ca6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000caa:	fb0c 5519 	mls	r5, ip, r9, r5
 8000cae:	fa1f f883 	uxth.w	r8, r3
 8000cb2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000cb6:	fb09 f408 	mul.w	r4, r9, r8
 8000cba:	42ac      	cmp	r4, r5
 8000cbc:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x244>
 8000cc6:	18ed      	adds	r5, r5, r3
 8000cc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ccc:	d243      	bcs.n	8000d56 <__udivmoddi4+0x2c2>
 8000cce:	42ac      	cmp	r4, r5
 8000cd0:	d941      	bls.n	8000d56 <__udivmoddi4+0x2c2>
 8000cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cd6:	441d      	add	r5, r3
 8000cd8:	1b2d      	subs	r5, r5, r4
 8000cda:	fa1f fe8e 	uxth.w	lr, lr
 8000cde:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ce2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ce6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000cea:	fb00 f808 	mul.w	r8, r0, r8
 8000cee:	45a0      	cmp	r8, r4
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x26e>
 8000cf2:	18e4      	adds	r4, r4, r3
 8000cf4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000cf8:	d229      	bcs.n	8000d4e <__udivmoddi4+0x2ba>
 8000cfa:	45a0      	cmp	r8, r4
 8000cfc:	d927      	bls.n	8000d4e <__udivmoddi4+0x2ba>
 8000cfe:	3802      	subs	r0, #2
 8000d00:	441c      	add	r4, r3
 8000d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d06:	eba4 0408 	sub.w	r4, r4, r8
 8000d0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0e:	454c      	cmp	r4, r9
 8000d10:	46c6      	mov	lr, r8
 8000d12:	464d      	mov	r5, r9
 8000d14:	d315      	bcc.n	8000d42 <__udivmoddi4+0x2ae>
 8000d16:	d012      	beq.n	8000d3e <__udivmoddi4+0x2aa>
 8000d18:	b156      	cbz	r6, 8000d30 <__udivmoddi4+0x29c>
 8000d1a:	ebba 030e 	subs.w	r3, sl, lr
 8000d1e:	eb64 0405 	sbc.w	r4, r4, r5
 8000d22:	fa04 f707 	lsl.w	r7, r4, r7
 8000d26:	40cb      	lsrs	r3, r1
 8000d28:	431f      	orrs	r7, r3
 8000d2a:	40cc      	lsrs	r4, r1
 8000d2c:	6037      	str	r7, [r6, #0]
 8000d2e:	6074      	str	r4, [r6, #4]
 8000d30:	2100      	movs	r1, #0
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	4618      	mov	r0, r3
 8000d38:	e6f8      	b.n	8000b2c <__udivmoddi4+0x98>
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	e6e0      	b.n	8000b00 <__udivmoddi4+0x6c>
 8000d3e:	45c2      	cmp	sl, r8
 8000d40:	d2ea      	bcs.n	8000d18 <__udivmoddi4+0x284>
 8000d42:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d46:	eb69 0503 	sbc.w	r5, r9, r3
 8000d4a:	3801      	subs	r0, #1
 8000d4c:	e7e4      	b.n	8000d18 <__udivmoddi4+0x284>
 8000d4e:	4628      	mov	r0, r5
 8000d50:	e7d7      	b.n	8000d02 <__udivmoddi4+0x26e>
 8000d52:	4640      	mov	r0, r8
 8000d54:	e791      	b.n	8000c7a <__udivmoddi4+0x1e6>
 8000d56:	4681      	mov	r9, r0
 8000d58:	e7be      	b.n	8000cd8 <__udivmoddi4+0x244>
 8000d5a:	4601      	mov	r1, r0
 8000d5c:	e778      	b.n	8000c50 <__udivmoddi4+0x1bc>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	443c      	add	r4, r7
 8000d62:	e745      	b.n	8000bf0 <__udivmoddi4+0x15c>
 8000d64:	4608      	mov	r0, r1
 8000d66:	e708      	b.n	8000b7a <__udivmoddi4+0xe6>
 8000d68:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6c:	443d      	add	r5, r7
 8000d6e:	e72b      	b.n	8000bc8 <__udivmoddi4+0x134>

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d78:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <HAL_Init+0x40>)
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_Init+0x40>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d84:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <HAL_Init+0x40>)
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_Init+0x40>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d90:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_Init+0x40>)
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_Init+0x40>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 f94b 	bl	8001038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f000 f808 	bl	8000db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da8:	f004 fb76 	bl	8005498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023c00 	.word	0x40023c00

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_InitTick+0x54>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x58>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f963 	bl	80010a2 <HAL_SYSTICK_Config>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00e      	b.n	8000e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d80a      	bhi.n	8000e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f000 f92b 	bl	800104e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df8:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <HAL_InitTick+0x5c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e000      	b.n	8000e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000004 	.word	0x20000004
 8000e14:	20000000 	.word	0x20000000

08000e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x24>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_IncTick+0x24>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000004 	.word	0x20000004
 8000e3c:	2000049c 	.word	0x2000049c

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	2000049c 	.word	0x2000049c

08000e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff ffee 	bl	8000e40 <HAL_GetTick>
 8000e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e70:	d005      	beq.n	8000e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <HAL_Delay+0x40>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e7e:	bf00      	nop
 8000e80:	f7ff ffde 	bl	8000e40 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1ad2      	subs	r2, r2, r3
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d3f7      	bcc.n	8000e80 <HAL_Delay+0x28>
  {
  }
}
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000004 	.word	0x20000004

08000e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <__NVIC_GetPriorityGrouping+0x18>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	f003 0307 	and.w	r3, r3, #7
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db0b      	blt.n	8000f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f12:	4909      	ldr	r1, [pc, #36]	; (8000f38 <__NVIC_EnableIRQ+0x38>)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	095b      	lsrs	r3, r3, #5
 8000f1a:	79fa      	ldrb	r2, [r7, #7]
 8000f1c:	f002 021f 	and.w	r2, r2, #31
 8000f20:	2001      	movs	r0, #1
 8000f22:	fa00 f202 	lsl.w	r2, r0, r2
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000e100 	.word	0xe000e100

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	490d      	ldr	r1, [pc, #52]	; (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	4909      	ldr	r1, [pc, #36]	; (8000f8c <__NVIC_SetPriority+0x50>)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	f003 030f 	and.w	r3, r3, #15
 8000f6e:	3b04      	subs	r3, #4
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	1e5a      	subs	r2, r3, #1
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	401a      	ands	r2, r3
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	1e59      	subs	r1, r3, #1
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	4313      	orrs	r3, r2
         );
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3724      	adds	r7, #36	; 0x24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
	...

08000ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001004:	d301      	bcc.n	800100a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001006:	2301      	movs	r3, #1
 8001008:	e00f      	b.n	800102a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <SysTick_Config+0x40>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001012:	210f      	movs	r1, #15
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f7ff ff90 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <SysTick_Config+0x40>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001022:	4b04      	ldr	r3, [pc, #16]	; (8001034 <SysTick_Config+0x40>)
 8001024:	2207      	movs	r2, #7
 8001026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	e000e010 	.word	0xe000e010

08001038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff ff2b 	bl	8000e9c <__NVIC_SetPriorityGrouping>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001060:	f7ff ff40 	bl	8000ee4 <__NVIC_GetPriorityGrouping>
 8001064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	6978      	ldr	r0, [r7, #20]
 800106c:	f7ff ff90 	bl	8000f90 <NVIC_EncodePriority>
 8001070:	4602      	mov	r2, r0
 8001072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff5f 	bl	8000f3c <__NVIC_SetPriority>
}
 800107e:	bf00      	nop
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff33 	bl	8000f00 <__NVIC_EnableIRQ>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffa2 	bl	8000ff4 <SysTick_Config>
 80010b0:	4603      	mov	r3, r0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	e177      	b.n	80013c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	f040 8166 	bne.w	80013c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x4a>
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b12      	cmp	r3, #18
 8001104:	d123      	bne.n	800114e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	08da      	lsrs	r2, r3, #3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3208      	adds	r2, #8
 800110e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	220f      	movs	r2, #15
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	691a      	ldr	r2, [r3, #16]
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	08da      	lsrs	r2, r3, #3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3208      	adds	r2, #8
 8001148:	69b9      	ldr	r1, [r7, #24]
 800114a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2203      	movs	r2, #3
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0203 	and.w	r2, r3, #3
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d00b      	beq.n	80011a2 <HAL_GPIO_Init+0xe6>
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b02      	cmp	r3, #2
 8001190:	d007      	beq.n	80011a2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001196:	2b11      	cmp	r3, #17
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b12      	cmp	r3, #18
 80011a0:	d130      	bne.n	8001204 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d8:	2201      	movs	r2, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	091b      	lsrs	r3, r3, #4
 80011ee:	f003 0201 	and.w	r2, r3, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 80c0 	beq.w	80013c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4a65      	ldr	r2, [pc, #404]	; (80013dc <HAL_GPIO_Init+0x320>)
 8001248:	4b64      	ldr	r3, [pc, #400]	; (80013dc <HAL_GPIO_Init+0x320>)
 800124a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b62      	ldr	r3, [pc, #392]	; (80013dc <HAL_GPIO_Init+0x320>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125e:	4a60      	ldr	r2, [pc, #384]	; (80013e0 <HAL_GPIO_Init+0x324>)
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	3302      	adds	r3, #2
 8001266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	220f      	movs	r2, #15
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a57      	ldr	r2, [pc, #348]	; (80013e4 <HAL_GPIO_Init+0x328>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d037      	beq.n	80012fa <HAL_GPIO_Init+0x23e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a56      	ldr	r2, [pc, #344]	; (80013e8 <HAL_GPIO_Init+0x32c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d031      	beq.n	80012f6 <HAL_GPIO_Init+0x23a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a55      	ldr	r2, [pc, #340]	; (80013ec <HAL_GPIO_Init+0x330>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d02b      	beq.n	80012f2 <HAL_GPIO_Init+0x236>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a54      	ldr	r2, [pc, #336]	; (80013f0 <HAL_GPIO_Init+0x334>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d025      	beq.n	80012ee <HAL_GPIO_Init+0x232>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a53      	ldr	r2, [pc, #332]	; (80013f4 <HAL_GPIO_Init+0x338>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d01f      	beq.n	80012ea <HAL_GPIO_Init+0x22e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a52      	ldr	r2, [pc, #328]	; (80013f8 <HAL_GPIO_Init+0x33c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d019      	beq.n	80012e6 <HAL_GPIO_Init+0x22a>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a51      	ldr	r2, [pc, #324]	; (80013fc <HAL_GPIO_Init+0x340>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0x226>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a50      	ldr	r2, [pc, #320]	; (8001400 <HAL_GPIO_Init+0x344>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x222>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4f      	ldr	r2, [pc, #316]	; (8001404 <HAL_GPIO_Init+0x348>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x21e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4e      	ldr	r2, [pc, #312]	; (8001408 <HAL_GPIO_Init+0x34c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x21a>
 80012d2:	2309      	movs	r3, #9
 80012d4:	e012      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012d6:	230a      	movs	r3, #10
 80012d8:	e010      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012da:	2308      	movs	r3, #8
 80012dc:	e00e      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012de:	2307      	movs	r3, #7
 80012e0:	e00c      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012e2:	2306      	movs	r3, #6
 80012e4:	e00a      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012e6:	2305      	movs	r3, #5
 80012e8:	e008      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012ea:	2304      	movs	r3, #4
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012ee:	2303      	movs	r3, #3
 80012f0:	e004      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e002      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <HAL_GPIO_Init+0x240>
 80012fa:	2300      	movs	r3, #0
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	f002 0203 	and.w	r2, r2, #3
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	4093      	lsls	r3, r2
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800130c:	4934      	ldr	r1, [pc, #208]	; (80013e0 <HAL_GPIO_Init+0x324>)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800131a:	4b3c      	ldr	r3, [pc, #240]	; (800140c <HAL_GPIO_Init+0x350>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800133e:	4a33      	ldr	r2, [pc, #204]	; (800140c <HAL_GPIO_Init+0x350>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001344:	4b31      	ldr	r3, [pc, #196]	; (800140c <HAL_GPIO_Init+0x350>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001368:	4a28      	ldr	r2, [pc, #160]	; (800140c <HAL_GPIO_Init+0x350>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136e:	4b27      	ldr	r3, [pc, #156]	; (800140c <HAL_GPIO_Init+0x350>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001392:	4a1e      	ldr	r2, [pc, #120]	; (800140c <HAL_GPIO_Init+0x350>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001398:	4b1c      	ldr	r3, [pc, #112]	; (800140c <HAL_GPIO_Init+0x350>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013bc:	4a13      	ldr	r2, [pc, #76]	; (800140c <HAL_GPIO_Init+0x350>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3301      	adds	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	f67f ae84 	bls.w	80010d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d0:	bf00      	nop
 80013d2:	3724      	adds	r7, #36	; 0x24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40013800 	.word	0x40013800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40021400 	.word	0x40021400
 80013fc:	40021800 	.word	0x40021800
 8001400:	40021c00 	.word	0x40021c00
 8001404:	40022000 	.word	0x40022000
 8001408:	40022400 	.word	0x40022400
 800140c:	40013c00 	.word	0x40013c00

08001410 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	887b      	ldrh	r3, [r7, #2]
 8001422:	4013      	ands	r3, r2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d002      	beq.n	800142e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001428:	2301      	movs	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	e001      	b.n	8001432 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
 800144c:	4613      	mov	r3, r2
 800144e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001450:	787b      	ldrb	r3, [r7, #1]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800145c:	e003      	b.n	8001466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800145e:	887b      	ldrh	r3, [r7, #2]
 8001460:	041a      	lsls	r2, r3, #16
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	619a      	str	r2, [r3, #24]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	460b      	mov	r3, r1
 800147c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695a      	ldr	r2, [r3, #20]
 8001482:	887b      	ldrh	r3, [r7, #2]
 8001484:	401a      	ands	r2, r3
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	429a      	cmp	r2, r3
 800148a:	d104      	bne.n	8001496 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800148c:	887b      	ldrh	r3, [r7, #2]
 800148e:	041a      	lsls	r2, r3, #16
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001494:	e002      	b.n	800149c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	619a      	str	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	4a20      	ldr	r2, [pc, #128]	; (8001538 <HAL_PWREx_EnableOverDrive+0x90>)
 80014b8:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <HAL_PWREx_EnableOverDrive+0x90>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_PWREx_EnableOverDrive+0x90>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014ce:	4b1b      	ldr	r3, [pc, #108]	; (800153c <HAL_PWREx_EnableOverDrive+0x94>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d4:	f7ff fcb4 	bl	8000e40 <HAL_GetTick>
 80014d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014da:	e009      	b.n	80014f0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014dc:	f7ff fcb0 	bl	8000e40 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014ea:	d901      	bls.n	80014f0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e01f      	b.n	8001530 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <HAL_PWREx_EnableOverDrive+0x98>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014fc:	d1ee      	bne.n	80014dc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001504:	f7ff fc9c 	bl	8000e40 <HAL_GetTick>
 8001508:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800150a:	e009      	b.n	8001520 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800150c:	f7ff fc98 	bl	8000e40 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800151a:	d901      	bls.n	8001520 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e007      	b.n	8001530 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <HAL_PWREx_EnableOverDrive+0x98>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001528:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800152c:	d1ee      	bne.n	800150c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800
 800153c:	420e0040 	.word	0x420e0040
 8001540:	40007000 	.word	0x40007000
 8001544:	420e0044 	.word	0x420e0044

08001548 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e22d      	b.n	80019b6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d075      	beq.n	8001652 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001566:	4ba3      	ldr	r3, [pc, #652]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	2b04      	cmp	r3, #4
 8001570:	d00c      	beq.n	800158c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001572:	4ba0      	ldr	r3, [pc, #640]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800157a:	2b08      	cmp	r3, #8
 800157c:	d112      	bne.n	80015a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800157e:	4b9d      	ldr	r3, [pc, #628]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800158a:	d10b      	bne.n	80015a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158c:	4b99      	ldr	r3, [pc, #612]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d05b      	beq.n	8001650 <HAL_RCC_OscConfig+0x108>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d157      	bne.n	8001650 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e208      	b.n	80019b6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ac:	d106      	bne.n	80015bc <HAL_RCC_OscConfig+0x74>
 80015ae:	4a91      	ldr	r2, [pc, #580]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	4b90      	ldr	r3, [pc, #576]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e01d      	b.n	80015f8 <HAL_RCC_OscConfig+0xb0>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c4:	d10c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x98>
 80015c6:	4a8b      	ldr	r2, [pc, #556]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 80015c8:	4b8a      	ldr	r3, [pc, #552]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	4a88      	ldr	r2, [pc, #544]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 80015d4:	4b87      	ldr	r3, [pc, #540]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e00b      	b.n	80015f8 <HAL_RCC_OscConfig+0xb0>
 80015e0:	4a84      	ldr	r2, [pc, #528]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 80015e2:	4b84      	ldr	r3, [pc, #528]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4a81      	ldr	r2, [pc, #516]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 80015ee:	4b81      	ldr	r3, [pc, #516]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d013      	beq.n	8001628 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fc1e 	bl	8000e40 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001608:	f7ff fc1a 	bl	8000e40 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e1cd      	b.n	80019b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161a:	4b76      	ldr	r3, [pc, #472]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0xc0>
 8001626:	e014      	b.n	8001652 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fc0a 	bl	8000e40 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001630:	f7ff fc06 	bl	8000e40 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b64      	cmp	r3, #100	; 0x64
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e1b9      	b.n	80019b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001642:	4b6c      	ldr	r3, [pc, #432]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0xe8>
 800164e:	e000      	b.n	8001652 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d063      	beq.n	8001726 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800165e:	4b65      	ldr	r3, [pc, #404]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00b      	beq.n	8001682 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800166a:	4b62      	ldr	r3, [pc, #392]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001672:	2b08      	cmp	r3, #8
 8001674:	d11c      	bne.n	80016b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001676:	4b5f      	ldr	r3, [pc, #380]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d116      	bne.n	80016b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001682:	4b5c      	ldr	r3, [pc, #368]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d005      	beq.n	800169a <HAL_RCC_OscConfig+0x152>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d001      	beq.n	800169a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e18d      	b.n	80019b6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169a:	4956      	ldr	r1, [pc, #344]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 800169c:	4b55      	ldr	r3, [pc, #340]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ae:	e03a      	b.n	8001726 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d020      	beq.n	80016fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b8:	4b4f      	ldr	r3, [pc, #316]	; (80017f8 <HAL_RCC_OscConfig+0x2b0>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016be:	f7ff fbbf 	bl	8000e40 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c6:	f7ff fbbb 	bl	8000e40 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e16e      	b.n	80019b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d8:	4b46      	ldr	r3, [pc, #280]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e4:	4943      	ldr	r1, [pc, #268]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 80016e6:	4b43      	ldr	r3, [pc, #268]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	600b      	str	r3, [r1, #0]
 80016f8:	e015      	b.n	8001726 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016fa:	4b3f      	ldr	r3, [pc, #252]	; (80017f8 <HAL_RCC_OscConfig+0x2b0>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff fb9e 	bl	8000e40 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001708:	f7ff fb9a 	bl	8000e40 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e14d      	b.n	80019b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171a:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d030      	beq.n	8001794 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d016      	beq.n	8001768 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173a:	4b30      	ldr	r3, [pc, #192]	; (80017fc <HAL_RCC_OscConfig+0x2b4>)
 800173c:	2201      	movs	r2, #1
 800173e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001740:	f7ff fb7e 	bl	8000e40 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001748:	f7ff fb7a 	bl	8000e40 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e12d      	b.n	80019b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 800175c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f0      	beq.n	8001748 <HAL_RCC_OscConfig+0x200>
 8001766:	e015      	b.n	8001794 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001768:	4b24      	ldr	r3, [pc, #144]	; (80017fc <HAL_RCC_OscConfig+0x2b4>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176e:	f7ff fb67 	bl	8000e40 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001776:	f7ff fb63 	bl	8000e40 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e116      	b.n	80019b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 800178a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f0      	bne.n	8001776 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 80a0 	beq.w	80018e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a6:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10f      	bne.n	80017d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4a0f      	ldr	r2, [pc, #60]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_RCC_OscConfig+0x2ac>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017ce:	2301      	movs	r3, #1
 80017d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_RCC_OscConfig+0x2b8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d121      	bne.n	8001822 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017de:	4a08      	ldr	r2, [pc, #32]	; (8001800 <HAL_RCC_OscConfig+0x2b8>)
 80017e0:	4b07      	ldr	r3, [pc, #28]	; (8001800 <HAL_RCC_OscConfig+0x2b8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ea:	f7ff fb29 	bl	8000e40 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f0:	e011      	b.n	8001816 <HAL_RCC_OscConfig+0x2ce>
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	42470000 	.word	0x42470000
 80017fc:	42470e80 	.word	0x42470e80
 8001800:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001804:	f7ff fb1c 	bl	8000e40 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e0cf      	b.n	80019b6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001816:	4b6a      	ldr	r3, [pc, #424]	; (80019c0 <HAL_RCC_OscConfig+0x478>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d106      	bne.n	8001838 <HAL_RCC_OscConfig+0x2f0>
 800182a:	4a66      	ldr	r2, [pc, #408]	; (80019c4 <HAL_RCC_OscConfig+0x47c>)
 800182c:	4b65      	ldr	r3, [pc, #404]	; (80019c4 <HAL_RCC_OscConfig+0x47c>)
 800182e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6713      	str	r3, [r2, #112]	; 0x70
 8001836:	e01c      	b.n	8001872 <HAL_RCC_OscConfig+0x32a>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b05      	cmp	r3, #5
 800183e:	d10c      	bne.n	800185a <HAL_RCC_OscConfig+0x312>
 8001840:	4a60      	ldr	r2, [pc, #384]	; (80019c4 <HAL_RCC_OscConfig+0x47c>)
 8001842:	4b60      	ldr	r3, [pc, #384]	; (80019c4 <HAL_RCC_OscConfig+0x47c>)
 8001844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001846:	f043 0304 	orr.w	r3, r3, #4
 800184a:	6713      	str	r3, [r2, #112]	; 0x70
 800184c:	4a5d      	ldr	r2, [pc, #372]	; (80019c4 <HAL_RCC_OscConfig+0x47c>)
 800184e:	4b5d      	ldr	r3, [pc, #372]	; (80019c4 <HAL_RCC_OscConfig+0x47c>)
 8001850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6713      	str	r3, [r2, #112]	; 0x70
 8001858:	e00b      	b.n	8001872 <HAL_RCC_OscConfig+0x32a>
 800185a:	4a5a      	ldr	r2, [pc, #360]	; (80019c4 <HAL_RCC_OscConfig+0x47c>)
 800185c:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <HAL_RCC_OscConfig+0x47c>)
 800185e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001860:	f023 0301 	bic.w	r3, r3, #1
 8001864:	6713      	str	r3, [r2, #112]	; 0x70
 8001866:	4a57      	ldr	r2, [pc, #348]	; (80019c4 <HAL_RCC_OscConfig+0x47c>)
 8001868:	4b56      	ldr	r3, [pc, #344]	; (80019c4 <HAL_RCC_OscConfig+0x47c>)
 800186a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186c:	f023 0304 	bic.w	r3, r3, #4
 8001870:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d015      	beq.n	80018a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187a:	f7ff fae1 	bl	8000e40 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001880:	e00a      	b.n	8001898 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001882:	f7ff fadd 	bl	8000e40 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001890:	4293      	cmp	r3, r2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e08e      	b.n	80019b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001898:	4b4a      	ldr	r3, [pc, #296]	; (80019c4 <HAL_RCC_OscConfig+0x47c>)
 800189a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0ee      	beq.n	8001882 <HAL_RCC_OscConfig+0x33a>
 80018a4:	e014      	b.n	80018d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a6:	f7ff facb 	bl	8000e40 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ac:	e00a      	b.n	80018c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7ff fac7 	bl	8000e40 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018bc:	4293      	cmp	r3, r2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e078      	b.n	80019b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c4:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <HAL_RCC_OscConfig+0x47c>)
 80018c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1ee      	bne.n	80018ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018d0:	7dfb      	ldrb	r3, [r7, #23]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d105      	bne.n	80018e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d6:	4a3b      	ldr	r2, [pc, #236]	; (80019c4 <HAL_RCC_OscConfig+0x47c>)
 80018d8:	4b3a      	ldr	r3, [pc, #232]	; (80019c4 <HAL_RCC_OscConfig+0x47c>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d064      	beq.n	80019b4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018ea:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <HAL_RCC_OscConfig+0x47c>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d05c      	beq.n	80019b0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d141      	bne.n	8001982 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fe:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <HAL_RCC_OscConfig+0x480>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fa9c 	bl	8000e40 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff fa98 	bl	8000e40 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e04b      	b.n	80019b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191e:	4b29      	ldr	r3, [pc, #164]	; (80019c4 <HAL_RCC_OscConfig+0x47c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800192a:	4926      	ldr	r1, [pc, #152]	; (80019c4 <HAL_RCC_OscConfig+0x47c>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69da      	ldr	r2, [r3, #28]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	019b      	lsls	r3, r3, #6
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001942:	085b      	lsrs	r3, r3, #1
 8001944:	3b01      	subs	r3, #1
 8001946:	041b      	lsls	r3, r3, #16
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194e:	061b      	lsls	r3, r3, #24
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001954:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <HAL_RCC_OscConfig+0x480>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7ff fa71 	bl	8000e40 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001962:	f7ff fa6d 	bl	8000e40 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e020      	b.n	80019b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_RCC_OscConfig+0x47c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x41a>
 8001980:	e018      	b.n	80019b4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_RCC_OscConfig+0x480>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff fa5a 	bl	8000e40 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001990:	f7ff fa56 	bl	8000e40 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e009      	b.n	80019b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HAL_RCC_OscConfig+0x47c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x448>
 80019ae:	e001      	b.n	80019b4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40007000 	.word	0x40007000
 80019c4:	40023800 	.word	0x40023800
 80019c8:	42470060 	.word	0x42470060

080019cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0ca      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e0:	4b67      	ldr	r3, [pc, #412]	; (8001b80 <HAL_RCC_ClockConfig+0x1b4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 020f 	and.w	r2, r3, #15
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d20c      	bcs.n	8001a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b64      	ldr	r3, [pc, #400]	; (8001b80 <HAL_RCC_ClockConfig+0x1b4>)
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b62      	ldr	r3, [pc, #392]	; (8001b80 <HAL_RCC_ClockConfig+0x1b4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 020f 	and.w	r2, r3, #15
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0b6      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d020      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a20:	4a58      	ldr	r2, [pc, #352]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001a22:	4b58      	ldr	r3, [pc, #352]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a38:	4a52      	ldr	r2, [pc, #328]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3a:	4b52      	ldr	r3, [pc, #328]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a44:	494f      	ldr	r1, [pc, #316]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001a46:	4b4f      	ldr	r3, [pc, #316]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d044      	beq.n	8001aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	4b46      	ldr	r3, [pc, #280]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d119      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e07d      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d003      	beq.n	8001a8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d107      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8a:	4b3e      	ldr	r3, [pc, #248]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d109      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e06d      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9a:	4b3a      	ldr	r3, [pc, #232]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e065      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aaa:	4936      	ldr	r1, [pc, #216]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001aac:	4b35      	ldr	r3, [pc, #212]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f023 0203 	bic.w	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001abc:	f7ff f9c0 	bl	8000e40 <HAL_GetTick>
 8001ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac2:	e00a      	b.n	8001ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac4:	f7ff f9bc 	bl	8000e40 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e04d      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ada:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 020c 	and.w	r2, r3, #12
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d1eb      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aec:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <HAL_RCC_ClockConfig+0x1b4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 020f 	and.w	r2, r3, #15
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d90c      	bls.n	8001b14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <HAL_RCC_ClockConfig+0x1b4>)
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b02:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <HAL_RCC_ClockConfig+0x1b4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 020f 	and.w	r2, r3, #15
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e030      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b20:	4918      	ldr	r1, [pc, #96]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d009      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b3e:	4911      	ldr	r1, [pc, #68]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001b40:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b52:	f000 f81d 	bl	8001b90 <HAL_RCC_GetSysClockFreq>
 8001b56:	4601      	mov	r1, r0
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	4a09      	ldr	r2, [pc, #36]	; (8001b88 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	5cd3      	ldrb	r3, [r2, r3]
 8001b66:	fa21 f303 	lsr.w	r3, r1, r3
 8001b6a:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <HAL_RCC_ClockConfig+0x1c0>)
 8001b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f7ff f922 	bl	8000db8 <HAL_InitTick>

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023c00 	.word	0x40023c00
 8001b84:	40023800 	.word	0x40023800
 8001b88:	08007814 	.word	0x08007814
 8001b8c:	20000008 	.word	0x20000008

08001b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b94:	b087      	sub	sp, #28
 8001b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60fa      	str	r2, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	617a      	str	r2, [r7, #20]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ba8:	4a51      	ldr	r2, [pc, #324]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001baa:	6892      	ldr	r2, [r2, #8]
 8001bac:	f002 020c 	and.w	r2, r2, #12
 8001bb0:	2a04      	cmp	r2, #4
 8001bb2:	d007      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001bb4:	2a08      	cmp	r2, #8
 8001bb6:	d008      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0x3a>
 8001bb8:	2a00      	cmp	r2, #0
 8001bba:	f040 8090 	bne.w	8001cde <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bbe:	4b4d      	ldr	r3, [pc, #308]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001bc0:	613b      	str	r3, [r7, #16]
       break;
 8001bc2:	e08f      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bc4:	4b4c      	ldr	r3, [pc, #304]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001bc6:	613b      	str	r3, [r7, #16]
      break;
 8001bc8:	e08c      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bca:	4a49      	ldr	r2, [pc, #292]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bcc:	6852      	ldr	r2, [r2, #4]
 8001bce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001bd2:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bd4:	4a46      	ldr	r2, [pc, #280]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bd6:	6852      	ldr	r2, [r2, #4]
 8001bd8:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001bdc:	2a00      	cmp	r2, #0
 8001bde:	d023      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be0:	4b43      	ldr	r3, [pc, #268]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	099b      	lsrs	r3, r3, #6
 8001be6:	f04f 0400 	mov.w	r4, #0
 8001bea:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	ea03 0301 	and.w	r3, r3, r1
 8001bf6:	ea04 0402 	and.w	r4, r4, r2
 8001bfa:	4a3f      	ldr	r2, [pc, #252]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001bfc:	fb02 f104 	mul.w	r1, r2, r4
 8001c00:	2200      	movs	r2, #0
 8001c02:	fb02 f203 	mul.w	r2, r2, r3
 8001c06:	440a      	add	r2, r1
 8001c08:	493b      	ldr	r1, [pc, #236]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c0a:	fba3 0101 	umull	r0, r1, r3, r1
 8001c0e:	1853      	adds	r3, r2, r1
 8001c10:	4619      	mov	r1, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f04f 0400 	mov.w	r4, #0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4623      	mov	r3, r4
 8001c1c:	f7fe ff22 	bl	8000a64 <__aeabi_uldivmod>
 8001c20:	4603      	mov	r3, r0
 8001c22:	460c      	mov	r4, r1
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	e04c      	b.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c28:	4a31      	ldr	r2, [pc, #196]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c2a:	6852      	ldr	r2, [r2, #4]
 8001c2c:	0992      	lsrs	r2, r2, #6
 8001c2e:	4611      	mov	r1, r2
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f240 15ff 	movw	r5, #511	; 0x1ff
 8001c38:	f04f 0600 	mov.w	r6, #0
 8001c3c:	ea05 0501 	and.w	r5, r5, r1
 8001c40:	ea06 0602 	and.w	r6, r6, r2
 8001c44:	4629      	mov	r1, r5
 8001c46:	4632      	mov	r2, r6
 8001c48:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8001c4c:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8001c50:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8001c54:	4651      	mov	r1, sl
 8001c56:	465a      	mov	r2, fp
 8001c58:	46aa      	mov	sl, r5
 8001c5a:	46b3      	mov	fp, r6
 8001c5c:	4655      	mov	r5, sl
 8001c5e:	465e      	mov	r6, fp
 8001c60:	1b4d      	subs	r5, r1, r5
 8001c62:	eb62 0606 	sbc.w	r6, r2, r6
 8001c66:	4629      	mov	r1, r5
 8001c68:	4632      	mov	r2, r6
 8001c6a:	0194      	lsls	r4, r2, #6
 8001c6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c70:	018b      	lsls	r3, r1, #6
 8001c72:	1a5b      	subs	r3, r3, r1
 8001c74:	eb64 0402 	sbc.w	r4, r4, r2
 8001c78:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8001c7c:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8001c80:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8001c84:	4643      	mov	r3, r8
 8001c86:	464c      	mov	r4, r9
 8001c88:	4655      	mov	r5, sl
 8001c8a:	465e      	mov	r6, fp
 8001c8c:	18ed      	adds	r5, r5, r3
 8001c8e:	eb46 0604 	adc.w	r6, r6, r4
 8001c92:	462b      	mov	r3, r5
 8001c94:	4634      	mov	r4, r6
 8001c96:	02a2      	lsls	r2, r4, #10
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	029b      	lsls	r3, r3, #10
 8001ca4:	603b      	str	r3, [r7, #0]
 8001ca6:	e897 0018 	ldmia.w	r7, {r3, r4}
 8001caa:	4618      	mov	r0, r3
 8001cac:	4621      	mov	r1, r4
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f04f 0400 	mov.w	r4, #0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4623      	mov	r3, r4
 8001cb8:	f7fe fed4 	bl	8000a64 <__aeabi_uldivmod>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	0c1b      	lsrs	r3, r3, #16
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cda:	613b      	str	r3, [r7, #16]
      break;
 8001cdc:	e002      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001ce0:	613b      	str	r3, [r7, #16]
      break;
 8001ce2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ce4:	693b      	ldr	r3, [r7, #16]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	371c      	adds	r7, #28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	00f42400 	.word	0x00f42400
 8001cf8:	017d7840 	.word	0x017d7840

08001cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000008 	.word	0x20000008

08001d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d18:	f7ff fff0 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d1c:	4601      	mov	r1, r0
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	0a9b      	lsrs	r3, r3, #10
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	4a03      	ldr	r2, [pc, #12]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d2a:	5cd3      	ldrb	r3, [r2, r3]
 8001d2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	08007824 	.word	0x08007824

08001d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d40:	f7ff ffdc 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d44:	4601      	mov	r1, r0
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0b5b      	lsrs	r3, r3, #13
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4a03      	ldr	r2, [pc, #12]	; (8001d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d52:	5cd3      	ldrb	r3, [r2, r3]
 8001d54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	08007824 	.word	0x08007824

08001d64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e055      	b.n	8001e22 <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d106      	bne.n	8001d96 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f003 fb01 	bl	8005398 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2202      	movs	r2, #2
 8001d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6851      	ldr	r1, [r2, #4]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6892      	ldr	r2, [r2, #8]
 8001dba:	4311      	orrs	r1, r2
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	68d2      	ldr	r2, [r2, #12]
 8001dc0:	4311      	orrs	r1, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6912      	ldr	r2, [r2, #16]
 8001dc6:	4311      	orrs	r1, r2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6952      	ldr	r2, [r2, #20]
 8001dcc:	4311      	orrs	r1, r2
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6992      	ldr	r2, [r2, #24]
 8001dd2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001dd6:	4311      	orrs	r1, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	69d2      	ldr	r2, [r2, #28]
 8001ddc:	4311      	orrs	r1, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6a12      	ldr	r2, [r2, #32]
 8001de2:	4311      	orrs	r1, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001de8:	430a      	orrs	r2, r1
 8001dea:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6992      	ldr	r2, [r2, #24]
 8001df4:	0c12      	lsrs	r2, r2, #16
 8001df6:	f002 0104 	and.w	r1, r2, #4
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6812      	ldr	r2, [r2, #0]
 8001e0a:	69d2      	ldr	r2, [r2, #28]
 8001e0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b088      	sub	sp, #32
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	60f8      	str	r0, [r7, #12]
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	4613      	mov	r3, r2
 8001e38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_SPI_Transmit+0x22>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e11c      	b.n	8002086 <HAL_SPI_Transmit+0x25c>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e54:	f7fe fff4 	bl	8000e40 <HAL_GetTick>
 8001e58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d002      	beq.n	8001e70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e6e:	e101      	b.n	8002074 <HAL_SPI_Transmit+0x24a>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <HAL_SPI_Transmit+0x52>
 8001e76:	88fb      	ldrh	r3, [r7, #6]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d102      	bne.n	8001e82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e80:	e0f8      	b.n	8002074 <HAL_SPI_Transmit+0x24a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2203      	movs	r2, #3
 8001e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	88fa      	ldrh	r2, [r7, #6]
 8001e9a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	88fa      	ldrh	r2, [r7, #6]
 8001ea0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ec8:	d107      	bne.n	8001eda <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ed8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee4:	2b40      	cmp	r3, #64	; 0x40
 8001ee6:	d007      	beq.n	8001ef8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ef6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f00:	d14b      	bne.n	8001f9a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <HAL_SPI_Transmit+0xe6>
 8001f0a:	8afb      	ldrh	r3, [r7, #22]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d13e      	bne.n	8001f8e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f18:	8812      	ldrh	r2, [r2, #0]
 8001f1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	1c9a      	adds	r2, r3, #2
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f34:	e02b      	b.n	8001f8e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d112      	bne.n	8001f6a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f4c:	8812      	ldrh	r2, [r2, #0]
 8001f4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	1c9a      	adds	r2, r3, #2
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f68:	e011      	b.n	8001f8e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f6a:	f7fe ff69 	bl	8000e40 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	1ad2      	subs	r2, r2, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d303      	bcc.n	8001f82 <HAL_SPI_Transmit+0x158>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d102      	bne.n	8001f88 <HAL_SPI_Transmit+0x15e>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d102      	bne.n	8001f8e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f8c:	e072      	b.n	8002074 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1ce      	bne.n	8001f36 <HAL_SPI_Transmit+0x10c>
 8001f98:	e04c      	b.n	8002034 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <HAL_SPI_Transmit+0x17e>
 8001fa2:	8afb      	ldrh	r3, [r7, #22]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d140      	bne.n	800202a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	330c      	adds	r3, #12
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fb2:	7812      	ldrb	r2, [r2, #0]
 8001fb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001fce:	e02c      	b.n	800202a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d113      	bne.n	8002006 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	330c      	adds	r3, #12
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fe8:	7812      	ldrb	r2, [r2, #0]
 8001fea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	86da      	strh	r2, [r3, #54]	; 0x36
 8002004:	e011      	b.n	800202a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002006:	f7fe ff1b 	bl	8000e40 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	1ad2      	subs	r2, r2, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d303      	bcc.n	800201e <HAL_SPI_Transmit+0x1f4>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201c:	d102      	bne.n	8002024 <HAL_SPI_Transmit+0x1fa>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002028:	e024      	b.n	8002074 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800202e:	b29b      	uxth	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1cd      	bne.n	8001fd0 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	6839      	ldr	r1, [r7, #0]
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 fa32 	bl	80024a2 <SPI_EndRxTxTransaction>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2220      	movs	r2, #32
 8002048:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10a      	bne.n	8002068 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_SPI_Transmit+0x24a>
  {
    errorcode = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002084:	7ffb      	ldrb	r3, [r7, #31]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3720      	adds	r7, #32
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b08c      	sub	sp, #48	; 0x30
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800209c:	2301      	movs	r3, #1
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_SPI_TransmitReceive+0x26>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e188      	b.n	80023c6 <HAL_SPI_TransmitReceive+0x338>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020bc:	f7fe fec0 	bl	8000e40 <HAL_GetTick>
 80020c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80020d2:	887b      	ldrh	r3, [r7, #2]
 80020d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80020d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d00f      	beq.n	80020fe <HAL_SPI_TransmitReceive+0x70>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020e4:	d107      	bne.n	80020f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d103      	bne.n	80020f6 <HAL_SPI_TransmitReceive+0x68>
 80020ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d003      	beq.n	80020fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80020f6:	2302      	movs	r3, #2
 80020f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80020fc:	e159      	b.n	80023b2 <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_SPI_TransmitReceive+0x82>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <HAL_SPI_TransmitReceive+0x82>
 800210a:	887b      	ldrh	r3, [r7, #2]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d103      	bne.n	8002118 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002116:	e14c      	b.n	80023b2 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b04      	cmp	r3, #4
 8002122:	d003      	beq.n	800212c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2205      	movs	r2, #5
 8002128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	887a      	ldrh	r2, [r7, #2]
 800213c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	887a      	ldrh	r2, [r7, #2]
 8002142:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	887a      	ldrh	r2, [r7, #2]
 800214e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	887a      	ldrh	r2, [r7, #2]
 8002154:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216c:	2b40      	cmp	r3, #64	; 0x40
 800216e:	d007      	beq.n	8002180 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800217e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002188:	d178      	bne.n	800227c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <HAL_SPI_TransmitReceive+0x10a>
 8002192:	8b7b      	ldrh	r3, [r7, #26]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d166      	bne.n	8002266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021a0:	8812      	ldrh	r2, [r2, #0]
 80021a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	1c9a      	adds	r2, r3, #2
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021bc:	e053      	b.n	8002266 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d11b      	bne.n	8002204 <HAL_SPI_TransmitReceive+0x176>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d016      	beq.n	8002204 <HAL_SPI_TransmitReceive+0x176>
 80021d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d113      	bne.n	8002204 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021e4:	8812      	ldrh	r2, [r2, #0]
 80021e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	1c9a      	adds	r2, r3, #2
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b01      	cmp	r3, #1
 8002210:	d119      	bne.n	8002246 <HAL_SPI_TransmitReceive+0x1b8>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002216:	b29b      	uxth	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d014      	beq.n	8002246 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	68d2      	ldr	r2, [r2, #12]
 8002226:	b292      	uxth	r2, r2
 8002228:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222e:	1c9a      	adds	r2, r3, #2
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002238:	b29b      	uxth	r3, r3
 800223a:	3b01      	subs	r3, #1
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002242:	2301      	movs	r3, #1
 8002244:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002246:	f7fe fdfb 	bl	8000e40 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	1ad2      	subs	r2, r2, r3
 8002250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002252:	429a      	cmp	r2, r3
 8002254:	d307      	bcc.n	8002266 <HAL_SPI_TransmitReceive+0x1d8>
 8002256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225c:	d003      	beq.n	8002266 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002264:	e0a5      	b.n	80023b2 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800226a:	b29b      	uxth	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1a6      	bne.n	80021be <HAL_SPI_TransmitReceive+0x130>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002274:	b29b      	uxth	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1a1      	bne.n	80021be <HAL_SPI_TransmitReceive+0x130>
 800227a:	e07c      	b.n	8002376 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d002      	beq.n	800228a <HAL_SPI_TransmitReceive+0x1fc>
 8002284:	8b7b      	ldrh	r3, [r7, #26]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d16b      	bne.n	8002362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	330c      	adds	r3, #12
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002294:	7812      	ldrb	r2, [r2, #0]
 8002296:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022b0:	e057      	b.n	8002362 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d11c      	bne.n	80022fa <HAL_SPI_TransmitReceive+0x26c>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d017      	beq.n	80022fa <HAL_SPI_TransmitReceive+0x26c>
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d114      	bne.n	80022fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	330c      	adds	r3, #12
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022da:	7812      	ldrb	r2, [r2, #0]
 80022dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	d119      	bne.n	800233c <HAL_SPI_TransmitReceive+0x2ae>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d014      	beq.n	800233c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	68d2      	ldr	r2, [r2, #12]
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002338:	2301      	movs	r3, #1
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800233c:	f7fe fd80 	bl	8000e40 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	1ad2      	subs	r2, r2, r3
 8002346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002348:	429a      	cmp	r2, r3
 800234a:	d303      	bcc.n	8002354 <HAL_SPI_TransmitReceive+0x2c6>
 800234c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002352:	d102      	bne.n	800235a <HAL_SPI_TransmitReceive+0x2cc>
 8002354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002356:	2b00      	cmp	r3, #0
 8002358:	d103      	bne.n	8002362 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002360:	e027      	b.n	80023b2 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1a2      	bne.n	80022b2 <HAL_SPI_TransmitReceive+0x224>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002370:	b29b      	uxth	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d19d      	bne.n	80022b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f891 	bl	80024a2 <SPI_EndRxTxTransaction>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d006      	beq.n	8002394 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2220      	movs	r2, #32
 8002390:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002392:	e00e      	b.n	80023b2 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10a      	bne.n	80023b2 <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3730      	adds	r7, #48	; 0x30
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b084      	sub	sp, #16
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	603b      	str	r3, [r7, #0]
 80023da:	4613      	mov	r3, r2
 80023dc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023de:	e04c      	b.n	800247a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e6:	d048      	beq.n	800247a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80023e8:	f7fe fd2a 	bl	8000e40 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	1ad2      	subs	r2, r2, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d202      	bcs.n	80023fe <SPI_WaitFlagStateUntilTimeout+0x30>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d13d      	bne.n	800247a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	6852      	ldr	r2, [r2, #4]
 8002408:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800240c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002416:	d111      	bne.n	800243c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002420:	d004      	beq.n	800242c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800242a:	d107      	bne.n	800243c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800243a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002444:	d10f      	bne.n	8002466 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002464:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e00f      	b.n	800249a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	401a      	ands	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	429a      	cmp	r2, r3
 8002488:	bf0c      	ite	eq
 800248a:	2301      	moveq	r3, #1
 800248c:	2300      	movne	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	429a      	cmp	r2, r3
 8002496:	d1a3      	bne.n	80023e0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b086      	sub	sp, #24
 80024a6:	af02      	add	r7, sp, #8
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2200      	movs	r2, #0
 80024b6:	2180      	movs	r1, #128	; 0x80
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f7ff ff88 	bl	80023ce <SPI_WaitFlagStateUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d007      	beq.n	80024d4 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c8:	f043 0220 	orr.w	r2, r3, #32
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e000      	b.n	80024d6 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e01d      	b.n	800252c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d106      	bne.n	800250a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f003 fb21 	bl	8005b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2202      	movs	r2, #2
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3304      	adds	r3, #4
 800251a:	4619      	mov	r1, r3
 800251c:	4610      	mov	r0, r2
 800251e:	f000 fc19 	bl	8002d54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	68d2      	ldr	r2, [r2, #12]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b06      	cmp	r3, #6
 800255c:	d007      	beq.n	800256e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	f042 0201 	orr.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e01d      	b.n	80025ca <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f815 	bl	80025d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3304      	adds	r3, #4
 80025b8:	4619      	mov	r1, r3
 80025ba:	4610      	mov	r0, r2
 80025bc:	f000 fbca 	bl	8002d54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2201      	movs	r2, #1
 80025f8:	6839      	ldr	r1, [r7, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 fe94 	bl	8003328 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a15      	ldr	r2, [pc, #84]	; (800265c <HAL_TIM_PWM_Start+0x74>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d004      	beq.n	8002614 <HAL_TIM_PWM_Start+0x2c>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a14      	ldr	r2, [pc, #80]	; (8002660 <HAL_TIM_PWM_Start+0x78>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d101      	bne.n	8002618 <HAL_TIM_PWM_Start+0x30>
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <HAL_TIM_PWM_Start+0x32>
 8002618:	2300      	movs	r3, #0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002628:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800262c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2b06      	cmp	r3, #6
 800263e:	d007      	beq.n	8002650 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40010000 	.word	0x40010000
 8002660:	40010400 	.word	0x40010400

08002664 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e083      	b.n	8002780 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d106      	bne.n	8002692 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f003 f9df 	bl	8005a50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2202      	movs	r2, #2
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026a8:	f023 0307 	bic.w	r3, r3, #7
 80026ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3304      	adds	r3, #4
 80026b6:	4619      	mov	r1, r3
 80026b8:	4610      	mov	r0, r2
 80026ba:	f000 fb4b 	bl	8002d54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e6:	f023 0303 	bic.w	r3, r3, #3
 80026ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	4313      	orrs	r3, r2
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002704:	f023 030c 	bic.w	r3, r3, #12
 8002708:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002710:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002714:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	4313      	orrs	r3, r2
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	011a      	lsls	r2, r3, #4
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	031b      	lsls	r3, r3, #12
 8002734:	4313      	orrs	r3, r2
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002742:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800274a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	4313      	orrs	r3, r2
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <HAL_TIM_Encoder_Start+0x16>
 8002798:	2b04      	cmp	r3, #4
 800279a:	d008      	beq.n	80027ae <HAL_TIM_Encoder_Start+0x26>
 800279c:	e00f      	b.n	80027be <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2201      	movs	r2, #1
 80027a4:	2100      	movs	r1, #0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fdbe 	bl	8003328 <TIM_CCxChannelCmd>
      break;
 80027ac:	e016      	b.n	80027dc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2201      	movs	r2, #1
 80027b4:	2104      	movs	r1, #4
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 fdb6 	bl	8003328 <TIM_CCxChannelCmd>
      break;
 80027bc:	e00e      	b.n	80027dc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2201      	movs	r2, #1
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fdae 	bl	8003328 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2201      	movs	r2, #1
 80027d2:	2104      	movs	r1, #4
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 fda7 	bl	8003328 <TIM_CCxChannelCmd>
      break;
 80027da:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	f042 0201 	orr.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b02      	cmp	r3, #2
 800280a:	d122      	bne.n	8002852 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b02      	cmp	r3, #2
 8002818:	d11b      	bne.n	8002852 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f06f 0202 	mvn.w	r2, #2
 8002822:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fa6c 	bl	8002d16 <HAL_TIM_IC_CaptureCallback>
 800283e:	e005      	b.n	800284c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 fa5e 	bl	8002d02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fa6f 	bl	8002d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b04      	cmp	r3, #4
 800285e:	d122      	bne.n	80028a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b04      	cmp	r3, #4
 800286c:	d11b      	bne.n	80028a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f06f 0204 	mvn.w	r2, #4
 8002876:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fa42 	bl	8002d16 <HAL_TIM_IC_CaptureCallback>
 8002892:	e005      	b.n	80028a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 fa34 	bl	8002d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fa45 	bl	8002d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d122      	bne.n	80028fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d11b      	bne.n	80028fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f06f 0208 	mvn.w	r2, #8
 80028ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2204      	movs	r2, #4
 80028d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fa18 	bl	8002d16 <HAL_TIM_IC_CaptureCallback>
 80028e6:	e005      	b.n	80028f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 fa0a 	bl	8002d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fa1b 	bl	8002d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b10      	cmp	r3, #16
 8002906:	d122      	bne.n	800294e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	2b10      	cmp	r3, #16
 8002914:	d11b      	bne.n	800294e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f06f 0210 	mvn.w	r2, #16
 800291e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2208      	movs	r2, #8
 8002924:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f9ee 	bl	8002d16 <HAL_TIM_IC_CaptureCallback>
 800293a:	e005      	b.n	8002948 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f9e0 	bl	8002d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f9f1 	bl	8002d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b01      	cmp	r3, #1
 800295a:	d10e      	bne.n	800297a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b01      	cmp	r3, #1
 8002968:	d107      	bne.n	800297a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f06f 0201 	mvn.w	r2, #1
 8002972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f002 fc6f 	bl	8005258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002984:	2b80      	cmp	r3, #128	; 0x80
 8002986:	d10e      	bne.n	80029a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002992:	2b80      	cmp	r3, #128	; 0x80
 8002994:	d107      	bne.n	80029a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800299e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fd35 	bl	8003410 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b0:	2b40      	cmp	r3, #64	; 0x40
 80029b2:	d10e      	bne.n	80029d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029be:	2b40      	cmp	r3, #64	; 0x40
 80029c0:	d107      	bne.n	80029d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f9b6 	bl	8002d3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b20      	cmp	r3, #32
 80029de:	d10e      	bne.n	80029fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b20      	cmp	r3, #32
 80029ec:	d107      	bne.n	80029fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f06f 0220 	mvn.w	r2, #32
 80029f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fcff 	bl	80033fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e0b4      	b.n	8002b8c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b0c      	cmp	r3, #12
 8002a36:	f200 809f 	bhi.w	8002b78 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002a3a:	a201      	add	r2, pc, #4	; (adr r2, 8002a40 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a40:	08002a75 	.word	0x08002a75
 8002a44:	08002b79 	.word	0x08002b79
 8002a48:	08002b79 	.word	0x08002b79
 8002a4c:	08002b79 	.word	0x08002b79
 8002a50:	08002ab5 	.word	0x08002ab5
 8002a54:	08002b79 	.word	0x08002b79
 8002a58:	08002b79 	.word	0x08002b79
 8002a5c:	08002b79 	.word	0x08002b79
 8002a60:	08002af7 	.word	0x08002af7
 8002a64:	08002b79 	.word	0x08002b79
 8002a68:	08002b79 	.word	0x08002b79
 8002a6c:	08002b79 	.word	0x08002b79
 8002a70:	08002b37 	.word	0x08002b37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fa0a 	bl	8002e94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	6992      	ldr	r2, [r2, #24]
 8002a8a:	f042 0208 	orr.w	r2, r2, #8
 8002a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	6992      	ldr	r2, [r2, #24]
 8002a9a:	f022 0204 	bic.w	r2, r2, #4
 8002a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	6991      	ldr	r1, [r2, #24]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	6912      	ldr	r2, [r2, #16]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	619a      	str	r2, [r3, #24]
      break;
 8002ab2:	e062      	b.n	8002b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fa5a 	bl	8002f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	6992      	ldr	r2, [r2, #24]
 8002aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	6992      	ldr	r2, [r2, #24]
 8002ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	6991      	ldr	r1, [r2, #24]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	6912      	ldr	r2, [r2, #16]
 8002aee:	0212      	lsls	r2, r2, #8
 8002af0:	430a      	orrs	r2, r1
 8002af2:	619a      	str	r2, [r3, #24]
      break;
 8002af4:	e041      	b.n	8002b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 faaf 	bl	8003060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	69d2      	ldr	r2, [r2, #28]
 8002b0c:	f042 0208 	orr.w	r2, r2, #8
 8002b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	69d2      	ldr	r2, [r2, #28]
 8002b1c:	f022 0204 	bic.w	r2, r2, #4
 8002b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	69d1      	ldr	r1, [r2, #28]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	6912      	ldr	r2, [r2, #16]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	61da      	str	r2, [r3, #28]
      break;
 8002b34:	e021      	b.n	8002b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68b9      	ldr	r1, [r7, #8]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 fb03 	bl	8003148 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	6812      	ldr	r2, [r2, #0]
 8002b4a:	69d2      	ldr	r2, [r2, #28]
 8002b4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	69d2      	ldr	r2, [r2, #28]
 8002b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	69d1      	ldr	r1, [r2, #28]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	6912      	ldr	r2, [r2, #16]
 8002b70:	0212      	lsls	r2, r2, #8
 8002b72:	430a      	orrs	r2, r1
 8002b74:	61da      	str	r2, [r3, #28]
      break;
 8002b76:	e000      	b.n	8002b7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002b78:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_TIM_ConfigClockSource+0x18>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e0a6      	b.n	8002cfa <HAL_TIM_ConfigClockSource+0x166>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b40      	cmp	r3, #64	; 0x40
 8002be2:	d067      	beq.n	8002cb4 <HAL_TIM_ConfigClockSource+0x120>
 8002be4:	2b40      	cmp	r3, #64	; 0x40
 8002be6:	d80b      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x6c>
 8002be8:	2b10      	cmp	r3, #16
 8002bea:	d073      	beq.n	8002cd4 <HAL_TIM_ConfigClockSource+0x140>
 8002bec:	2b10      	cmp	r3, #16
 8002bee:	d802      	bhi.n	8002bf6 <HAL_TIM_ConfigClockSource+0x62>
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d06f      	beq.n	8002cd4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002bf4:	e078      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	d06c      	beq.n	8002cd4 <HAL_TIM_ConfigClockSource+0x140>
 8002bfa:	2b30      	cmp	r3, #48	; 0x30
 8002bfc:	d06a      	beq.n	8002cd4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002bfe:	e073      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c00:	2b70      	cmp	r3, #112	; 0x70
 8002c02:	d00d      	beq.n	8002c20 <HAL_TIM_ConfigClockSource+0x8c>
 8002c04:	2b70      	cmp	r3, #112	; 0x70
 8002c06:	d804      	bhi.n	8002c12 <HAL_TIM_ConfigClockSource+0x7e>
 8002c08:	2b50      	cmp	r3, #80	; 0x50
 8002c0a:	d033      	beq.n	8002c74 <HAL_TIM_ConfigClockSource+0xe0>
 8002c0c:	2b60      	cmp	r3, #96	; 0x60
 8002c0e:	d041      	beq.n	8002c94 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002c10:	e06a      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c16:	d066      	beq.n	8002ce6 <HAL_TIM_ConfigClockSource+0x152>
 8002c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c1c:	d017      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002c1e:	e063      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	6899      	ldr	r1, [r3, #8]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f000 fb5a 	bl	80032e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c42:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	609a      	str	r2, [r3, #8]
      break;
 8002c4c:	e04c      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6899      	ldr	r1, [r3, #8]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f000 fb43 	bl	80032e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	6892      	ldr	r2, [r2, #8]
 8002c6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c70:	609a      	str	r2, [r3, #8]
      break;
 8002c72:	e039      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	6859      	ldr	r1, [r3, #4]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	461a      	mov	r2, r3
 8002c82:	f000 fab7 	bl	80031f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2150      	movs	r1, #80	; 0x50
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fb10 	bl	80032b2 <TIM_ITRx_SetConfig>
      break;
 8002c92:	e029      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	6859      	ldr	r1, [r3, #4]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f000 fad6 	bl	8003252 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2160      	movs	r1, #96	; 0x60
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 fb00 	bl	80032b2 <TIM_ITRx_SetConfig>
      break;
 8002cb2:	e019      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6818      	ldr	r0, [r3, #0]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	6859      	ldr	r1, [r3, #4]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	f000 fa97 	bl	80031f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2140      	movs	r1, #64	; 0x40
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 faf0 	bl	80032b2 <TIM_ITRx_SetConfig>
      break;
 8002cd2:	e009      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4610      	mov	r0, r2
 8002ce0:	f000 fae7 	bl	80032b2 <TIM_ITRx_SetConfig>
      break;
 8002ce4:	e000      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a40      	ldr	r2, [pc, #256]	; (8002e68 <TIM_Base_SetConfig+0x114>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d013      	beq.n	8002d94 <TIM_Base_SetConfig+0x40>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d72:	d00f      	beq.n	8002d94 <TIM_Base_SetConfig+0x40>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a3d      	ldr	r2, [pc, #244]	; (8002e6c <TIM_Base_SetConfig+0x118>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00b      	beq.n	8002d94 <TIM_Base_SetConfig+0x40>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a3c      	ldr	r2, [pc, #240]	; (8002e70 <TIM_Base_SetConfig+0x11c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d007      	beq.n	8002d94 <TIM_Base_SetConfig+0x40>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a3b      	ldr	r2, [pc, #236]	; (8002e74 <TIM_Base_SetConfig+0x120>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d003      	beq.n	8002d94 <TIM_Base_SetConfig+0x40>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a3a      	ldr	r2, [pc, #232]	; (8002e78 <TIM_Base_SetConfig+0x124>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d108      	bne.n	8002da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a2f      	ldr	r2, [pc, #188]	; (8002e68 <TIM_Base_SetConfig+0x114>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d02b      	beq.n	8002e06 <TIM_Base_SetConfig+0xb2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db4:	d027      	beq.n	8002e06 <TIM_Base_SetConfig+0xb2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a2c      	ldr	r2, [pc, #176]	; (8002e6c <TIM_Base_SetConfig+0x118>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d023      	beq.n	8002e06 <TIM_Base_SetConfig+0xb2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a2b      	ldr	r2, [pc, #172]	; (8002e70 <TIM_Base_SetConfig+0x11c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d01f      	beq.n	8002e06 <TIM_Base_SetConfig+0xb2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a2a      	ldr	r2, [pc, #168]	; (8002e74 <TIM_Base_SetConfig+0x120>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01b      	beq.n	8002e06 <TIM_Base_SetConfig+0xb2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a29      	ldr	r2, [pc, #164]	; (8002e78 <TIM_Base_SetConfig+0x124>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d017      	beq.n	8002e06 <TIM_Base_SetConfig+0xb2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a28      	ldr	r2, [pc, #160]	; (8002e7c <TIM_Base_SetConfig+0x128>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d013      	beq.n	8002e06 <TIM_Base_SetConfig+0xb2>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a27      	ldr	r2, [pc, #156]	; (8002e80 <TIM_Base_SetConfig+0x12c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00f      	beq.n	8002e06 <TIM_Base_SetConfig+0xb2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a26      	ldr	r2, [pc, #152]	; (8002e84 <TIM_Base_SetConfig+0x130>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00b      	beq.n	8002e06 <TIM_Base_SetConfig+0xb2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a25      	ldr	r2, [pc, #148]	; (8002e88 <TIM_Base_SetConfig+0x134>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d007      	beq.n	8002e06 <TIM_Base_SetConfig+0xb2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a24      	ldr	r2, [pc, #144]	; (8002e8c <TIM_Base_SetConfig+0x138>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d003      	beq.n	8002e06 <TIM_Base_SetConfig+0xb2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a23      	ldr	r2, [pc, #140]	; (8002e90 <TIM_Base_SetConfig+0x13c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d108      	bne.n	8002e18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <TIM_Base_SetConfig+0x114>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d003      	beq.n	8002e4c <TIM_Base_SetConfig+0xf8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a0c      	ldr	r2, [pc, #48]	; (8002e78 <TIM_Base_SetConfig+0x124>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d103      	bne.n	8002e54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	615a      	str	r2, [r3, #20]
}
 8002e5a:	bf00      	nop
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40010000 	.word	0x40010000
 8002e6c:	40000400 	.word	0x40000400
 8002e70:	40000800 	.word	0x40000800
 8002e74:	40000c00 	.word	0x40000c00
 8002e78:	40010400 	.word	0x40010400
 8002e7c:	40014000 	.word	0x40014000
 8002e80:	40014400 	.word	0x40014400
 8002e84:	40014800 	.word	0x40014800
 8002e88:	40001800 	.word	0x40001800
 8002e8c:	40001c00 	.word	0x40001c00
 8002e90:	40002000 	.word	0x40002000

08002e94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	f023 0201 	bic.w	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0303 	bic.w	r3, r3, #3
 8002eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f023 0302 	bic.w	r3, r3, #2
 8002edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a20      	ldr	r2, [pc, #128]	; (8002f6c <TIM_OC1_SetConfig+0xd8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d003      	beq.n	8002ef8 <TIM_OC1_SetConfig+0x64>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a1f      	ldr	r2, [pc, #124]	; (8002f70 <TIM_OC1_SetConfig+0xdc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d10c      	bne.n	8002f12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f023 0308 	bic.w	r3, r3, #8
 8002efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f023 0304 	bic.w	r3, r3, #4
 8002f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a15      	ldr	r2, [pc, #84]	; (8002f6c <TIM_OC1_SetConfig+0xd8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d003      	beq.n	8002f22 <TIM_OC1_SetConfig+0x8e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a14      	ldr	r2, [pc, #80]	; (8002f70 <TIM_OC1_SetConfig+0xdc>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d111      	bne.n	8002f46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	621a      	str	r2, [r3, #32]
}
 8002f60:	bf00      	nop
 8002f62:	371c      	adds	r7, #28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	40010000 	.word	0x40010000
 8002f70:	40010400 	.word	0x40010400

08002f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	f023 0210 	bic.w	r2, r3, #16
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f023 0320 	bic.w	r3, r3, #32
 8002fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a22      	ldr	r2, [pc, #136]	; (8003058 <TIM_OC2_SetConfig+0xe4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d003      	beq.n	8002fdc <TIM_OC2_SetConfig+0x68>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a21      	ldr	r2, [pc, #132]	; (800305c <TIM_OC2_SetConfig+0xe8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d10d      	bne.n	8002ff8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ff6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a17      	ldr	r2, [pc, #92]	; (8003058 <TIM_OC2_SetConfig+0xe4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d003      	beq.n	8003008 <TIM_OC2_SetConfig+0x94>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a16      	ldr	r2, [pc, #88]	; (800305c <TIM_OC2_SetConfig+0xe8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d113      	bne.n	8003030 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800300e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	621a      	str	r2, [r3, #32]
}
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40010000 	.word	0x40010000
 800305c:	40010400 	.word	0x40010400

08003060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800308e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0303 	bic.w	r3, r3, #3
 8003096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	021b      	lsls	r3, r3, #8
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a21      	ldr	r2, [pc, #132]	; (8003140 <TIM_OC3_SetConfig+0xe0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d003      	beq.n	80030c6 <TIM_OC3_SetConfig+0x66>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a20      	ldr	r2, [pc, #128]	; (8003144 <TIM_OC3_SetConfig+0xe4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10d      	bne.n	80030e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	021b      	lsls	r3, r3, #8
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a16      	ldr	r2, [pc, #88]	; (8003140 <TIM_OC3_SetConfig+0xe0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d003      	beq.n	80030f2 <TIM_OC3_SetConfig+0x92>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a15      	ldr	r2, [pc, #84]	; (8003144 <TIM_OC3_SetConfig+0xe4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d113      	bne.n	800311a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	621a      	str	r2, [r3, #32]
}
 8003134:	bf00      	nop
 8003136:	371c      	adds	r7, #28
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	40010000 	.word	0x40010000
 8003144:	40010400 	.word	0x40010400

08003148 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800317e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4313      	orrs	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	031b      	lsls	r3, r3, #12
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a12      	ldr	r2, [pc, #72]	; (80031ec <TIM_OC4_SetConfig+0xa4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d003      	beq.n	80031b0 <TIM_OC4_SetConfig+0x68>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a11      	ldr	r2, [pc, #68]	; (80031f0 <TIM_OC4_SetConfig+0xa8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d109      	bne.n	80031c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	019b      	lsls	r3, r3, #6
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	621a      	str	r2, [r3, #32]
}
 80031de:	bf00      	nop
 80031e0:	371c      	adds	r7, #28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40010000 	.word	0x40010000
 80031f0:	40010400 	.word	0x40010400

080031f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	f023 0201 	bic.w	r2, r3, #1
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800321e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f023 030a 	bic.w	r3, r3, #10
 8003230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4313      	orrs	r3, r2
 8003238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	621a      	str	r2, [r3, #32]
}
 8003246:	bf00      	nop
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003252:	b480      	push	{r7}
 8003254:	b087      	sub	sp, #28
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f023 0210 	bic.w	r2, r3, #16
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800327c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	031b      	lsls	r3, r3, #12
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800328e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	621a      	str	r2, [r3, #32]
}
 80032a6:	bf00      	nop
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b085      	sub	sp, #20
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f043 0307 	orr.w	r3, r3, #7
 80032d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	609a      	str	r2, [r3, #8]
}
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
 80032f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	021a      	lsls	r2, r3, #8
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	431a      	orrs	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4313      	orrs	r3, r2
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4313      	orrs	r3, r2
 8003314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	609a      	str	r2, [r3, #8]
}
 800331c:	bf00      	nop
 800331e:	371c      	adds	r7, #28
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f003 031f 	and.w	r3, r3, #31
 800333a:	2201      	movs	r2, #1
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a1a      	ldr	r2, [r3, #32]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	43db      	mvns	r3, r3
 800334a:	401a      	ands	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a1a      	ldr	r2, [r3, #32]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f003 031f 	and.w	r3, r3, #31
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	fa01 f303 	lsl.w	r3, r1, r3
 8003360:	431a      	orrs	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	621a      	str	r2, [r3, #32]
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003372:	b480      	push	{r7}
 8003374:	b085      	sub	sp, #20
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003386:	2302      	movs	r3, #2
 8003388:	e032      	b.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2202      	movs	r2, #2
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e03f      	b.n	80034b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f002 fc58 	bl	8005d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2224      	movs	r2, #36	; 0x24
 8003454:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	68d2      	ldr	r2, [r2, #12]
 8003462:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003466:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f829 	bl	80034c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	6912      	ldr	r2, [r2, #16]
 8003478:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800347c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	6952      	ldr	r2, [r2, #20]
 8003488:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800348c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	68d2      	ldr	r2, [r2, #12]
 8003498:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800349c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	6912      	ldr	r2, [r2, #16]
 80034d2:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	68d2      	ldr	r2, [r2, #12]
 80034da:	430a      	orrs	r2, r1
 80034dc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003504:	f023 030c 	bic.w	r3, r3, #12
 8003508:	68f9      	ldr	r1, [r7, #12]
 800350a:	430b      	orrs	r3, r1
 800350c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	6952      	ldr	r2, [r2, #20]
 8003518:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6992      	ldr	r2, [r2, #24]
 8003520:	430a      	orrs	r2, r1
 8003522:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800352c:	f040 80e4 	bne.w	80036f8 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4aab      	ldr	r2, [pc, #684]	; (80037e4 <UART_SetConfig+0x324>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d004      	beq.n	8003544 <UART_SetConfig+0x84>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4aaa      	ldr	r2, [pc, #680]	; (80037e8 <UART_SetConfig+0x328>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d16c      	bne.n	800361e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681c      	ldr	r4, [r3, #0]
 8003548:	f7fe fbf8 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 800354c:	4602      	mov	r2, r0
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	009a      	lsls	r2, r3, #2
 8003556:	441a      	add	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003562:	4aa2      	ldr	r2, [pc, #648]	; (80037ec <UART_SetConfig+0x32c>)
 8003564:	fba2 2303 	umull	r2, r3, r2, r3
 8003568:	095b      	lsrs	r3, r3, #5
 800356a:	011d      	lsls	r5, r3, #4
 800356c:	f7fe fbe6 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 8003570:	4602      	mov	r2, r0
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	009a      	lsls	r2, r3, #2
 800357a:	441a      	add	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	fbb2 f6f3 	udiv	r6, r2, r3
 8003586:	f7fe fbd9 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 800358a:	4602      	mov	r2, r0
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	009a      	lsls	r2, r3, #2
 8003594:	441a      	add	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a0:	4a92      	ldr	r2, [pc, #584]	; (80037ec <UART_SetConfig+0x32c>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	2264      	movs	r2, #100	; 0x64
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	1af3      	subs	r3, r6, r3
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	3332      	adds	r3, #50	; 0x32
 80035b4:	4a8d      	ldr	r2, [pc, #564]	; (80037ec <UART_SetConfig+0x32c>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035c2:	441d      	add	r5, r3
 80035c4:	f7fe fbba 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 80035c8:	4602      	mov	r2, r0
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	009a      	lsls	r2, r3, #2
 80035d2:	441a      	add	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	fbb2 f6f3 	udiv	r6, r2, r3
 80035de:	f7fe fbad 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 80035e2:	4602      	mov	r2, r0
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	009a      	lsls	r2, r3, #2
 80035ec:	441a      	add	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f8:	4a7c      	ldr	r2, [pc, #496]	; (80037ec <UART_SetConfig+0x32c>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	2264      	movs	r2, #100	; 0x64
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	1af3      	subs	r3, r6, r3
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	3332      	adds	r3, #50	; 0x32
 800360c:	4a77      	ldr	r2, [pc, #476]	; (80037ec <UART_SetConfig+0x32c>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	442b      	add	r3, r5
 800361a:	60a3      	str	r3, [r4, #8]
 800361c:	e154      	b.n	80038c8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681c      	ldr	r4, [r3, #0]
 8003622:	f7fe fb77 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 8003626:	4602      	mov	r2, r0
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	009a      	lsls	r2, r3, #2
 8003630:	441a      	add	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	fbb2 f3f3 	udiv	r3, r2, r3
 800363c:	4a6b      	ldr	r2, [pc, #428]	; (80037ec <UART_SetConfig+0x32c>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	011d      	lsls	r5, r3, #4
 8003646:	f7fe fb65 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 800364a:	4602      	mov	r2, r0
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	009a      	lsls	r2, r3, #2
 8003654:	441a      	add	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003660:	f7fe fb58 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 8003664:	4602      	mov	r2, r0
 8003666:	4613      	mov	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	009a      	lsls	r2, r3, #2
 800366e:	441a      	add	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	fbb2 f3f3 	udiv	r3, r2, r3
 800367a:	4a5c      	ldr	r2, [pc, #368]	; (80037ec <UART_SetConfig+0x32c>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	2264      	movs	r2, #100	; 0x64
 8003684:	fb02 f303 	mul.w	r3, r2, r3
 8003688:	1af3      	subs	r3, r6, r3
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	3332      	adds	r3, #50	; 0x32
 800368e:	4a57      	ldr	r2, [pc, #348]	; (80037ec <UART_SetConfig+0x32c>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800369c:	441d      	add	r5, r3
 800369e:	f7fe fb39 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 80036a2:	4602      	mov	r2, r0
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009a      	lsls	r2, r3, #2
 80036ac:	441a      	add	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80036b8:	f7fe fb2c 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 80036bc:	4602      	mov	r2, r0
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	009a      	lsls	r2, r3, #2
 80036c6:	441a      	add	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d2:	4a46      	ldr	r2, [pc, #280]	; (80037ec <UART_SetConfig+0x32c>)
 80036d4:	fba2 2303 	umull	r2, r3, r2, r3
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	2264      	movs	r2, #100	; 0x64
 80036dc:	fb02 f303 	mul.w	r3, r2, r3
 80036e0:	1af3      	subs	r3, r6, r3
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	3332      	adds	r3, #50	; 0x32
 80036e6:	4a41      	ldr	r2, [pc, #260]	; (80037ec <UART_SetConfig+0x32c>)
 80036e8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	442b      	add	r3, r5
 80036f4:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80036f6:	e0e7      	b.n	80038c8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a39      	ldr	r2, [pc, #228]	; (80037e4 <UART_SetConfig+0x324>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <UART_SetConfig+0x24c>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a38      	ldr	r2, [pc, #224]	; (80037e8 <UART_SetConfig+0x328>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d171      	bne.n	80037f0 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681c      	ldr	r4, [r3, #0]
 8003710:	f7fe fb14 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 8003714:	4602      	mov	r2, r0
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	009a      	lsls	r2, r3, #2
 800371e:	441a      	add	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	fbb2 f3f3 	udiv	r3, r2, r3
 800372a:	4a30      	ldr	r2, [pc, #192]	; (80037ec <UART_SetConfig+0x32c>)
 800372c:	fba2 2303 	umull	r2, r3, r2, r3
 8003730:	095b      	lsrs	r3, r3, #5
 8003732:	011d      	lsls	r5, r3, #4
 8003734:	f7fe fb02 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 8003738:	4602      	mov	r2, r0
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	009a      	lsls	r2, r3, #2
 8003742:	441a      	add	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	fbb2 f6f3 	udiv	r6, r2, r3
 800374e:	f7fe faf5 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 8003752:	4602      	mov	r2, r0
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	009a      	lsls	r2, r3, #2
 800375c:	441a      	add	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	fbb2 f3f3 	udiv	r3, r2, r3
 8003768:	4a20      	ldr	r2, [pc, #128]	; (80037ec <UART_SetConfig+0x32c>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	2264      	movs	r2, #100	; 0x64
 8003772:	fb02 f303 	mul.w	r3, r2, r3
 8003776:	1af3      	subs	r3, r6, r3
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	3332      	adds	r3, #50	; 0x32
 800377c:	4a1b      	ldr	r2, [pc, #108]	; (80037ec <UART_SetConfig+0x32c>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003788:	441d      	add	r5, r3
 800378a:	f7fe fad7 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 800378e:	4602      	mov	r2, r0
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	009a      	lsls	r2, r3, #2
 8003798:	441a      	add	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80037a4:	f7fe faca 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 80037a8:	4602      	mov	r2, r0
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	009a      	lsls	r2, r3, #2
 80037b2:	441a      	add	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80037be:	4a0b      	ldr	r2, [pc, #44]	; (80037ec <UART_SetConfig+0x32c>)
 80037c0:	fba2 2303 	umull	r2, r3, r2, r3
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	2264      	movs	r2, #100	; 0x64
 80037c8:	fb02 f303 	mul.w	r3, r2, r3
 80037cc:	1af3      	subs	r3, r6, r3
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	3332      	adds	r3, #50	; 0x32
 80037d2:	4a06      	ldr	r2, [pc, #24]	; (80037ec <UART_SetConfig+0x32c>)
 80037d4:	fba2 2303 	umull	r2, r3, r2, r3
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	442b      	add	r3, r5
 80037e0:	60a3      	str	r3, [r4, #8]
 80037e2:	e071      	b.n	80038c8 <UART_SetConfig+0x408>
 80037e4:	40011000 	.word	0x40011000
 80037e8:	40011400 	.word	0x40011400
 80037ec:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681c      	ldr	r4, [r3, #0]
 80037f4:	f7fe fa8e 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 80037f8:	4602      	mov	r2, r0
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	009a      	lsls	r2, r3, #2
 8003802:	441a      	add	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	fbb2 f3f3 	udiv	r3, r2, r3
 800380e:	4a30      	ldr	r2, [pc, #192]	; (80038d0 <UART_SetConfig+0x410>)
 8003810:	fba2 2303 	umull	r2, r3, r2, r3
 8003814:	095b      	lsrs	r3, r3, #5
 8003816:	011d      	lsls	r5, r3, #4
 8003818:	f7fe fa7c 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 800381c:	4602      	mov	r2, r0
 800381e:	4613      	mov	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	009a      	lsls	r2, r3, #2
 8003826:	441a      	add	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003832:	f7fe fa6f 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 8003836:	4602      	mov	r2, r0
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	009a      	lsls	r2, r3, #2
 8003840:	441a      	add	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	fbb2 f3f3 	udiv	r3, r2, r3
 800384c:	4a20      	ldr	r2, [pc, #128]	; (80038d0 <UART_SetConfig+0x410>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	2264      	movs	r2, #100	; 0x64
 8003856:	fb02 f303 	mul.w	r3, r2, r3
 800385a:	1af3      	subs	r3, r6, r3
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	3332      	adds	r3, #50	; 0x32
 8003860:	4a1b      	ldr	r2, [pc, #108]	; (80038d0 <UART_SetConfig+0x410>)
 8003862:	fba2 2303 	umull	r2, r3, r2, r3
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800386c:	441d      	add	r5, r3
 800386e:	f7fe fa51 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 8003872:	4602      	mov	r2, r0
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	009a      	lsls	r2, r3, #2
 800387c:	441a      	add	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	fbb2 f6f3 	udiv	r6, r2, r3
 8003888:	f7fe fa44 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 800388c:	4602      	mov	r2, r0
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	009a      	lsls	r2, r3, #2
 8003896:	441a      	add	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a2:	4a0b      	ldr	r2, [pc, #44]	; (80038d0 <UART_SetConfig+0x410>)
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	2264      	movs	r2, #100	; 0x64
 80038ac:	fb02 f303 	mul.w	r3, r2, r3
 80038b0:	1af3      	subs	r3, r6, r3
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	3332      	adds	r3, #50	; 0x32
 80038b6:	4a06      	ldr	r2, [pc, #24]	; (80038d0 <UART_SetConfig+0x410>)
 80038b8:	fba2 2303 	umull	r2, r3, r2, r3
 80038bc:	095b      	lsrs	r3, r3, #5
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	442b      	add	r3, r5
 80038c4:	60a3      	str	r3, [r4, #8]
}
 80038c6:	e7ff      	b.n	80038c8 <UART_SetConfig+0x408>
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038d0:	51eb851f 	.word	0x51eb851f

080038d4 <vLedStrip_Init>:
 */

#include "LED_Strip.h"
#include "Motor_Control.h"

void vLedStrip_Init(LedStrip_InitTypeDef* ledStrip_InitTypeDef) {
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  ledStrip_InitTypeDef->pivot = 0;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	729a      	strb	r2, [r3, #10]
  ledStrip_InitTypeDef->Led_StatusPin = 0;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	731a      	strb	r2, [r3, #12]
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <vLedStrip_ReadStatus>:

void vLedStrip_ReadStatus(LedStrip_InitTypeDef* LedStript) {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  if (NULL != LedStript)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d05e      	beq.n	80039c0 <vLedStrip_ReadStatus+0xcc>
  {
    LedStript->Led1_StatusPin = HAL_GPIO_ReadPin(Led1_Gpio, Led1_Pin);
 8003902:	2180      	movs	r1, #128	; 0x80
 8003904:	4830      	ldr	r0, [pc, #192]	; (80039c8 <vLedStrip_ReadStatus+0xd4>)
 8003906:	f7fd fd83 	bl	8001410 <HAL_GPIO_ReadPin>
 800390a:	4603      	mov	r3, r0
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	b2d9      	uxtb	r1, r3
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	7b13      	ldrb	r3, [r2, #12]
 8003916:	f361 0300 	bfi	r3, r1, #0, #1
 800391a:	7313      	strb	r3, [r2, #12]
    LedStript->Led2_StatusPin = HAL_GPIO_ReadPin(Led2_Gpio, Led2_Pin);
 800391c:	2140      	movs	r1, #64	; 0x40
 800391e:	482a      	ldr	r0, [pc, #168]	; (80039c8 <vLedStrip_ReadStatus+0xd4>)
 8003920:	f7fd fd76 	bl	8001410 <HAL_GPIO_ReadPin>
 8003924:	4603      	mov	r3, r0
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	b2d9      	uxtb	r1, r3
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	7b13      	ldrb	r3, [r2, #12]
 8003930:	f361 0341 	bfi	r3, r1, #1, #1
 8003934:	7313      	strb	r3, [r2, #12]
    LedStript->Led3_StatusPin = HAL_GPIO_ReadPin(Led3_Gpio, Led3_Pin);
 8003936:	2120      	movs	r1, #32
 8003938:	4823      	ldr	r0, [pc, #140]	; (80039c8 <vLedStrip_ReadStatus+0xd4>)
 800393a:	f7fd fd69 	bl	8001410 <HAL_GPIO_ReadPin>
 800393e:	4603      	mov	r3, r0
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	b2d9      	uxtb	r1, r3
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	7b13      	ldrb	r3, [r2, #12]
 800394a:	f361 0382 	bfi	r3, r1, #2, #1
 800394e:	7313      	strb	r3, [r2, #12]
    LedStript->Led4_StatusPin = HAL_GPIO_ReadPin(Led4_Gpio, Led4_Pin);
 8003950:	2110      	movs	r1, #16
 8003952:	481d      	ldr	r0, [pc, #116]	; (80039c8 <vLedStrip_ReadStatus+0xd4>)
 8003954:	f7fd fd5c 	bl	8001410 <HAL_GPIO_ReadPin>
 8003958:	4603      	mov	r3, r0
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	b2d9      	uxtb	r1, r3
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	7b13      	ldrb	r3, [r2, #12]
 8003964:	f361 03c3 	bfi	r3, r1, #3, #1
 8003968:	7313      	strb	r3, [r2, #12]
    LedStript->Led5_StatusPin = HAL_GPIO_ReadPin(Led5_Gpio, Led5_Pin);
 800396a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800396e:	4816      	ldr	r0, [pc, #88]	; (80039c8 <vLedStrip_ReadStatus+0xd4>)
 8003970:	f7fd fd4e 	bl	8001410 <HAL_GPIO_ReadPin>
 8003974:	4603      	mov	r3, r0
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	b2d9      	uxtb	r1, r3
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	7b13      	ldrb	r3, [r2, #12]
 8003980:	f361 1304 	bfi	r3, r1, #4, #1
 8003984:	7313      	strb	r3, [r2, #12]

    if (LedStript->Led_StatusPin != LedStript->history[LedStript->pivot])
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	7b1a      	ldrb	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	7a9b      	ldrb	r3, [r3, #10]
 800398e:	4619      	mov	r1, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	5c5b      	ldrb	r3, [r3, r1]
 8003994:	429a      	cmp	r2, r3
 8003996:	d013      	beq.n	80039c0 <vLedStrip_ReadStatus+0xcc>
    {
      LedStript->pivot++;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	7a9b      	ldrb	r3, [r3, #10]
 800399c:	3301      	adds	r3, #1
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	729a      	strb	r2, [r3, #10]
      if (LedStript->pivot >= size)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	7a9b      	ldrb	r3, [r3, #10]
 80039a8:	2b09      	cmp	r3, #9
 80039aa:	d902      	bls.n	80039b2 <vLedStrip_ReadStatus+0xbe>
      {
        LedStript->pivot = 0;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	729a      	strb	r2, [r3, #10]
      }
      LedStript->history[LedStript->pivot] = LedStript->Led_StatusPin;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	7a9b      	ldrb	r3, [r3, #10]
 80039b6:	461a      	mov	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	7b19      	ldrb	r1, [r3, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	5499      	strb	r1, [r3, r2]
    }
  }
}
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40021800 	.word	0x40021800

080039cc <vLed_control>:

LedStrip_Speed_InitTypeDef vLed_control(LedStrip_InitTypeDef* LedStript) {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  static LedStrip_Speed_InitTypeDef Motor;
//  if (!LedStript->MissLineError || !LedStript->Led3_StatusPin)
//  {
  switch (LedStript->Led_StatusPin)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	7b1b      	ldrb	r3, [r3, #12]
 80039d8:	2b1f      	cmp	r3, #31
 80039da:	f200 80d6 	bhi.w	8003b8a <vLed_control+0x1be>
 80039de:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <vLed_control+0x18>)
 80039e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e4:	08003bcb 	.word	0x08003bcb
 80039e8:	08003b8b 	.word	0x08003b8b
 80039ec:	08003b8b 	.word	0x08003b8b
 80039f0:	08003b8b 	.word	0x08003b8b
 80039f4:	08003b8b 	.word	0x08003b8b
 80039f8:	08003b8b 	.word	0x08003b8b
 80039fc:	08003b8b 	.word	0x08003b8b
 8003a00:	08003b77 	.word	0x08003b77
 8003a04:	08003b8b 	.word	0x08003b8b
 8003a08:	08003b8b 	.word	0x08003b8b
 8003a0c:	08003b8b 	.word	0x08003b8b
 8003a10:	08003b8b 	.word	0x08003b8b
 8003a14:	08003b8b 	.word	0x08003b8b
 8003a18:	08003b8b 	.word	0x08003b8b
 8003a1c:	08003b8b 	.word	0x08003b8b
 8003a20:	08003b63 	.word	0x08003b63
 8003a24:	08003b8b 	.word	0x08003b8b
 8003a28:	08003b8b 	.word	0x08003b8b
 8003a2c:	08003b8b 	.word	0x08003b8b
 8003a30:	08003b4f 	.word	0x08003b4f
 8003a34:	08003b8b 	.word	0x08003b8b
 8003a38:	08003b8b 	.word	0x08003b8b
 8003a3c:	08003b8b 	.word	0x08003b8b
 8003a40:	08003b3b 	.word	0x08003b3b
 8003a44:	08003b8b 	.word	0x08003b8b
 8003a48:	08003b27 	.word	0x08003b27
 8003a4c:	08003b8b 	.word	0x08003b8b
 8003a50:	08003b0d 	.word	0x08003b0d
 8003a54:	08003af9 	.word	0x08003af9
 8003a58:	08003ae5 	.word	0x08003ae5
 8003a5c:	08003ad1 	.word	0x08003ad1
 8003a60:	08003a65 	.word	0x08003a65
  {
  case LS_miss:
    LedStript->MissLineError = 1;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	72da      	strb	r2, [r3, #11]
    uint8_t TempPivot;
    uint8_t LastLine;
    TempPivot = LedStript->pivot - 1;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	7a9b      	ldrb	r3, [r3, #10]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
    if (TempPivot > size)
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	2b0a      	cmp	r3, #10
 8003a76:	d903      	bls.n	8003a80 <vLed_control+0xb4>
    {
      LastLine = LedStript->history[size - 1];
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	7a5b      	ldrb	r3, [r3, #9]
 8003a7c:	75fb      	strb	r3, [r7, #23]
 8003a7e:	e003      	b.n	8003a88 <vLed_control+0xbc>
    } else
    {
      LastLine = LedStript->history[TempPivot];
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	5cd3      	ldrb	r3, [r2, r3]
 8003a86:	75fb      	strb	r3, [r7, #23]
    }
    if (LastLine == LS_00001)
 8003a88:	7dfb      	ldrb	r3, [r7, #23]
 8003a8a:	2b1e      	cmp	r3, #30
 8003a8c:	d109      	bne.n	8003aa2 <vLed_control+0xd6>
    {
      Motor.LeftSpeed = 0;
 8003a8e:	4b5c      	ldr	r3, [pc, #368]	; (8003c00 <vLed_control+0x234>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	701a      	strb	r2, [r3, #0]
      Motor.RightSpeed = 0;
 8003a94:	4b5a      	ldr	r3, [pc, #360]	; (8003c00 <vLed_control+0x234>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	705a      	strb	r2, [r3, #1]
      Motor.Action = rotationInPlace_Right;
 8003a9a:	4b59      	ldr	r3, [pc, #356]	; (8003c00 <vLed_control+0x234>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	709a      	strb	r2, [r3, #2]
    {
      Motor.LeftSpeed = -3;
      Motor.RightSpeed = -3;
      Motor.Action = move_Back;
    }
    break;
 8003aa0:	e096      	b.n	8003bd0 <vLed_control+0x204>
    } else if (LastLine == LS_10000)
 8003aa2:	7dfb      	ldrb	r3, [r7, #23]
 8003aa4:	2b0f      	cmp	r3, #15
 8003aa6:	d109      	bne.n	8003abc <vLed_control+0xf0>
      Motor.LeftSpeed = 0;
 8003aa8:	4b55      	ldr	r3, [pc, #340]	; (8003c00 <vLed_control+0x234>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
      Motor.RightSpeed = 0;
 8003aae:	4b54      	ldr	r3, [pc, #336]	; (8003c00 <vLed_control+0x234>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	705a      	strb	r2, [r3, #1]
      Motor.Action = rotationInPlace_Left;
 8003ab4:	4b52      	ldr	r3, [pc, #328]	; (8003c00 <vLed_control+0x234>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	709a      	strb	r2, [r3, #2]
    break;
 8003aba:	e089      	b.n	8003bd0 <vLed_control+0x204>
      Motor.LeftSpeed = -3;
 8003abc:	4b50      	ldr	r3, [pc, #320]	; (8003c00 <vLed_control+0x234>)
 8003abe:	22fd      	movs	r2, #253	; 0xfd
 8003ac0:	701a      	strb	r2, [r3, #0]
      Motor.RightSpeed = -3;
 8003ac2:	4b4f      	ldr	r3, [pc, #316]	; (8003c00 <vLed_control+0x234>)
 8003ac4:	22fd      	movs	r2, #253	; 0xfd
 8003ac6:	705a      	strb	r2, [r3, #1]
      Motor.Action = move_Back;
 8003ac8:	4b4d      	ldr	r3, [pc, #308]	; (8003c00 <vLed_control+0x234>)
 8003aca:	2204      	movs	r2, #4
 8003acc:	709a      	strb	r2, [r3, #2]
    break;
 8003ace:	e07f      	b.n	8003bd0 <vLed_control+0x204>
  case LS_all:
    break;
  case LS_00001:
    Motor.LeftSpeed = -2;
 8003ad0:	4b4b      	ldr	r3, [pc, #300]	; (8003c00 <vLed_control+0x234>)
 8003ad2:	22fe      	movs	r2, #254	; 0xfe
 8003ad4:	701a      	strb	r2, [r3, #0]
    Motor.RightSpeed = -2;
 8003ad6:	4b4a      	ldr	r3, [pc, #296]	; (8003c00 <vLed_control+0x234>)
 8003ad8:	22fe      	movs	r2, #254	; 0xfe
 8003ada:	705a      	strb	r2, [r3, #1]
    Motor.Action = rotationInPlace_Right;
 8003adc:	4b48      	ldr	r3, [pc, #288]	; (8003c00 <vLed_control+0x234>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	709a      	strb	r2, [r3, #2]
    break;
 8003ae2:	e075      	b.n	8003bd0 <vLed_control+0x204>
  case LS_00010:
    Motor.LeftSpeed = 3;
 8003ae4:	4b46      	ldr	r3, [pc, #280]	; (8003c00 <vLed_control+0x234>)
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	701a      	strb	r2, [r3, #0]
    Motor.RightSpeed = -3;
 8003aea:	4b45      	ldr	r3, [pc, #276]	; (8003c00 <vLed_control+0x234>)
 8003aec:	22fd      	movs	r2, #253	; 0xfd
 8003aee:	705a      	strb	r2, [r3, #1]
    Motor.Action = move_Forward;
 8003af0:	4b43      	ldr	r3, [pc, #268]	; (8003c00 <vLed_control+0x234>)
 8003af2:	2205      	movs	r2, #5
 8003af4:	709a      	strb	r2, [r3, #2]

    break;
 8003af6:	e06b      	b.n	8003bd0 <vLed_control+0x204>
  case LS_00011:
    Motor.LeftSpeed = 2;
 8003af8:	4b41      	ldr	r3, [pc, #260]	; (8003c00 <vLed_control+0x234>)
 8003afa:	2202      	movs	r2, #2
 8003afc:	701a      	strb	r2, [r3, #0]
    Motor.RightSpeed = -5;
 8003afe:	4b40      	ldr	r3, [pc, #256]	; (8003c00 <vLed_control+0x234>)
 8003b00:	22fb      	movs	r2, #251	; 0xfb
 8003b02:	705a      	strb	r2, [r3, #1]
    Motor.Action = move_Forward;
 8003b04:	4b3e      	ldr	r3, [pc, #248]	; (8003c00 <vLed_control+0x234>)
 8003b06:	2205      	movs	r2, #5
 8003b08:	709a      	strb	r2, [r3, #2]
    break;
 8003b0a:	e061      	b.n	8003bd0 <vLed_control+0x204>
  case LS_00100:
    LedStript->MissLineError = 0;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	72da      	strb	r2, [r3, #11]
    Motor.LeftSpeed = 0;
 8003b12:	4b3b      	ldr	r3, [pc, #236]	; (8003c00 <vLed_control+0x234>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	701a      	strb	r2, [r3, #0]
    Motor.RightSpeed = 0;
 8003b18:	4b39      	ldr	r3, [pc, #228]	; (8003c00 <vLed_control+0x234>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	705a      	strb	r2, [r3, #1]
    Motor.Action = move_Forward;
 8003b1e:	4b38      	ldr	r3, [pc, #224]	; (8003c00 <vLed_control+0x234>)
 8003b20:	2205      	movs	r2, #5
 8003b22:	709a      	strb	r2, [r3, #2]
    break;
 8003b24:	e054      	b.n	8003bd0 <vLed_control+0x204>
  case LS_00110:
    Motor.LeftSpeed = 0;
 8003b26:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <vLed_control+0x234>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	701a      	strb	r2, [r3, #0]
    Motor.RightSpeed = -3;
 8003b2c:	4b34      	ldr	r3, [pc, #208]	; (8003c00 <vLed_control+0x234>)
 8003b2e:	22fd      	movs	r2, #253	; 0xfd
 8003b30:	705a      	strb	r2, [r3, #1]
    Motor.Action = move_Forward;
 8003b32:	4b33      	ldr	r3, [pc, #204]	; (8003c00 <vLed_control+0x234>)
 8003b34:	2205      	movs	r2, #5
 8003b36:	709a      	strb	r2, [r3, #2]
    break;
 8003b38:	e04a      	b.n	8003bd0 <vLed_control+0x204>
  case LS_01000:
    Motor.LeftSpeed = -3;
 8003b3a:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <vLed_control+0x234>)
 8003b3c:	22fd      	movs	r2, #253	; 0xfd
 8003b3e:	701a      	strb	r2, [r3, #0]
    Motor.RightSpeed = 3;
 8003b40:	4b2f      	ldr	r3, [pc, #188]	; (8003c00 <vLed_control+0x234>)
 8003b42:	2203      	movs	r2, #3
 8003b44:	705a      	strb	r2, [r3, #1]
    Motor.Action = move_Forward;
 8003b46:	4b2e      	ldr	r3, [pc, #184]	; (8003c00 <vLed_control+0x234>)
 8003b48:	2205      	movs	r2, #5
 8003b4a:	709a      	strb	r2, [r3, #2]
    break;
 8003b4c:	e040      	b.n	8003bd0 <vLed_control+0x204>
  case LS_01100:
    Motor.LeftSpeed = -3;
 8003b4e:	4b2c      	ldr	r3, [pc, #176]	; (8003c00 <vLed_control+0x234>)
 8003b50:	22fd      	movs	r2, #253	; 0xfd
 8003b52:	701a      	strb	r2, [r3, #0]
    Motor.RightSpeed = 0;
 8003b54:	4b2a      	ldr	r3, [pc, #168]	; (8003c00 <vLed_control+0x234>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	705a      	strb	r2, [r3, #1]
    Motor.Action = move_Forward;
 8003b5a:	4b29      	ldr	r3, [pc, #164]	; (8003c00 <vLed_control+0x234>)
 8003b5c:	2205      	movs	r2, #5
 8003b5e:	709a      	strb	r2, [r3, #2]
    break;
 8003b60:	e036      	b.n	8003bd0 <vLed_control+0x204>
  case LS_10000:
    Motor.LeftSpeed = -2;
 8003b62:	4b27      	ldr	r3, [pc, #156]	; (8003c00 <vLed_control+0x234>)
 8003b64:	22fe      	movs	r2, #254	; 0xfe
 8003b66:	701a      	strb	r2, [r3, #0]
    Motor.RightSpeed = -2;
 8003b68:	4b25      	ldr	r3, [pc, #148]	; (8003c00 <vLed_control+0x234>)
 8003b6a:	22fe      	movs	r2, #254	; 0xfe
 8003b6c:	705a      	strb	r2, [r3, #1]
    Motor.Action = rotationInPlace_Left;
 8003b6e:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <vLed_control+0x234>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	709a      	strb	r2, [r3, #2]
    break;
 8003b74:	e02c      	b.n	8003bd0 <vLed_control+0x204>
  case LS_11000:
    Motor.LeftSpeed = -5;
 8003b76:	4b22      	ldr	r3, [pc, #136]	; (8003c00 <vLed_control+0x234>)
 8003b78:	22fb      	movs	r2, #251	; 0xfb
 8003b7a:	701a      	strb	r2, [r3, #0]
    Motor.RightSpeed = 2;
 8003b7c:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <vLed_control+0x234>)
 8003b7e:	2202      	movs	r2, #2
 8003b80:	705a      	strb	r2, [r3, #1]
    Motor.Action = move_Forward;
 8003b82:	4b1f      	ldr	r3, [pc, #124]	; (8003c00 <vLed_control+0x234>)
 8003b84:	2205      	movs	r2, #5
 8003b86:	709a      	strb	r2, [r3, #2]
    break;
 8003b88:	e022      	b.n	8003bd0 <vLed_control+0x204>
  default:
    if (LedStript->Led_StatusPin == 0x10 || LedStript->Led_StatusPin == 0x18)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	7b1b      	ldrb	r3, [r3, #12]
 8003b8e:	2b10      	cmp	r3, #16
 8003b90:	d003      	beq.n	8003b9a <vLed_control+0x1ce>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	7b1b      	ldrb	r3, [r3, #12]
 8003b96:	2b18      	cmp	r3, #24
 8003b98:	d119      	bne.n	8003bce <vLed_control+0x202>
    {
      for (int var = 0; var < 15; ++var)
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	e00a      	b.n	8003bb6 <vLed_control+0x1ea>
      {
        HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ba4:	4817      	ldr	r0, [pc, #92]	; (8003c04 <vLed_control+0x238>)
 8003ba6:	f7fd fc64 	bl	8001472 <HAL_GPIO_TogglePin>
        HAL_Delay(5);
 8003baa:	2005      	movs	r0, #5
 8003bac:	f7fd f954 	bl	8000e58 <HAL_Delay>
      for (int var = 0; var < 15; ++var)
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b0e      	cmp	r3, #14
 8003bba:	ddf1      	ble.n	8003ba0 <vLed_control+0x1d4>
      }
      HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, SET);
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bc2:	4810      	ldr	r0, [pc, #64]	; (8003c04 <vLed_control+0x238>)
 8003bc4:	f7fd fc3c 	bl	8001440 <HAL_GPIO_WritePin>
    }
    break;
 8003bc8:	e001      	b.n	8003bce <vLed_control+0x202>
    break;
 8003bca:	bf00      	nop
 8003bcc:	e000      	b.n	8003bd0 <vLed_control+0x204>
    break;
 8003bce:	bf00      	nop
  }
//  }
  return Motor;
 8003bd0:	4a0b      	ldr	r2, [pc, #44]	; (8003c00 <vLed_control+0x234>)
 8003bd2:	f107 030c 	add.w	r3, r7, #12
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	4611      	mov	r1, r2
 8003bda:	8019      	strh	r1, [r3, #0]
 8003bdc:	3302      	adds	r3, #2
 8003bde:	0c12      	lsrs	r2, r2, #16
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	2300      	movs	r3, #0
 8003be4:	7b3a      	ldrb	r2, [r7, #12]
 8003be6:	f362 0307 	bfi	r3, r2, #0, #8
 8003bea:	7b7a      	ldrb	r2, [r7, #13]
 8003bec:	f362 230f 	bfi	r3, r2, #8, #8
 8003bf0:	7bba      	ldrb	r2, [r7, #14]
 8003bf2:	f362 4317 	bfi	r3, r2, #16, #8
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	2000008c 	.word	0x2000008c
 8003c04:	40020800 	.word	0x40020800

08003c08 <uGetCounterTim>:
 *  Created on: 29.03.2019
 *      Author: kkarp
 */
#include "Motor_Control.h"

uint16_t uGetCounterTim(TIM_TypeDef* tim) {
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  return tim->CNT;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	b29b      	uxth	r3, r3
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <vClearCounter>:

HAL_StatusTypeDef vClearCounter(TIM_TypeDef* tim) {
 8003c22:	b480      	push	{r7}
 8003c24:	b085      	sub	sp, #20
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef Status = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	73fb      	strb	r3, [r7, #15]
  if (NULL != tim)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d004      	beq.n	8003c3e <vClearCounter+0x1c>
  {
    tim->CNT = 0;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24
    Status = HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	73fb      	strb	r3, [r7, #15]
  }
  return Status;
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <vMotor_init>:

void vMotor_init(Motor_InitTypeDef* Motor_InitStruct1,
    Motor_InitTypeDef* Motor_InitStruct2) {
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  Motor_InitStruct1->Motor_GPIO_int1 = MotorLeft_GPIO_pin1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a20      	ldr	r2, [pc, #128]	; (8003cdc <vMotor_init+0x90>)
 8003c5a:	609a      	str	r2, [r3, #8]
  Motor_InitStruct1->Motor_GPIO_int2 = MotorLeft_GPIO_pin2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a1f      	ldr	r2, [pc, #124]	; (8003cdc <vMotor_init+0x90>)
 8003c60:	611a      	str	r2, [r3, #16]
  Motor_InitStruct1->Motor_Pin_int1 = MotorLeft_Pin1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003c68:	819a      	strh	r2, [r3, #12]
  Motor_InitStruct1->Motor_Pin_int2 = MotorLeft_Pin2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c70:	829a      	strh	r2, [r3, #20]
  Motor_InitStruct1->number_turns = 0;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	61da      	str	r2, [r3, #28]
  Motor_InitStruct1->speed = 0;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	759a      	strb	r2, [r3, #22]
  Motor_InitStruct1->Tim_Encoder = MotorLeft_Encoder;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a17      	ldr	r2, [pc, #92]	; (8003ce0 <vMotor_init+0x94>)
 8003c82:	601a      	str	r2, [r3, #0]
  Motor_InitStruct1->Tim_PWM = MotorLeft_PWM;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a17      	ldr	r2, [pc, #92]	; (8003ce4 <vMotor_init+0x98>)
 8003c88:	605a      	str	r2, [r3, #4]
  Motor_InitStruct1->clear_PID =0;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2020 	strb.w	r2, [r3, #32]


  Motor_InitStruct2->Motor_GPIO_int1 = MotorRight_GPIO_pin1;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	4a11      	ldr	r2, [pc, #68]	; (8003cdc <vMotor_init+0x90>)
 8003c96:	609a      	str	r2, [r3, #8]
  Motor_InitStruct2->Motor_GPIO_int2 = MotorRight_GPIO_pin2;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	4a10      	ldr	r2, [pc, #64]	; (8003cdc <vMotor_init+0x90>)
 8003c9c:	611a      	str	r2, [r3, #16]
  Motor_InitStruct2->Motor_Pin_int1 = MotorRight_Pin1;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ca4:	819a      	strh	r2, [r3, #12]
  Motor_InitStruct2->Motor_Pin_int2 = MotorRight_Pin2;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cac:	829a      	strh	r2, [r3, #20]
  Motor_InitStruct2->number_turns = 0;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	61da      	str	r2, [r3, #28]
  Motor_InitStruct2->speed = 0;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	759a      	strb	r2, [r3, #22]
  Motor_InitStruct2->Tim_Encoder = MotorRight_Encoder;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	4a0a      	ldr	r2, [pc, #40]	; (8003ce8 <vMotor_init+0x9c>)
 8003cbe:	601a      	str	r2, [r3, #0]
  Motor_InitStruct2->Tim_PWM = MotorRight_PWM;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <vMotor_init+0xa0>)
 8003cc4:	605a      	str	r2, [r3, #4]
  Motor_InitStruct2->clear_PID =0;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40021800 	.word	0x40021800
 8003ce0:	40000800 	.word	0x40000800
 8003ce4:	40001c00 	.word	0x40001c00
 8003ce8:	40010400 	.word	0x40010400
 8003cec:	40002000 	.word	0x40002000

08003cf0 <vMotor_Control>:

void vMotor_Control(Motor_InitTypeDef* motor, uint8_t eBridgeControl) {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	70fb      	strb	r3, [r7, #3]
  switch (eBridgeControl)
 8003cfc:	78fb      	ldrb	r3, [r7, #3]
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d862      	bhi.n	8003dc8 <vMotor_Control+0xd8>
 8003d02:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <vMotor_Control+0x18>)
 8003d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d08:	08003d19 	.word	0x08003d19
 8003d0c:	08003d47 	.word	0x08003d47
 8003d10:	08003d73 	.word	0x08003d73
 8003d14:	08003d9f 	.word	0x08003d9f
  {
  case BreakeHard:
    HAL_GPIO_WritePin(motor->Motor_GPIO_int1, motor->Motor_Pin_int1,
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6898      	ldr	r0, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	899b      	ldrh	r3, [r3, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	4619      	mov	r1, r3
 8003d24:	f7fd fb8c 	bl	8001440 <HAL_GPIO_WritePin>
        GPIO_PIN_RESET);
    HAL_GPIO_WritePin(motor->Motor_GPIO_int2, motor->Motor_Pin_int2,
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6918      	ldr	r0, [r3, #16]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8a9b      	ldrh	r3, [r3, #20]
 8003d30:	2200      	movs	r2, #0
 8003d32:	4619      	mov	r1, r3
 8003d34:	f7fd fb84 	bl	8001440 <HAL_GPIO_WritePin>
        GPIO_PIN_RESET);
    motor->Tim_PWM->CCR1 = motor->Tim_PWM->ARR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6852      	ldr	r2, [r2, #4]
 8003d40:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d42:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 8003d44:	e041      	b.n	8003dca <vMotor_Control+0xda>
  case Back:
    HAL_GPIO_WritePin(motor->Motor_GPIO_int1, motor->Motor_Pin_int1,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6898      	ldr	r0, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	899b      	ldrh	r3, [r3, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	4619      	mov	r1, r3
 8003d52:	f7fd fb75 	bl	8001440 <HAL_GPIO_WritePin>
        GPIO_PIN_RESET);
    HAL_GPIO_WritePin(motor->Motor_GPIO_int2, motor->Motor_Pin_int2,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6918      	ldr	r0, [r3, #16]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	8a9b      	ldrh	r3, [r3, #20]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	4619      	mov	r1, r3
 8003d62:	f7fd fb6d 	bl	8001440 <HAL_GPIO_WritePin>
        GPIO_PIN_SET);
    motor->Tim_PWM->CCR1 = motor->dutyPWM;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6992      	ldr	r2, [r2, #24]
 8003d6e:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 8003d70:	e02b      	b.n	8003dca <vMotor_Control+0xda>
  case Forward:
    HAL_GPIO_WritePin(motor->Motor_GPIO_int1, motor->Motor_Pin_int1,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6898      	ldr	r0, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	899b      	ldrh	r3, [r3, #12]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f7fd fb5f 	bl	8001440 <HAL_GPIO_WritePin>
        GPIO_PIN_SET);
    HAL_GPIO_WritePin(motor->Motor_GPIO_int2, motor->Motor_Pin_int2,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6918      	ldr	r0, [r3, #16]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	8a9b      	ldrh	r3, [r3, #20]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f7fd fb57 	bl	8001440 <HAL_GPIO_WritePin>
        GPIO_PIN_RESET);
    motor->Tim_PWM->CCR1 = motor->dutyPWM;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6992      	ldr	r2, [r2, #24]
 8003d9a:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 8003d9c:	e015      	b.n	8003dca <vMotor_Control+0xda>
  case BreakeSoft:
    HAL_GPIO_WritePin(motor->Motor_GPIO_int1, motor->Motor_Pin_int1,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6898      	ldr	r0, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	899b      	ldrh	r3, [r3, #12]
 8003da6:	2201      	movs	r2, #1
 8003da8:	4619      	mov	r1, r3
 8003daa:	f7fd fb49 	bl	8001440 <HAL_GPIO_WritePin>
        GPIO_PIN_SET);
    HAL_GPIO_WritePin(motor->Motor_GPIO_int2, motor->Motor_Pin_int2,
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6918      	ldr	r0, [r3, #16]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	8a9b      	ldrh	r3, [r3, #20]
 8003db6:	2201      	movs	r2, #1
 8003db8:	4619      	mov	r1, r3
 8003dba:	f7fd fb41 	bl	8001440 <HAL_GPIO_WritePin>
        GPIO_PIN_SET);
    motor->Tim_PWM->CCR1 = 0;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 8003dc6:	e000      	b.n	8003dca <vMotor_Control+0xda>
  default:
    break;
 8003dc8:	bf00      	nop
  }
}
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop

08003dd4 <vMotor_SetPWM>:

void vMotor_SetPWM(Motor_InitTypeDef* motor, uint8_t dutyPWM) {
 8003dd4:	b590      	push	{r4, r7, lr}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	70fb      	strb	r3, [r7, #3]
  motor->dutyPWM = (motor->Tim_PWM->ARR * dutyPWM) / 100.0;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de6:	78fa      	ldrb	r2, [r7, #3]
 8003de8:	fb02 f303 	mul.w	r3, r2, r3
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fc fb91 	bl	8000514 <__aeabi_ui2d>
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <vMotor_SetPWM+0x4c>)
 8003df8:	f7fc fd2c 	bl	8000854 <__aeabi_ddiv>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	460c      	mov	r4, r1
 8003e00:	4618      	mov	r0, r3
 8003e02:	4621      	mov	r1, r4
 8003e04:	f7fc fe0e 	bl	8000a24 <__aeabi_d2uiz>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	619a      	str	r2, [r3, #24]
  motor->Tim_PWM->CCR1 = motor->dutyPWM;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6992      	ldr	r2, [r2, #24]
 8003e16:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd90      	pop	{r4, r7, pc}
 8003e20:	40590000 	.word	0x40590000

08003e24 <vMotorPID_init>:

void vMotorPID_init(MotorPID_InitTypeDef* PID1, MotorPID_InitTypeDef* PID2) {
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  PID1->e_last = 0;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	611a      	str	r2, [r3, #16]
  PID1->e_sum = 0;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	829a      	strh	r2, [r3, #20]
  PID1->e_sumMax = MaxPIDki;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a16      	ldr	r2, [pc, #88]	; (8003e98 <vMotorPID_init+0x74>)
 8003e40:	619a      	str	r2, [r3, #24]
  PID1->kp = KpValue1;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a15      	ldr	r2, [pc, #84]	; (8003e9c <vMotorPID_init+0x78>)
 8003e46:	601a      	str	r2, [r3, #0]
  PID1->ki = KiValue1;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003e4e:	605a      	str	r2, [r3, #4]
  PID1->kd = KdValue1;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a13      	ldr	r2, [pc, #76]	; (8003ea0 <vMotorPID_init+0x7c>)
 8003e54:	609a      	str	r2, [r3, #8]
  PID1->ValueTask = 90;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a12      	ldr	r2, [pc, #72]	; (8003ea4 <vMotorPID_init+0x80>)
 8003e5a:	61da      	str	r2, [r3, #28]

  PID2->e_last = 0;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	611a      	str	r2, [r3, #16]
  PID2->e_sum = 0;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2200      	movs	r2, #0
 8003e68:	829a      	strh	r2, [r3, #20]
  PID2->e_sumMax = MaxPIDki;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	4a0a      	ldr	r2, [pc, #40]	; (8003e98 <vMotorPID_init+0x74>)
 8003e6e:	619a      	str	r2, [r3, #24]
  PID2->kp = KpValue2;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	4a0a      	ldr	r2, [pc, #40]	; (8003e9c <vMotorPID_init+0x78>)
 8003e74:	601a      	str	r2, [r3, #0]
  PID2->ki = KiValue2;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003e7c:	605a      	str	r2, [r3, #4]
  PID2->kd = KdValue2;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	4a07      	ldr	r2, [pc, #28]	; (8003ea0 <vMotorPID_init+0x7c>)
 8003e82:	609a      	str	r2, [r3, #8]
  PID2->ValueTask = 90;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	4a07      	ldr	r2, [pc, #28]	; (8003ea4 <vMotorPID_init+0x80>)
 8003e88:	61da      	str	r2, [r3, #28]
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	461c4000 	.word	0x461c4000
 8003e9c:	40400000 	.word	0x40400000
 8003ea0:	bcf5c28f 	.word	0xbcf5c28f
 8003ea4:	42b40000 	.word	0x42b40000

08003ea8 <vMotorPID_Control>:

void vMotorPID_Control(MotorPID_InitTypeDef* MotorPID, Motor_InitTypeDef* Motor) {
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]

  if(Motor->clear_PID == 1)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d106      	bne.n	8003eca <vMotorPID_Control+0x22>
  {
    Motor->clear_PID = 0;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2020 	strb.w	r2, [r3, #32]
    MotorPID->e_sum = 0;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	829a      	strh	r2, [r3, #20]
  }

  uint16_t encoderCounter = uGetCounterTim(Motor->Tim_Encoder);
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff fe9a 	bl	8003c08 <uGetCounterTim>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	82fb      	strh	r3, [r7, #22]
  if (encoderCounter < 500)
 8003ed8:	8afb      	ldrh	r3, [r7, #22]
 8003eda:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ede:	d20d      	bcs.n	8003efc <vMotorPID_Control+0x54>
  {
    MotorPID->e = MotorPID->ValueTask - encoderCounter;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	ed93 7a07 	vldr	s14, [r3, #28]
 8003ee6:	8afb      	ldrh	r3, [r7, #22]
 8003ee8:	ee07 3a90 	vmov	s15, r3
 8003eec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	edc3 7a03 	vstr	s15, [r3, #12]
 8003efa:	e00e      	b.n	8003f1a <vMotorPID_Control+0x72>
  } else
  {
    MotorPID->e = MotorPID->ValueTask - (1000 - encoderCounter);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	ed93 7a07 	vldr	s14, [r3, #28]
 8003f02:	8afb      	ldrh	r3, [r7, #22]
 8003f04:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8003f08:	ee07 3a90 	vmov	s15, r3
 8003f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	edc3 7a03 	vstr	s15, [r3, #12]
  }
  MotorPID->e_sum += MotorPID->e;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8a9b      	ldrh	r3, [r3, #20]
 8003f1e:	ee07 3a90 	vmov	s15, r3
 8003f22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f34:	edc7 7a01 	vstr	s15, [r7, #4]
 8003f38:	88bb      	ldrh	r3, [r7, #4]
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	829a      	strh	r2, [r3, #20]
  if (MotorPID->e_sum > MotorPID->e_sumMax)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8a9b      	ldrh	r3, [r3, #20]
 8003f44:	ee07 3a90 	vmov	s15, r3
 8003f48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003f52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5a:	dd0a      	ble.n	8003f72 <vMotorPID_Control+0xca>
    MotorPID->e_sum = MotorPID->e_sumMax;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f66:	edc7 7a01 	vstr	s15, [r7, #4]
 8003f6a:	88bb      	ldrh	r3, [r7, #4]
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	829a      	strh	r2, [r3, #20]

  MotorPID->ExecutionValue = MotorPID->kp * MotorPID->e
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	ed93 7a00 	vldr	s14, [r3]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f7e:	ee27 7a27 	vmul.f32	s14, s14, s15
      + MotorPID->ki * MotorPID->e_sum
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	edd3 6a01 	vldr	s13, [r3, #4]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8a9b      	ldrh	r3, [r3, #20]
 8003f8c:	ee07 3a90 	vmov	s15, r3
 8003f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f98:	ee37 7a27 	vadd.f32	s14, s14, s15
      + MotorPID->kd * (MotorPID->e - MotorPID->e_last);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	ed93 6a03 	vldr	s12, [r3, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	edd3 7a04 	vldr	s15, [r3, #16]
 8003fae:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
  MotorPID->ExecutionValue = MotorPID->kp * MotorPID->e
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	edc3 7a08 	vstr	s15, [r3, #32]

  if (MotorPID->ValueTask == 0)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	edd3 7a07 	vldr	s15, [r3, #28]
 8003fc6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fce:	d106      	bne.n	8003fde <vMotorPID_Control+0x136>
  {
    MotorPID->e_sum = 0;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	829a      	strh	r2, [r3, #20]
    MotorPID->ExecutionValue = 0;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	621a      	str	r2, [r3, #32]
  }
}
 8003fde:	bf00      	nop
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <vMotorAction_LedStrip>:

void vMotorAction_LedStrip(Motor_InitTypeDef* LeftMotor,
    Motor_InitTypeDef* RightMotor, uint8_t action) {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	71fb      	strb	r3, [r7, #7]
  switch (action)
 8003ff6:	79fb      	ldrb	r3, [r7, #7]
 8003ff8:	2b05      	cmp	r3, #5
 8003ffa:	d845      	bhi.n	8004088 <vMotorAction_LedStrip+0xa0>
 8003ffc:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <vMotorAction_LedStrip+0x1c>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	0800401d 	.word	0x0800401d
 8004008:	0800402f 	.word	0x0800402f
 800400c:	08004041 	.word	0x08004041
 8004010:	08004053 	.word	0x08004053
 8004014:	08004065 	.word	0x08004065
 8004018:	08004077 	.word	0x08004077
  {
  case rotationInPlace_Left:
    vMotor_Control(LeftMotor, Back);
 800401c:	2101      	movs	r1, #1
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f7ff fe66 	bl	8003cf0 <vMotor_Control>
    vMotor_Control(RightMotor, Forward);
 8004024:	2102      	movs	r1, #2
 8004026:	68b8      	ldr	r0, [r7, #8]
 8004028:	f7ff fe62 	bl	8003cf0 <vMotor_Control>
    break;
 800402c:	e02d      	b.n	800408a <vMotorAction_LedStrip+0xa2>
  case rotationInPlace_Right:
    vMotor_Control(LeftMotor, Forward);
 800402e:	2102      	movs	r1, #2
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f7ff fe5d 	bl	8003cf0 <vMotor_Control>
    vMotor_Control(RightMotor, Back);
 8004036:	2101      	movs	r1, #1
 8004038:	68b8      	ldr	r0, [r7, #8]
 800403a:	f7ff fe59 	bl	8003cf0 <vMotor_Control>
    break;
 800403e:	e024      	b.n	800408a <vMotorAction_LedStrip+0xa2>
  case turn_Left:
    vMotor_Control(LeftMotor, BreakeSoft);
 8004040:	2103      	movs	r1, #3
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f7ff fe54 	bl	8003cf0 <vMotor_Control>
    vMotor_Control(RightMotor, Forward);
 8004048:	2102      	movs	r1, #2
 800404a:	68b8      	ldr	r0, [r7, #8]
 800404c:	f7ff fe50 	bl	8003cf0 <vMotor_Control>
    break;
 8004050:	e01b      	b.n	800408a <vMotorAction_LedStrip+0xa2>
  case turn_Right:
    vMotor_Control(LeftMotor, Forward);
 8004052:	2102      	movs	r1, #2
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f7ff fe4b 	bl	8003cf0 <vMotor_Control>
    vMotor_Control(RightMotor, BreakeSoft);
 800405a:	2103      	movs	r1, #3
 800405c:	68b8      	ldr	r0, [r7, #8]
 800405e:	f7ff fe47 	bl	8003cf0 <vMotor_Control>
    break;
 8004062:	e012      	b.n	800408a <vMotorAction_LedStrip+0xa2>
  case move_Back:
    vMotor_Control(LeftMotor, Back);
 8004064:	2101      	movs	r1, #1
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f7ff fe42 	bl	8003cf0 <vMotor_Control>
    vMotor_Control(RightMotor, Back);
 800406c:	2101      	movs	r1, #1
 800406e:	68b8      	ldr	r0, [r7, #8]
 8004070:	f7ff fe3e 	bl	8003cf0 <vMotor_Control>
    break;
 8004074:	e009      	b.n	800408a <vMotorAction_LedStrip+0xa2>
  case move_Forward:
    vMotor_Control(LeftMotor, Forward);
 8004076:	2102      	movs	r1, #2
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f7ff fe39 	bl	8003cf0 <vMotor_Control>
    vMotor_Control(RightMotor, Forward);
 800407e:	2102      	movs	r1, #2
 8004080:	68b8      	ldr	r0, [r7, #8]
 8004082:	f7ff fe35 	bl	8003cf0 <vMotor_Control>
    break;
 8004086:	e000      	b.n	800408a <vMotorAction_LedStrip+0xa2>
  default:
    break;
 8004088:	bf00      	nop
  }
}
 800408a:	bf00      	nop
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop

08004094 <MFRC522_CS_RESET>:

extern SPI_HandleTypeDef hspi2; /* extern hspi2 is in spi.h file */


void MFRC522_CS_RESET()
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_RFID_CS_GPIO_Port, SPI_RFID_CS_Pin, GPIO_PIN_RESET);
 8004098:	2200      	movs	r2, #0
 800409a:	2102      	movs	r1, #2
 800409c:	4802      	ldr	r0, [pc, #8]	; (80040a8 <MFRC522_CS_RESET+0x14>)
 800409e:	f7fd f9cf 	bl	8001440 <HAL_GPIO_WritePin>
}
 80040a2:	bf00      	nop
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40020400 	.word	0x40020400

080040ac <MFRC522_CS_SET>:

void MFRC522_CS_SET()
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_RFID_CS_GPIO_Port, SPI_RFID_CS_Pin, GPIO_PIN_SET);
 80040b0:	2201      	movs	r2, #1
 80040b2:	2102      	movs	r1, #2
 80040b4:	4802      	ldr	r0, [pc, #8]	; (80040c0 <MFRC522_CS_SET+0x14>)
 80040b6:	f7fd f9c3 	bl	8001440 <HAL_GPIO_WritePin>
}
 80040ba:	bf00      	nop
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40020400 	.word	0x40020400

080040c4 <SPI1SendByte>:

uint8_t SPI1SendByte(uint8_t data)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	4603      	mov	r3, r0
 80040cc:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];

	writeCommand[0] = data;
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &writeCommand,
 80040d2:	f107 0208 	add.w	r2, r7, #8
 80040d6:	f107 010c 	add.w	r1, r7, #12
 80040da:	230a      	movs	r3, #10
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	2301      	movs	r3, #1
 80040e0:	4803      	ldr	r0, [pc, #12]	; (80040f0 <SPI1SendByte+0x2c>)
 80040e2:	f7fd ffd4 	bl	800208e <HAL_SPI_TransmitReceive>
			(uint8_t*) &readValue, 1, 10);
	return readValue[0];
 80040e6:	7a3b      	ldrb	r3, [r7, #8]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	200005a0 	.word	0x200005a0

080040f4 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	460a      	mov	r2, r1
 80040fe:	71fb      	strb	r3, [r7, #7]
 8004100:	4613      	mov	r3, r2
 8004102:	71bb      	strb	r3, [r7, #6]
	MFRC522_CS_RESET();
 8004104:	f7ff ffc6 	bl	8004094 <MFRC522_CS_RESET>
	SPI1SendByte(address);
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff ffda 	bl	80040c4 <SPI1SendByte>
	SPI1SendByte(value);
 8004110:	79bb      	ldrb	r3, [r7, #6]
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff ffd6 	bl	80040c4 <SPI1SendByte>
	MFRC522_CS_SET();
 8004118:	f7ff ffc8 	bl	80040ac <MFRC522_CS_SET>
}
 800411c:	bf00      	nop
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	MFRC522_CS_RESET();
 800412e:	f7ff ffb1 	bl	8004094 <MFRC522_CS_RESET>
	SPI1SendByte(address);
 8004132:	79fb      	ldrb	r3, [r7, #7]
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff ffc5 	bl	80040c4 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 800413a:	2000      	movs	r0, #0
 800413c:	f7ff ffc2 	bl	80040c4 <SPI1SendByte>
 8004140:	4603      	mov	r3, r0
 8004142:	73fb      	strb	r3, [r7, #15]
	MFRC522_CS_SET();
 8004144:	f7ff ffb2 	bl	80040ac <MFRC522_CS_SET>
	return val;
 8004148:	7bfb      	ldrb	r3, [r7, #15]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b082      	sub	sp, #8
 8004156:	af00      	add	r7, sp, #0
 8004158:	4603      	mov	r3, r0
 800415a:	460a      	mov	r2, r1
 800415c:	71fb      	strb	r3, [r7, #7]
 800415e:	4613      	mov	r3, r2
 8004160:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;						// Address format: 0XXXXXX0
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800416c:	71fb      	strb	r3, [r7, #7]
	SPI1_WriteReg(addr, val);
 800416e:	79ba      	ldrb	r2, [r7, #6]
 8004170:	79fb      	ldrb	r3, [r7, #7]
 8004172:	4611      	mov	r1, r2
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff ffbd 	bl	80040f4 <SPI1_WriteReg>
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b084      	sub	sp, #16
 8004186:	af00      	add	r7, sp, #0
 8004188:	4603      	mov	r3, r0
 800418a:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	b25b      	sxtb	r3, r3
 8004192:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004196:	b25b      	sxtb	r3, r3
 8004198:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800419c:	b25b      	sxtb	r3, r3
 800419e:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff ffbe 	bl	8004124 <SPI1_ReadReg>
 80041a8:	4603      	mov	r3, r0
 80041aa:	73fb      	strb	r3, [r7, #15]
	return val;
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);		// Find cards, return card type
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	2026      	movs	r0, #38	; 0x26
 80041c2:	f000 f849 	bl	8004258 <MFRC522_Request>
 80041c6:	4603      	mov	r3, r0
 80041c8:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK)
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d104      	bne.n	80041da <MFRC522_Check+0x24>
		status = MFRC522_Anticoll(id);  // Card detected. Anti-collision, return card serial number 4 bytes
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f935 	bl	8004440 <MFRC522_Anticoll>
 80041d6:	4603      	mov	r3, r0
 80041d8:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();																// Command card into hibernation
 80041da:	f000 f9f8 	bl	80045ce <MFRC522_Halt>
	return status;
 80041de:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <MFRC522_SetBitMask>:
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	460a      	mov	r2, r1
 80041f2:	71fb      	strb	r3, [r7, #7]
 80041f4:	4613      	mov	r3, r2
 80041f6:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff ffc1 	bl	8004182 <MFRC522_ReadRegister>
 8004200:	4603      	mov	r3, r0
 8004202:	461a      	mov	r2, r3
 8004204:	79bb      	ldrb	r3, [r7, #6]
 8004206:	4313      	orrs	r3, r2
 8004208:	b2da      	uxtb	r2, r3
 800420a:	79fb      	ldrb	r3, [r7, #7]
 800420c:	4611      	mov	r1, r2
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff ff9f 	bl	8004152 <MFRC522_WriteRegister>
}
 8004214:	bf00      	nop
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	460a      	mov	r2, r1
 8004226:	71fb      	strb	r3, [r7, #7]
 8004228:	4613      	mov	r3, r2
 800422a:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 800422c:	79fb      	ldrb	r3, [r7, #7]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff ffa7 	bl	8004182 <MFRC522_ReadRegister>
 8004234:	4603      	mov	r3, r0
 8004236:	b25a      	sxtb	r2, r3
 8004238:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800423c:	43db      	mvns	r3, r3
 800423e:	b25b      	sxtb	r3, r3
 8004240:	4013      	ands	r3, r2
 8004242:	b25b      	sxtb	r3, r3
 8004244:	b2da      	uxtb	r2, r3
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	4611      	mov	r1, r2
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff ff81 	bl	8004152 <MFRC522_WriteRegister>
}
 8004250:	bf00      	nop
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af02      	add	r7, sp, #8
 800425e:	4603      	mov	r3, r0
 8004260:	6039      	str	r1, [r7, #0]
 8004262:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t backBits;																	// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);	// TxLastBists = BitFramingReg[2..0]
 8004264:	2107      	movs	r1, #7
 8004266:	200d      	movs	r0, #13
 8004268:	f7ff ff73 	bl	8004152 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	79fa      	ldrb	r2, [r7, #7]
 8004270:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8004272:	f107 030c 	add.w	r3, r7, #12
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2201      	movs	r2, #1
 800427c:	6839      	ldr	r1, [r7, #0]
 800427e:	200c      	movs	r0, #12
 8004280:	f000 f80f 	bl	80042a2 <MFRC522_ToCard>
 8004284:	4603      	mov	r3, r0
 8004286:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10))
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d102      	bne.n	8004294 <MFRC522_Request+0x3c>
 800428e:	89bb      	ldrh	r3, [r7, #12]
 8004290:	2b10      	cmp	r3, #16
 8004292:	d001      	beq.n	8004298 <MFRC522_Request+0x40>
		status = MI_ERR;
 8004294:	2302      	movs	r3, #2
 8004296:	73fb      	strb	r3, [r7, #15]
	return status;
 8004298:	7bfb      	ldrb	r3, [r7, #15]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen,
		uint8_t* backData, uint16_t* backLen)
{
 80042a2:	b590      	push	{r4, r7, lr}
 80042a4:	b087      	sub	sp, #28
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607b      	str	r3, [r7, #4]
 80042ac:	4603      	mov	r3, r0
 80042ae:	73fb      	strb	r3, [r7, #15]
 80042b0:	4613      	mov	r3, r2
 80042b2:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 80042b4:	2302      	movs	r3, #2
 80042b6:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 80042b8:	2300      	movs	r3, #0
 80042ba:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 80042bc:	2300      	movs	r3, #0
 80042be:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command)
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	2b0c      	cmp	r3, #12
 80042c4:	d007      	beq.n	80042d6 <MFRC522_ToCard+0x34>
 80042c6:	2b0e      	cmp	r3, #14
 80042c8:	d000      	beq.n	80042cc <MFRC522_ToCard+0x2a>
		irqEn = 0x77;
		waitIRq = 0x30;
		break;
	}
	default:
		break;
 80042ca:	e009      	b.n	80042e0 <MFRC522_ToCard+0x3e>
		irqEn = 0x12;
 80042cc:	2312      	movs	r3, #18
 80042ce:	75bb      	strb	r3, [r7, #22]
		waitIRq = 0x10;
 80042d0:	2310      	movs	r3, #16
 80042d2:	757b      	strb	r3, [r7, #21]
		break;
 80042d4:	e004      	b.n	80042e0 <MFRC522_ToCard+0x3e>
		irqEn = 0x77;
 80042d6:	2377      	movs	r3, #119	; 0x77
 80042d8:	75bb      	strb	r3, [r7, #22]
		waitIRq = 0x30;
 80042da:	2330      	movs	r3, #48	; 0x30
 80042dc:	757b      	strb	r3, [r7, #21]
		break;
 80042de:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80042e0:	7dbb      	ldrb	r3, [r7, #22]
 80042e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	4619      	mov	r1, r3
 80042ea:	2002      	movs	r0, #2
 80042ec:	f7ff ff31 	bl	8004152 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 80042f0:	2180      	movs	r1, #128	; 0x80
 80042f2:	2004      	movs	r0, #4
 80042f4:	f7ff ff92 	bl	800421c <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 80042f8:	2180      	movs	r1, #128	; 0x80
 80042fa:	200a      	movs	r0, #10
 80042fc:	f7ff ff74 	bl	80041e8 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8004300:	2100      	movs	r1, #0
 8004302:	2001      	movs	r0, #1
 8004304:	f7ff ff25 	bl	8004152 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++)
 8004308:	2300      	movs	r3, #0
 800430a:	827b      	strh	r3, [r7, #18]
 800430c:	e00a      	b.n	8004324 <MFRC522_ToCard+0x82>
		MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 800430e:	8a7b      	ldrh	r3, [r7, #18]
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	4413      	add	r3, r2
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	4619      	mov	r1, r3
 8004318:	2009      	movs	r0, #9
 800431a:	f7ff ff1a 	bl	8004152 <MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++)
 800431e:	8a7b      	ldrh	r3, [r7, #18]
 8004320:	3301      	adds	r3, #1
 8004322:	827b      	strh	r3, [r7, #18]
 8004324:	7bbb      	ldrb	r3, [r7, #14]
 8004326:	b29b      	uxth	r3, r3
 8004328:	8a7a      	ldrh	r2, [r7, #18]
 800432a:	429a      	cmp	r2, r3
 800432c:	d3ef      	bcc.n	800430e <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 800432e:	7bfb      	ldrb	r3, [r7, #15]
 8004330:	4619      	mov	r1, r3
 8004332:	2001      	movs	r0, #1
 8004334:	f7ff ff0d 	bl	8004152 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE)
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	2b0c      	cmp	r3, #12
 800433c:	d103      	bne.n	8004346 <MFRC522_ToCard+0xa4>
		MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);	// StartSend=1,transmission of data starts
 800433e:	2180      	movs	r1, #128	; 0x80
 8004340:	200d      	movs	r0, #13
 8004342:	f7ff ff51 	bl	80041e8 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;  // i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8004346:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800434a:	827b      	strh	r3, [r7, #18]
	do
	{
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800434c:	2004      	movs	r0, #4
 800434e:	f7ff ff18 	bl	8004182 <MFRC522_ReadRegister>
 8004352:	4603      	mov	r3, r0
 8004354:	753b      	strb	r3, [r7, #20]
		i--;
 8004356:	8a7b      	ldrh	r3, [r7, #18]
 8004358:	3b01      	subs	r3, #1
 800435a:	827b      	strh	r3, [r7, #18]
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 800435c:	8a7b      	ldrh	r3, [r7, #18]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <MFRC522_ToCard+0xd6>
 8004362:	7d3b      	ldrb	r3, [r7, #20]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d105      	bne.n	8004378 <MFRC522_ToCard+0xd6>
 800436c:	7d3a      	ldrb	r2, [r7, #20]
 800436e:	7d7b      	ldrb	r3, [r7, #21]
 8004370:	4013      	ands	r3, r2
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0e9      	beq.n	800434c <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);						// StartSend=0
 8004378:	2180      	movs	r1, #128	; 0x80
 800437a:	200d      	movs	r0, #13
 800437c:	f7ff ff4e 	bl	800421c <MFRC522_ClearBitMask>

	if (i != 0)
 8004380:	8a7b      	ldrh	r3, [r7, #18]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d057      	beq.n	8004436 <MFRC522_ToCard+0x194>
	{
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B))
 8004386:	2006      	movs	r0, #6
 8004388:	f7ff fefb 	bl	8004182 <MFRC522_ReadRegister>
 800438c:	4603      	mov	r3, r0
 800438e:	f003 031b 	and.w	r3, r3, #27
 8004392:	2b00      	cmp	r3, #0
 8004394:	d14d      	bne.n	8004432 <MFRC522_ToCard+0x190>
		{
			status = MI_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01)
 800439a:	7d3a      	ldrb	r2, [r7, #20]
 800439c:	7dbb      	ldrb	r3, [r7, #22]
 800439e:	4013      	ands	r3, r2
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE)
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	2b0c      	cmp	r3, #12
 80043b2:	d140      	bne.n	8004436 <MFRC522_ToCard+0x194>
			{
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 80043b4:	200a      	movs	r0, #10
 80043b6:	f7ff fee4 	bl	8004182 <MFRC522_ReadRegister>
 80043ba:	4603      	mov	r3, r0
 80043bc:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 80043be:	200c      	movs	r0, #12
 80043c0:	f7ff fedf 	bl	8004182 <MFRC522_ReadRegister>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	747b      	strb	r3, [r7, #17]
				if (lastBits)
 80043cc:	7c7b      	ldrb	r3, [r7, #17]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00b      	beq.n	80043ea <MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 80043d2:	7d3b      	ldrb	r3, [r7, #20]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	b29a      	uxth	r2, r3
 80043dc:	7c7b      	ldrb	r3, [r7, #17]
 80043de:	b29b      	uxth	r3, r3
 80043e0:	4413      	add	r3, r2
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	801a      	strh	r2, [r3, #0]
 80043e8:	e005      	b.n	80043f6 <MFRC522_ToCard+0x154>
				else
					*backLen = n * 8;
 80043ea:	7d3b      	ldrb	r3, [r7, #20]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	801a      	strh	r2, [r3, #0]
				if (n == 0)
 80043f6:	7d3b      	ldrb	r3, [r7, #20]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <MFRC522_ToCard+0x15e>
					n = 1;
 80043fc:	2301      	movs	r3, #1
 80043fe:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN)
 8004400:	7d3b      	ldrb	r3, [r7, #20]
 8004402:	2b10      	cmp	r3, #16
 8004404:	d901      	bls.n	800440a <MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 8004406:	2310      	movs	r3, #16
 8004408:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++)
 800440a:	2300      	movs	r3, #0
 800440c:	827b      	strh	r3, [r7, #18]
 800440e:	e00a      	b.n	8004426 <MFRC522_ToCard+0x184>
					backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);	// Reading the received data in FIFO
 8004410:	8a7b      	ldrh	r3, [r7, #18]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	18d4      	adds	r4, r2, r3
 8004416:	2009      	movs	r0, #9
 8004418:	f7ff feb3 	bl	8004182 <MFRC522_ReadRegister>
 800441c:	4603      	mov	r3, r0
 800441e:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++)
 8004420:	8a7b      	ldrh	r3, [r7, #18]
 8004422:	3301      	adds	r3, #1
 8004424:	827b      	strh	r3, [r7, #18]
 8004426:	7d3b      	ldrb	r3, [r7, #20]
 8004428:	b29b      	uxth	r3, r3
 800442a:	8a7a      	ldrh	r2, [r7, #18]
 800442c:	429a      	cmp	r2, r3
 800442e:	d3ef      	bcc.n	8004410 <MFRC522_ToCard+0x16e>
 8004430:	e001      	b.n	8004436 <MFRC522_ToCard+0x194>
			}
		}
		else
			status = MI_ERR;
 8004432:	2302      	movs	r3, #2
 8004434:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8004436:	7dfb      	ldrb	r3, [r7, #23]
}
 8004438:	4618      	mov	r0, r3
 800443a:	371c      	adds	r7, #28
 800443c:	46bd      	mov	sp, r7
 800443e:	bd90      	pop	{r4, r7, pc}

08004440 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af02      	add	r7, sp, #8
 8004446:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);	// TxLastBists=BitFramingReg[2..0]
 800444c:	2100      	movs	r1, #0
 800444e:	200d      	movs	r0, #13
 8004450:	f7ff fe7f 	bl	8004152 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2293      	movs	r2, #147	; 0x93
 8004458:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3301      	adds	r3, #1
 800445e:	2220      	movs	r2, #32
 8004460:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8004462:	f107 030a 	add.w	r3, r7, #10
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	200c      	movs	r0, #12
 8004470:	f7ff ff17 	bl	80042a2 <MFRC522_ToCard>
 8004474:	4603      	mov	r3, r0
 8004476:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK)
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d118      	bne.n	80044b0 <MFRC522_Anticoll+0x70>
	{
		// Check card serial number
		for (i = 0; i < 4; i++)
 800447e:	2300      	movs	r3, #0
 8004480:	73bb      	strb	r3, [r7, #14]
 8004482:	e009      	b.n	8004498 <MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8004484:	7bbb      	ldrb	r3, [r7, #14]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	4413      	add	r3, r2
 800448a:	781a      	ldrb	r2, [r3, #0]
 800448c:	7b7b      	ldrb	r3, [r7, #13]
 800448e:	4053      	eors	r3, r2
 8004490:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++)
 8004492:	7bbb      	ldrb	r3, [r7, #14]
 8004494:	3301      	adds	r3, #1
 8004496:	73bb      	strb	r3, [r7, #14]
 8004498:	7bbb      	ldrb	r3, [r7, #14]
 800449a:	2b03      	cmp	r3, #3
 800449c:	d9f2      	bls.n	8004484 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i])
 800449e:	7bbb      	ldrb	r3, [r7, #14]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	4413      	add	r3, r2
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	7b7a      	ldrb	r2, [r7, #13]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d001      	beq.n	80044b0 <MFRC522_Anticoll+0x70>
			status = MI_ERR;
 80044ac:	2302      	movs	r3, #2
 80044ae:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t* pIndata, uint8_t len, uint8_t* pOutData)
{
 80044ba:	b590      	push	{r4, r7, lr}
 80044bc:	b087      	sub	sp, #28
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	460b      	mov	r3, r1
 80044c4:	607a      	str	r2, [r7, #4]
 80044c6:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);								// CRCIrq = 0
 80044c8:	2104      	movs	r1, #4
 80044ca:	2005      	movs	r0, #5
 80044cc:	f7ff fea6 	bl	800421c <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);		// Clear the FIFO pointer
 80044d0:	2180      	movs	r1, #128	; 0x80
 80044d2:	200a      	movs	r0, #10
 80044d4:	f7ff fe88 	bl	80041e8 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO
	for (i = 0; i < len; i++)
 80044d8:	2300      	movs	r3, #0
 80044da:	75fb      	strb	r3, [r7, #23]
 80044dc:	e00a      	b.n	80044f4 <MFRC522_CalculateCRC+0x3a>
		MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata + i));
 80044de:	7dfb      	ldrb	r3, [r7, #23]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4413      	add	r3, r2
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	4619      	mov	r1, r3
 80044e8:	2009      	movs	r0, #9
 80044ea:	f7ff fe32 	bl	8004152 <MFRC522_WriteRegister>
	for (i = 0; i < len; i++)
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
 80044f0:	3301      	adds	r3, #1
 80044f2:	75fb      	strb	r3, [r7, #23]
 80044f4:	7dfa      	ldrb	r2, [r7, #23]
 80044f6:	7afb      	ldrb	r3, [r7, #11]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d3f0      	bcc.n	80044de <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 80044fc:	2103      	movs	r1, #3
 80044fe:	2001      	movs	r0, #1
 8004500:	f7ff fe27 	bl	8004152 <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 8004504:	23ff      	movs	r3, #255	; 0xff
 8004506:	75fb      	strb	r3, [r7, #23]
	do
	{
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8004508:	2005      	movs	r0, #5
 800450a:	f7ff fe3a 	bl	8004182 <MFRC522_ReadRegister>
 800450e:	4603      	mov	r3, r0
 8004510:	75bb      	strb	r3, [r7, #22]
		i--;
 8004512:	7dfb      	ldrb	r3, [r7, #23]
 8004514:	3b01      	subs	r3, #1
 8004516:	75fb      	strb	r3, [r7, #23]
	} while ((i != 0) && !(n & 0x04));															// CRCIrq = 1
 8004518:	7dfb      	ldrb	r3, [r7, #23]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d004      	beq.n	8004528 <MFRC522_CalculateCRC+0x6e>
 800451e:	7dbb      	ldrb	r3, [r7, #22]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0ef      	beq.n	8004508 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8004528:	2022      	movs	r0, #34	; 0x22
 800452a:	f7ff fe2a 	bl	8004182 <MFRC522_ReadRegister>
 800452e:	4603      	mov	r3, r0
 8004530:	461a      	mov	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	1c5c      	adds	r4, r3, #1
 800453a:	2021      	movs	r0, #33	; 0x21
 800453c:	f7ff fe21 	bl	8004182 <MFRC522_ReadRegister>
 8004540:	4603      	mov	r3, r0
 8004542:	7023      	strb	r3, [r4, #0]
}
 8004544:	bf00      	nop
 8004546:	371c      	adds	r7, #28
 8004548:	46bd      	mov	sp, r7
 800454a:	bd90      	pop	{r4, r7, pc}

0800454c <MFRC522_Init>:
	}
	return status;
}

void MFRC522_Init(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8004550:	f000 f820 	bl	8004594 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8004554:	218d      	movs	r1, #141	; 0x8d
 8004556:	202a      	movs	r0, #42	; 0x2a
 8004558:	f7ff fdfb 	bl	8004152 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 800455c:	213e      	movs	r1, #62	; 0x3e
 800455e:	202b      	movs	r0, #43	; 0x2b
 8004560:	f7ff fdf7 	bl	8004152 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8004564:	211e      	movs	r1, #30
 8004566:	202d      	movs	r0, #45	; 0x2d
 8004568:	f7ff fdf3 	bl	8004152 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 800456c:	2100      	movs	r1, #0
 800456e:	202c      	movs	r0, #44	; 0x2c
 8004570:	f7ff fdef 	bl	8004152 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain
 8004574:	2170      	movs	r1, #112	; 0x70
 8004576:	2026      	movs	r0, #38	; 0x26
 8004578:	f7ff fdeb 	bl	8004152 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 800457c:	2140      	movs	r1, #64	; 0x40
 800457e:	2015      	movs	r0, #21
 8004580:	f7ff fde7 	bl	8004152 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8004584:	213d      	movs	r1, #61	; 0x3d
 8004586:	2011      	movs	r0, #17
 8004588:	f7ff fde3 	bl	8004152 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 800458c:	f000 f80a 	bl	80045a4 <MFRC522_AntennaOn>
}
 8004590:	bf00      	nop
 8004592:	bd80      	pop	{r7, pc}

08004594 <MFRC522_Reset>:

void MFRC522_Reset(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8004598:	210f      	movs	r1, #15
 800459a:	2001      	movs	r0, #1
 800459c:	f7ff fdd9 	bl	8004152 <MFRC522_WriteRegister>
}
 80045a0:	bf00      	nop
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 80045aa:	2014      	movs	r0, #20
 80045ac:	f7ff fde9 	bl	8004182 <MFRC522_ReadRegister>
 80045b0:	4603      	mov	r3, r0
 80045b2:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03))
 80045b4:	79fb      	ldrb	r3, [r7, #7]
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d103      	bne.n	80045c6 <MFRC522_AntennaOn+0x22>
		MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 80045be:	2103      	movs	r1, #3
 80045c0:	2014      	movs	r0, #20
 80045c2:	f7ff fe11 	bl	80041e8 <MFRC522_SetBitMask>
}
 80045c6:	bf00      	nop
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <MFRC522_Halt>:
{
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 80045d4:	2350      	movs	r3, #80	; 0x50
 80045d6:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 80045dc:	463b      	mov	r3, r7
 80045de:	1c9a      	adds	r2, r3, #2
 80045e0:	463b      	mov	r3, r7
 80045e2:	2102      	movs	r1, #2
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff ff68 	bl	80044ba <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 80045ea:	463a      	mov	r2, r7
 80045ec:	4639      	mov	r1, r7
 80045ee:	1dbb      	adds	r3, r7, #6
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	4613      	mov	r3, r2
 80045f4:	2204      	movs	r2, #4
 80045f6:	200c      	movs	r0, #12
 80045f8:	f7ff fe53 	bl	80042a2 <MFRC522_ToCard>
}
 80045fc:	bf00      	nop
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <ssd1306_write_byte>:
 *                           0: Writes to the command register
 *                           1: Writes to the display data ram
 * @retval None
 **/
static void ssd1306_write_byte(uint8_t chData, uint8_t chCmd)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	4603      	mov	r3, r0
 800460c:	460a      	mov	r2, r1
 800460e:	71fb      	strb	r3, [r7, #7]
 8004610:	4613      	mov	r3, r2
 8004612:	71bb      	strb	r3, [r7, #6]
#ifdef INTERFACE_4WIRE_SPI

	SSD1306_CS_CLR();
 8004614:	f000 fa2e 	bl	8004a74 <SSD1306_CS_CLR>

	if (chCmd)
 8004618:	79bb      	ldrb	r3, [r7, #6]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <ssd1306_write_byte+0x20>
	{
		SSD1306_DC_SET();
 800461e:	f000 fa41 	bl	8004aa4 <SSD1306_DC_SET>
 8004622:	e001      	b.n	8004628 <ssd1306_write_byte+0x24>
	} else
	{
		SSD1306_DC_CLR();
 8004624:	f000 fa4a 	bl	8004abc <SSD1306_DC_CLR>
	}
	SSD1306_WRITE_BYTE(chData);
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fa52 	bl	8004ad4 <SSD1306_WRITE_BYTE>

	SSD1306_DC_SET();
 8004630:	f000 fa38 	bl	8004aa4 <SSD1306_DC_SET>
	SSD1306_CS_SET();
 8004634:	f000 fa12 	bl	8004a5c <SSD1306_CS_SET>
	iic_wait_for_ack();

	iic_stop();

#endif
}
 8004638:	bf00      	nop
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <ssd1306_refresh_gram>:
 *
 * @retval  None
 **/

void ssd1306_refresh_gram(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
	uint8_t i, j;

	for (i = 0; i < 8; i++)
 8004646:	2300      	movs	r3, #0
 8004648:	71fb      	strb	r3, [r7, #7]
 800464a:	e026      	b.n	800469a <ssd1306_refresh_gram+0x5a>
	{
		ssd1306_write_byte(0xB0 + i, SSD1306_CMD);
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	3b50      	subs	r3, #80	; 0x50
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2100      	movs	r1, #0
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff ffd5 	bl	8004604 <ssd1306_write_byte>
		__SET_COL_START_ADDR()
 800465a:	2100      	movs	r1, #0
 800465c:	2002      	movs	r0, #2
 800465e:	f7ff ffd1 	bl	8004604 <ssd1306_write_byte>
 8004662:	2100      	movs	r1, #0
 8004664:	2010      	movs	r0, #16
 8004666:	f7ff ffcd 	bl	8004604 <ssd1306_write_byte>
		;
		for (j = 0; j < 128; j++)
 800466a:	2300      	movs	r3, #0
 800466c:	71bb      	strb	r3, [r7, #6]
 800466e:	e00d      	b.n	800468c <ssd1306_refresh_gram+0x4c>
		{
			ssd1306_write_byte(s_chDispalyBuffer[j][i], SSD1306_DAT);
 8004670:	79ba      	ldrb	r2, [r7, #6]
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	490c      	ldr	r1, [pc, #48]	; (80046a8 <ssd1306_refresh_gram+0x68>)
 8004676:	00d2      	lsls	r2, r2, #3
 8004678:	440a      	add	r2, r1
 800467a:	4413      	add	r3, r2
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	2101      	movs	r1, #1
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff ffbf 	bl	8004604 <ssd1306_write_byte>
		for (j = 0; j < 128; j++)
 8004686:	79bb      	ldrb	r3, [r7, #6]
 8004688:	3301      	adds	r3, #1
 800468a:	71bb      	strb	r3, [r7, #6]
 800468c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004690:	2b00      	cmp	r3, #0
 8004692:	daed      	bge.n	8004670 <ssd1306_refresh_gram+0x30>
	for (i = 0; i < 8; i++)
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	3301      	adds	r3, #1
 8004698:	71fb      	strb	r3, [r7, #7]
 800469a:	79fb      	ldrb	r3, [r7, #7]
 800469c:	2b07      	cmp	r3, #7
 800469e:	d9d5      	bls.n	800464c <ssd1306_refresh_gram+0xc>
		}
	}
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	20000090 	.word	0x20000090

080046ac <ssd1306_clear_screen>:
 *
 * @retval  None
 **/

void ssd1306_clear_screen(uint8_t chFill)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	71fb      	strb	r3, [r7, #7]
	uint8_t i, j;

	for (i = 0; i < 8; i++)
 80046b6:	2300      	movs	r3, #0
 80046b8:	73fb      	strb	r3, [r7, #15]
 80046ba:	e023      	b.n	8004704 <ssd1306_clear_screen+0x58>
	{
		ssd1306_write_byte(0xB0 + i, SSD1306_CMD);
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	3b50      	subs	r3, #80	; 0x50
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2100      	movs	r1, #0
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff ff9d 	bl	8004604 <ssd1306_write_byte>
		__SET_COL_START_ADDR()
 80046ca:	2100      	movs	r1, #0
 80046cc:	2002      	movs	r0, #2
 80046ce:	f7ff ff99 	bl	8004604 <ssd1306_write_byte>
 80046d2:	2100      	movs	r1, #0
 80046d4:	2010      	movs	r0, #16
 80046d6:	f7ff ff95 	bl	8004604 <ssd1306_write_byte>
		;
		for (j = 0; j < 128; j++)
 80046da:	2300      	movs	r3, #0
 80046dc:	73bb      	strb	r3, [r7, #14]
 80046de:	e00a      	b.n	80046f6 <ssd1306_clear_screen+0x4a>
		{
			s_chDispalyBuffer[j][i] = chFill;
 80046e0:	7bba      	ldrb	r2, [r7, #14]
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
 80046e4:	490c      	ldr	r1, [pc, #48]	; (8004718 <ssd1306_clear_screen+0x6c>)
 80046e6:	00d2      	lsls	r2, r2, #3
 80046e8:	440a      	add	r2, r1
 80046ea:	4413      	add	r3, r2
 80046ec:	79fa      	ldrb	r2, [r7, #7]
 80046ee:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 128; j++)
 80046f0:	7bbb      	ldrb	r3, [r7, #14]
 80046f2:	3301      	adds	r3, #1
 80046f4:	73bb      	strb	r3, [r7, #14]
 80046f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	daf0      	bge.n	80046e0 <ssd1306_clear_screen+0x34>
	for (i = 0; i < 8; i++)
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	3301      	adds	r3, #1
 8004702:	73fb      	strb	r3, [r7, #15]
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	2b07      	cmp	r3, #7
 8004708:	d9d8      	bls.n	80046bc <ssd1306_clear_screen+0x10>
		}
	}

	ssd1306_refresh_gram();
 800470a:	f7ff ff99 	bl	8004640 <ssd1306_refresh_gram>
}
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000090 	.word	0x20000090

0800471c <ssd1306_draw_point>:
 *
 * @retval None
 **/

void ssd1306_draw_point(uint8_t chXpos, uint8_t chYpos, uint8_t chPoint)
{
 800471c:	b490      	push	{r4, r7}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	4603      	mov	r3, r0
 8004724:	71fb      	strb	r3, [r7, #7]
 8004726:	460b      	mov	r3, r1
 8004728:	71bb      	strb	r3, [r7, #6]
 800472a:	4613      	mov	r3, r2
 800472c:	717b      	strb	r3, [r7, #5]
	uint8_t chPos, chBx, chTemp = 0;
 800472e:	2300      	movs	r3, #0
 8004730:	73fb      	strb	r3, [r7, #15]

	if (chXpos > 127 || chYpos > 63)
 8004732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004736:	2b00      	cmp	r3, #0
 8004738:	db41      	blt.n	80047be <ssd1306_draw_point+0xa2>
 800473a:	79bb      	ldrb	r3, [r7, #6]
 800473c:	2b3f      	cmp	r3, #63	; 0x3f
 800473e:	d83e      	bhi.n	80047be <ssd1306_draw_point+0xa2>
	{
		return;
	}
	chPos = 7 - chYpos / 8; // 
 8004740:	79bb      	ldrb	r3, [r7, #6]
 8004742:	08db      	lsrs	r3, r3, #3
 8004744:	b2db      	uxtb	r3, r3
 8004746:	f1c3 0307 	rsb	r3, r3, #7
 800474a:	73bb      	strb	r3, [r7, #14]
	chBx = chYpos % 8;
 800474c:	79bb      	ldrb	r3, [r7, #6]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	737b      	strb	r3, [r7, #13]
	chTemp = 1 << (7 - chBx);
 8004754:	7b7b      	ldrb	r3, [r7, #13]
 8004756:	f1c3 0307 	rsb	r3, r3, #7
 800475a:	2201      	movs	r2, #1
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	73fb      	strb	r3, [r7, #15]

	if (chPoint)
 8004762:	797b      	ldrb	r3, [r7, #5]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d012      	beq.n	800478e <ssd1306_draw_point+0x72>
	{
		s_chDispalyBuffer[chXpos][chPos] |= chTemp;
 8004768:	79fa      	ldrb	r2, [r7, #7]
 800476a:	7bbb      	ldrb	r3, [r7, #14]
 800476c:	79f8      	ldrb	r0, [r7, #7]
 800476e:	7bb9      	ldrb	r1, [r7, #14]
 8004770:	4c15      	ldr	r4, [pc, #84]	; (80047c8 <ssd1306_draw_point+0xac>)
 8004772:	00c0      	lsls	r0, r0, #3
 8004774:	4420      	add	r0, r4
 8004776:	4401      	add	r1, r0
 8004778:	7808      	ldrb	r0, [r1, #0]
 800477a:	7bf9      	ldrb	r1, [r7, #15]
 800477c:	4301      	orrs	r1, r0
 800477e:	b2c8      	uxtb	r0, r1
 8004780:	4911      	ldr	r1, [pc, #68]	; (80047c8 <ssd1306_draw_point+0xac>)
 8004782:	00d2      	lsls	r2, r2, #3
 8004784:	440a      	add	r2, r1
 8004786:	4413      	add	r3, r2
 8004788:	4602      	mov	r2, r0
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	e018      	b.n	80047c0 <ssd1306_draw_point+0xa4>

	} else
	{
		s_chDispalyBuffer[chXpos][chPos] &= ~chTemp;
 800478e:	79fa      	ldrb	r2, [r7, #7]
 8004790:	7bbb      	ldrb	r3, [r7, #14]
 8004792:	79f8      	ldrb	r0, [r7, #7]
 8004794:	7bb9      	ldrb	r1, [r7, #14]
 8004796:	4c0c      	ldr	r4, [pc, #48]	; (80047c8 <ssd1306_draw_point+0xac>)
 8004798:	00c0      	lsls	r0, r0, #3
 800479a:	4420      	add	r0, r4
 800479c:	4401      	add	r1, r0
 800479e:	7809      	ldrb	r1, [r1, #0]
 80047a0:	b248      	sxtb	r0, r1
 80047a2:	f997 100f 	ldrsb.w	r1, [r7, #15]
 80047a6:	43c9      	mvns	r1, r1
 80047a8:	b249      	sxtb	r1, r1
 80047aa:	4001      	ands	r1, r0
 80047ac:	b249      	sxtb	r1, r1
 80047ae:	b2c8      	uxtb	r0, r1
 80047b0:	4905      	ldr	r1, [pc, #20]	; (80047c8 <ssd1306_draw_point+0xac>)
 80047b2:	00d2      	lsls	r2, r2, #3
 80047b4:	440a      	add	r2, r1
 80047b6:	4413      	add	r3, r2
 80047b8:	4602      	mov	r2, r0
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	e000      	b.n	80047c0 <ssd1306_draw_point+0xa4>
		return;
 80047be:	bf00      	nop
	}
}
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc90      	pop	{r4, r7}
 80047c6:	4770      	bx	lr
 80047c8:	20000090 	.word	0x20000090

080047cc <ssd1306_display_char>:
 * @param  chMode
 * @retval
 **/
void ssd1306_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr,
		uint8_t chSize, uint8_t chMode)
{
 80047cc:	b590      	push	{r4, r7, lr}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	4604      	mov	r4, r0
 80047d4:	4608      	mov	r0, r1
 80047d6:	4611      	mov	r1, r2
 80047d8:	461a      	mov	r2, r3
 80047da:	4623      	mov	r3, r4
 80047dc:	71fb      	strb	r3, [r7, #7]
 80047de:	4603      	mov	r3, r0
 80047e0:	71bb      	strb	r3, [r7, #6]
 80047e2:	460b      	mov	r3, r1
 80047e4:	717b      	strb	r3, [r7, #5]
 80047e6:	4613      	mov	r3, r2
 80047e8:	713b      	strb	r3, [r7, #4]
	uint8_t i, j;
	uint8_t chTemp, chYpos0 = chYpos;
 80047ea:	79bb      	ldrb	r3, [r7, #6]
 80047ec:	733b      	strb	r3, [r7, #12]

	chChr = chChr - ' ';
 80047ee:	797b      	ldrb	r3, [r7, #5]
 80047f0:	3b20      	subs	r3, #32
 80047f2:	717b      	strb	r3, [r7, #5]
	for (i = 0; i < chSize; i++)
 80047f4:	2300      	movs	r3, #0
 80047f6:	73fb      	strb	r3, [r7, #15]
 80047f8:	e064      	b.n	80048c4 <ssd1306_display_char+0xf8>
	{
		if (chSize == 12)
 80047fa:	793b      	ldrb	r3, [r7, #4]
 80047fc:	2b0c      	cmp	r3, #12
 80047fe:	d11c      	bne.n	800483a <ssd1306_display_char+0x6e>
		{
			if (chMode)
 8004800:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00b      	beq.n	8004820 <ssd1306_display_char+0x54>
			{
				chTemp = c_chFont1206[chChr][i];
 8004808:	797a      	ldrb	r2, [r7, #5]
 800480a:	7bf9      	ldrb	r1, [r7, #15]
 800480c:	4831      	ldr	r0, [pc, #196]	; (80048d4 <ssd1306_display_char+0x108>)
 800480e:	4613      	mov	r3, r2
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4403      	add	r3, r0
 8004818:	440b      	add	r3, r1
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	737b      	strb	r3, [r7, #13]
 800481e:	e022      	b.n	8004866 <ssd1306_display_char+0x9a>
			} else
			{
				chTemp = ~c_chFont1206[chChr][i];
 8004820:	797a      	ldrb	r2, [r7, #5]
 8004822:	7bf9      	ldrb	r1, [r7, #15]
 8004824:	482b      	ldr	r0, [pc, #172]	; (80048d4 <ssd1306_display_char+0x108>)
 8004826:	4613      	mov	r3, r2
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4403      	add	r3, r0
 8004830:	440b      	add	r3, r1
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	43db      	mvns	r3, r3
 8004836:	737b      	strb	r3, [r7, #13]
 8004838:	e015      	b.n	8004866 <ssd1306_display_char+0x9a>
			}
		} else
		{
			if (chMode)
 800483a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d008      	beq.n	8004854 <ssd1306_display_char+0x88>
			{
				chTemp = c_chFont1608[chChr][i];
 8004842:	797a      	ldrb	r2, [r7, #5]
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	4924      	ldr	r1, [pc, #144]	; (80048d8 <ssd1306_display_char+0x10c>)
 8004848:	0112      	lsls	r2, r2, #4
 800484a:	440a      	add	r2, r1
 800484c:	4413      	add	r3, r2
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	737b      	strb	r3, [r7, #13]
 8004852:	e008      	b.n	8004866 <ssd1306_display_char+0x9a>
			} else
			{
				chTemp = ~c_chFont1608[chChr][i];
 8004854:	797a      	ldrb	r2, [r7, #5]
 8004856:	7bfb      	ldrb	r3, [r7, #15]
 8004858:	491f      	ldr	r1, [pc, #124]	; (80048d8 <ssd1306_display_char+0x10c>)
 800485a:	0112      	lsls	r2, r2, #4
 800485c:	440a      	add	r2, r1
 800485e:	4413      	add	r3, r2
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	43db      	mvns	r3, r3
 8004864:	737b      	strb	r3, [r7, #13]
			}
		}

		for (j = 0; j < 8; j++)
 8004866:	2300      	movs	r3, #0
 8004868:	73bb      	strb	r3, [r7, #14]
 800486a:	e025      	b.n	80048b8 <ssd1306_display_char+0xec>
		{
			if (chTemp & 0x80)
 800486c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004870:	2b00      	cmp	r3, #0
 8004872:	da06      	bge.n	8004882 <ssd1306_display_char+0xb6>
			{
				ssd1306_draw_point(chXpos, chYpos, 1);
 8004874:	79b9      	ldrb	r1, [r7, #6]
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	2201      	movs	r2, #1
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff ff4e 	bl	800471c <ssd1306_draw_point>
 8004880:	e005      	b.n	800488e <ssd1306_display_char+0xc2>
			} else
			{
				ssd1306_draw_point(chXpos, chYpos, 0);
 8004882:	79b9      	ldrb	r1, [r7, #6]
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	2200      	movs	r2, #0
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff ff47 	bl	800471c <ssd1306_draw_point>
			}
			chTemp <<= 1;
 800488e:	7b7b      	ldrb	r3, [r7, #13]
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	737b      	strb	r3, [r7, #13]
			chYpos++;
 8004894:	79bb      	ldrb	r3, [r7, #6]
 8004896:	3301      	adds	r3, #1
 8004898:	71bb      	strb	r3, [r7, #6]

			if ((chYpos - chYpos0) == chSize)
 800489a:	79ba      	ldrb	r2, [r7, #6]
 800489c:	7b3b      	ldrb	r3, [r7, #12]
 800489e:	1ad2      	subs	r2, r2, r3
 80048a0:	793b      	ldrb	r3, [r7, #4]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d105      	bne.n	80048b2 <ssd1306_display_char+0xe6>
			{
				chYpos = chYpos0;
 80048a6:	7b3b      	ldrb	r3, [r7, #12]
 80048a8:	71bb      	strb	r3, [r7, #6]
				chXpos++;
 80048aa:	79fb      	ldrb	r3, [r7, #7]
 80048ac:	3301      	adds	r3, #1
 80048ae:	71fb      	strb	r3, [r7, #7]
				break;
 80048b0:	e005      	b.n	80048be <ssd1306_display_char+0xf2>
		for (j = 0; j < 8; j++)
 80048b2:	7bbb      	ldrb	r3, [r7, #14]
 80048b4:	3301      	adds	r3, #1
 80048b6:	73bb      	strb	r3, [r7, #14]
 80048b8:	7bbb      	ldrb	r3, [r7, #14]
 80048ba:	2b07      	cmp	r3, #7
 80048bc:	d9d6      	bls.n	800486c <ssd1306_display_char+0xa0>
	for (i = 0; i < chSize; i++)
 80048be:	7bfb      	ldrb	r3, [r7, #15]
 80048c0:	3301      	adds	r3, #1
 80048c2:	73fb      	strb	r3, [r7, #15]
 80048c4:	7bfa      	ldrb	r2, [r7, #15]
 80048c6:	793b      	ldrb	r3, [r7, #4]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d396      	bcc.n	80047fa <ssd1306_display_char+0x2e>
			}
		}
	}
}
 80048cc:	bf00      	nop
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd90      	pop	{r4, r7, pc}
 80048d4:	08006db0 	.word	0x08006db0
 80048d8:	08007224 	.word	0x08007224

080048dc <ssd1306_display_string>:
 *
 * @retval  None
 **/
void ssd1306_display_string(uint8_t chXpos, uint8_t chYpos,
		const uint8_t *pchString, uint8_t chSize, uint8_t chMode)
{
 80048dc:	b590      	push	{r4, r7, lr}
 80048de:	b085      	sub	sp, #20
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	603a      	str	r2, [r7, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	4603      	mov	r3, r0
 80048e8:	71fb      	strb	r3, [r7, #7]
 80048ea:	460b      	mov	r3, r1
 80048ec:	71bb      	strb	r3, [r7, #6]
 80048ee:	4613      	mov	r3, r2
 80048f0:	717b      	strb	r3, [r7, #5]
	while (*pchString != '\0')
 80048f2:	e02d      	b.n	8004950 <ssd1306_display_string+0x74>
	{
		if (chXpos > (SSD1306_WIDTH - chSize / 2))
 80048f4:	79fa      	ldrb	r2, [r7, #7]
 80048f6:	797b      	ldrb	r3, [r7, #5]
 80048f8:	085b      	lsrs	r3, r3, #1
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004900:	429a      	cmp	r2, r3
 8004902:	dd12      	ble.n	800492a <ssd1306_display_string+0x4e>
		{
			chXpos = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 8004908:	79ba      	ldrb	r2, [r7, #6]
 800490a:	797b      	ldrb	r3, [r7, #5]
 800490c:	4413      	add	r3, r2
 800490e:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (SSD1306_HEIGHT - chSize))
 8004910:	79ba      	ldrb	r2, [r7, #6]
 8004912:	797b      	ldrb	r3, [r7, #5]
 8004914:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004918:	429a      	cmp	r2, r3
 800491a:	dd06      	ble.n	800492a <ssd1306_display_string+0x4e>
			{
				chYpos = chXpos = 0;
 800491c:	2300      	movs	r3, #0
 800491e:	71fb      	strb	r3, [r7, #7]
 8004920:	79fb      	ldrb	r3, [r7, #7]
 8004922:	71bb      	strb	r3, [r7, #6]
				ssd1306_clear_screen(0x00);
 8004924:	2000      	movs	r0, #0
 8004926:	f7ff fec1 	bl	80046ac <ssd1306_clear_screen>
			}
		}

		ssd1306_display_char(chXpos, chYpos, *pchString, chSize, chMode);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781a      	ldrb	r2, [r3, #0]
 800492e:	797c      	ldrb	r4, [r7, #5]
 8004930:	79b9      	ldrb	r1, [r7, #6]
 8004932:	79f8      	ldrb	r0, [r7, #7]
 8004934:	7e3b      	ldrb	r3, [r7, #24]
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	4623      	mov	r3, r4
 800493a:	f7ff ff47 	bl	80047cc <ssd1306_display_char>
		chXpos += chSize / 2;
 800493e:	797b      	ldrb	r3, [r7, #5]
 8004940:	085b      	lsrs	r3, r3, #1
 8004942:	b2da      	uxtb	r2, r3
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	4413      	add	r3, r2
 8004948:	71fb      	strb	r3, [r7, #7]
		pchString++;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	3301      	adds	r3, #1
 800494e:	603b      	str	r3, [r7, #0]
	while (*pchString != '\0')
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1cd      	bne.n	80048f4 <ssd1306_display_string+0x18>
	}
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	bd90      	pop	{r4, r7, pc}

08004960 <ssd1306_init>:
 * @param  None
 *
 * @retval None
 **/
void ssd1306_init(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0

#ifdef INTERFACE_4WIRE_SPI	  
	SSD1306_CS_SET();   //CS set
 8004964:	f000 f87a 	bl	8004a5c <SSD1306_CS_SET>
	SSD1306_DC_CLR();   //D/C reset
 8004968:	f000 f8a8 	bl	8004abc <SSD1306_DC_CLR>
	SSD1306_RES_SET();  //RES set
 800496c:	f000 f88e 	bl	8004a8c <SSD1306_RES_SET>
	SSD1306_DC_CLR();//D/C reset
	SSD1306_RES_SET();//RES set

#endif

	ssd1306_write_byte(0xAE, SSD1306_CMD);  //--turn off oled panel
 8004970:	2100      	movs	r1, #0
 8004972:	20ae      	movs	r0, #174	; 0xae
 8004974:	f7ff fe46 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0x00, SSD1306_CMD);  //---set low column address
 8004978:	2100      	movs	r1, #0
 800497a:	2000      	movs	r0, #0
 800497c:	f7ff fe42 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0x10, SSD1306_CMD);  //---set high column address
 8004980:	2100      	movs	r1, #0
 8004982:	2010      	movs	r0, #16
 8004984:	f7ff fe3e 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0x40, SSD1306_CMD); //--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 8004988:	2100      	movs	r1, #0
 800498a:	2040      	movs	r0, #64	; 0x40
 800498c:	f7ff fe3a 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0x81, SSD1306_CMD);  //--set contrast control register
 8004990:	2100      	movs	r1, #0
 8004992:	2081      	movs	r0, #129	; 0x81
 8004994:	f7ff fe36 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0xCF, SSD1306_CMD);  // Set SEG Output Current Brightness
 8004998:	2100      	movs	r1, #0
 800499a:	20cf      	movs	r0, #207	; 0xcf
 800499c:	f7ff fe32 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0xA1, SSD1306_CMD);  //--Set SEG/Column Mapping
 80049a0:	2100      	movs	r1, #0
 80049a2:	20a1      	movs	r0, #161	; 0xa1
 80049a4:	f7ff fe2e 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0xC0, SSD1306_CMD);  //Set COM/Row Scan Direction
 80049a8:	2100      	movs	r1, #0
 80049aa:	20c0      	movs	r0, #192	; 0xc0
 80049ac:	f7ff fe2a 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0xA6, SSD1306_CMD);  //--set normal display
 80049b0:	2100      	movs	r1, #0
 80049b2:	20a6      	movs	r0, #166	; 0xa6
 80049b4:	f7ff fe26 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0xA8, SSD1306_CMD);  //--set multiplex ratio(1 to 64)
 80049b8:	2100      	movs	r1, #0
 80049ba:	20a8      	movs	r0, #168	; 0xa8
 80049bc:	f7ff fe22 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0x3f, SSD1306_CMD);  //--1/64 duty
 80049c0:	2100      	movs	r1, #0
 80049c2:	203f      	movs	r0, #63	; 0x3f
 80049c4:	f7ff fe1e 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0xD3, SSD1306_CMD); //-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 80049c8:	2100      	movs	r1, #0
 80049ca:	20d3      	movs	r0, #211	; 0xd3
 80049cc:	f7ff fe1a 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0x00, SSD1306_CMD);  //-not offset
 80049d0:	2100      	movs	r1, #0
 80049d2:	2000      	movs	r0, #0
 80049d4:	f7ff fe16 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0xd5, SSD1306_CMD); //--set display clock divide ratio/oscillator frequency
 80049d8:	2100      	movs	r1, #0
 80049da:	20d5      	movs	r0, #213	; 0xd5
 80049dc:	f7ff fe12 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0x80, SSD1306_CMD); //--set divide ratio, Set Clock as 100 Frames/Sec
 80049e0:	2100      	movs	r1, #0
 80049e2:	2080      	movs	r0, #128	; 0x80
 80049e4:	f7ff fe0e 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0xD9, SSD1306_CMD);  //--set pre-charge period
 80049e8:	2100      	movs	r1, #0
 80049ea:	20d9      	movs	r0, #217	; 0xd9
 80049ec:	f7ff fe0a 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0xF1, SSD1306_CMD); //Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 80049f0:	2100      	movs	r1, #0
 80049f2:	20f1      	movs	r0, #241	; 0xf1
 80049f4:	f7ff fe06 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0xDA, SSD1306_CMD); //--set com pins hardware configuration
 80049f8:	2100      	movs	r1, #0
 80049fa:	20da      	movs	r0, #218	; 0xda
 80049fc:	f7ff fe02 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0x12, SSD1306_CMD);
 8004a00:	2100      	movs	r1, #0
 8004a02:	2012      	movs	r0, #18
 8004a04:	f7ff fdfe 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0xDB, SSD1306_CMD);  //--set vcomh
 8004a08:	2100      	movs	r1, #0
 8004a0a:	20db      	movs	r0, #219	; 0xdb
 8004a0c:	f7ff fdfa 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0x40, SSD1306_CMD);  //Set VCOM Deselect Level
 8004a10:	2100      	movs	r1, #0
 8004a12:	2040      	movs	r0, #64	; 0x40
 8004a14:	f7ff fdf6 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0x20, SSD1306_CMD); //-Set Page Addressing Mode (0x00/0x01/0x02)
 8004a18:	2100      	movs	r1, #0
 8004a1a:	2020      	movs	r0, #32
 8004a1c:	f7ff fdf2 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0x02, SSD1306_CMD);  //
 8004a20:	2100      	movs	r1, #0
 8004a22:	2002      	movs	r0, #2
 8004a24:	f7ff fdee 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0x8D, SSD1306_CMD);  //--set Charge Pump enable/disable
 8004a28:	2100      	movs	r1, #0
 8004a2a:	208d      	movs	r0, #141	; 0x8d
 8004a2c:	f7ff fdea 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0x14, SSD1306_CMD);  //--set(0x10) disable
 8004a30:	2100      	movs	r1, #0
 8004a32:	2014      	movs	r0, #20
 8004a34:	f7ff fde6 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0xA4, SSD1306_CMD); // Disable Entire Display On (0xa4/0xa5)
 8004a38:	2100      	movs	r1, #0
 8004a3a:	20a4      	movs	r0, #164	; 0xa4
 8004a3c:	f7ff fde2 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0xA6, SSD1306_CMD); // Disable Inverse Display On (0xa6/a7)
 8004a40:	2100      	movs	r1, #0
 8004a42:	20a6      	movs	r0, #166	; 0xa6
 8004a44:	f7ff fdde 	bl	8004604 <ssd1306_write_byte>
	ssd1306_write_byte(0xAF, SSD1306_CMD);  //--turn on oled panel
 8004a48:	2100      	movs	r1, #0
 8004a4a:	20af      	movs	r0, #175	; 0xaf
 8004a4c:	f7ff fdda 	bl	8004604 <ssd1306_write_byte>

	ssd1306_clear_screen(0x00);
 8004a50:	2000      	movs	r0, #0
 8004a52:	f7ff fe2b 	bl	80046ac <ssd1306_clear_screen>
}
 8004a56:	bf00      	nop
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <SSD1306_CS_SET>:

///moje
void SSD1306_CS_SET()
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_CS_GPIO, SSD1306_CS_PIN, GPIO_PIN_SET);
 8004a60:	2201      	movs	r2, #1
 8004a62:	2104      	movs	r1, #4
 8004a64:	4802      	ldr	r0, [pc, #8]	; (8004a70 <SSD1306_CS_SET+0x14>)
 8004a66:	f7fc fceb 	bl	8001440 <HAL_GPIO_WritePin>
}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40021800 	.word	0x40021800

08004a74 <SSD1306_CS_CLR>:
void SSD1306_CS_CLR()
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_CS_GPIO, SSD1306_CS_PIN, GPIO_PIN_RESET);
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2104      	movs	r1, #4
 8004a7c:	4802      	ldr	r0, [pc, #8]	; (8004a88 <SSD1306_CS_CLR+0x14>)
 8004a7e:	f7fc fcdf 	bl	8001440 <HAL_GPIO_WritePin>
}
 8004a82:	bf00      	nop
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40021800 	.word	0x40021800

08004a8c <SSD1306_RES_SET>:

void SSD1306_RES_SET()
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_RES_GPIO, SSD1306_RES_PIN, GPIO_PIN_SET);
 8004a90:	2201      	movs	r2, #1
 8004a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a96:	4802      	ldr	r0, [pc, #8]	; (8004aa0 <SSD1306_RES_SET+0x14>)
 8004a98:	f7fc fcd2 	bl	8001440 <HAL_GPIO_WritePin>
}
 8004a9c:	bf00      	nop
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40020800 	.word	0x40020800

08004aa4 <SSD1306_DC_SET>:
{
	HAL_GPIO_WritePin(SSD1306_RES_GPIO, SSD1306_RES_PIN, GPIO_PIN_RESET);
}

void SSD1306_DC_SET()
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_DC_GPIO, SSD1306_DC_PIN, GPIO_PIN_SET);
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	2108      	movs	r1, #8
 8004aac:	4802      	ldr	r0, [pc, #8]	; (8004ab8 <SSD1306_DC_SET+0x14>)
 8004aae:	f7fc fcc7 	bl	8001440 <HAL_GPIO_WritePin>
}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40021800 	.word	0x40021800

08004abc <SSD1306_DC_CLR>:
void SSD1306_DC_CLR()
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSD1306_DC_GPIO, SSD1306_DC_PIN, GPIO_PIN_RESET);
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	2108      	movs	r1, #8
 8004ac4:	4802      	ldr	r0, [pc, #8]	; (8004ad0 <SSD1306_DC_CLR+0x14>)
 8004ac6:	f7fc fcbb 	bl	8001440 <HAL_GPIO_WritePin>
}
 8004aca:	bf00      	nop
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	40021800 	.word	0x40021800

08004ad4 <SSD1306_WRITE_BYTE>:
{
	HAL_GPIO_WritePin(SSD1306_DIN_GPIO, SSD1306_DIN_PIN, GPIO_PIN_RESET);
}

void SSD1306_WRITE_BYTE(uint8_t DATA)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi3, &DATA, 1, 1000);
 8004ade:	1df9      	adds	r1, r7, #7
 8004ae0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	4803      	ldr	r0, [pc, #12]	; (8004af4 <SSD1306_WRITE_BYTE+0x20>)
 8004ae8:	f7fd f99f 	bl	8001e2a <HAL_SPI_Transmit>

}
 8004aec:	bf00      	nop
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	200005f8 	.word	0x200005f8

08004af8 <ssd1306_hello_word>:
/*-------------------------------END OF FILE LIBRARY-------------------------------*/

/*-------------------------------USER INTERFACE-------------------------------*/

void ssd1306_hello_word()
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af02      	add	r7, sp, #8
	//ssd1306_draw_bitmap(30, 30, (uint8_t* )c_chBmp4016, 40, 16);

	ssd1306_display_string(0, 0, (uint8_t *) "System Init OK", 16, 0);
 8004afe:	2300      	movs	r3, #0
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	2310      	movs	r3, #16
 8004b04:	4a0f      	ldr	r2, [pc, #60]	; (8004b44 <ssd1306_hello_word+0x4c>)
 8004b06:	2100      	movs	r1, #0
 8004b08:	2000      	movs	r0, #0
 8004b0a:	f7ff fee7 	bl	80048dc <ssd1306_display_string>
	ssd1306_refresh_gram();
 8004b0e:	f7ff fd97 	bl	8004640 <ssd1306_refresh_gram>
	HAL_Delay(1000);
 8004b12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b16:	f7fc f99f 	bl	8000e58 <HAL_Delay>
	ssd1306_display_string(0, 0, (uint8_t *) "Praca Magisterska", 12, 1);
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	230c      	movs	r3, #12
 8004b20:	4a09      	ldr	r2, [pc, #36]	; (8004b48 <ssd1306_hello_word+0x50>)
 8004b22:	2100      	movs	r1, #0
 8004b24:	2000      	movs	r0, #0
 8004b26:	f7ff fed9 	bl	80048dc <ssd1306_display_string>
	ssd1306_display_string(10, 16, (uint8_t *) "Kamil Karpiak", 14, 1);
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	230e      	movs	r3, #14
 8004b30:	4a06      	ldr	r2, [pc, #24]	; (8004b4c <ssd1306_hello_word+0x54>)
 8004b32:	2110      	movs	r1, #16
 8004b34:	200a      	movs	r0, #10
 8004b36:	f7ff fed1 	bl	80048dc <ssd1306_display_string>
	ssd1306_refresh_gram();
 8004b3a:	f7ff fd81 	bl	8004640 <ssd1306_refresh_gram>

}
 8004b3e:	bf00      	nop
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	08006d18 	.word	0x08006d18
 8004b48:	08006d28 	.word	0x08006d28
 8004b4c:	08006d3c 	.word	0x08006d3c

08004b50 <MX_GFXSIMULATOR_Init>:

/* USER CODE END 0 */

/* GFXSIMULATOR init function */
void MX_GFXSIMULATOR_Init(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0

}
 8004b54:	bf00      	nop
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
	...

08004b60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08c      	sub	sp, #48	; 0x30
 8004b64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b66:	f107 031c 	add.w	r3, r7, #28
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	605a      	str	r2, [r3, #4]
 8004b70:	609a      	str	r2, [r3, #8]
 8004b72:	60da      	str	r2, [r3, #12]
 8004b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b76:	2300      	movs	r3, #0
 8004b78:	61bb      	str	r3, [r7, #24]
 8004b7a:	4a69      	ldr	r2, [pc, #420]	; (8004d20 <MX_GPIO_Init+0x1c0>)
 8004b7c:	4b68      	ldr	r3, [pc, #416]	; (8004d20 <MX_GPIO_Init+0x1c0>)
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	f043 0320 	orr.w	r3, r3, #32
 8004b84:	6313      	str	r3, [r2, #48]	; 0x30
 8004b86:	4b66      	ldr	r3, [pc, #408]	; (8004d20 <MX_GPIO_Init+0x1c0>)
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	61bb      	str	r3, [r7, #24]
 8004b90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	4a62      	ldr	r2, [pc, #392]	; (8004d20 <MX_GPIO_Init+0x1c0>)
 8004b98:	4b61      	ldr	r3, [pc, #388]	; (8004d20 <MX_GPIO_Init+0x1c0>)
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	f043 0304 	orr.w	r3, r3, #4
 8004ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ba2:	4b5f      	ldr	r3, [pc, #380]	; (8004d20 <MX_GPIO_Init+0x1c0>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bae:	2300      	movs	r3, #0
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	4a5b      	ldr	r2, [pc, #364]	; (8004d20 <MX_GPIO_Init+0x1c0>)
 8004bb4:	4b5a      	ldr	r3, [pc, #360]	; (8004d20 <MX_GPIO_Init+0x1c0>)
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	f043 0302 	orr.w	r3, r3, #2
 8004bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004bbe:	4b58      	ldr	r3, [pc, #352]	; (8004d20 <MX_GPIO_Init+0x1c0>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	4a54      	ldr	r2, [pc, #336]	; (8004d20 <MX_GPIO_Init+0x1c0>)
 8004bd0:	4b53      	ldr	r3, [pc, #332]	; (8004d20 <MX_GPIO_Init+0x1c0>)
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd4:	f043 0308 	orr.w	r3, r3, #8
 8004bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bda:	4b51      	ldr	r3, [pc, #324]	; (8004d20 <MX_GPIO_Init+0x1c0>)
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004be6:	2300      	movs	r3, #0
 8004be8:	60bb      	str	r3, [r7, #8]
 8004bea:	4a4d      	ldr	r2, [pc, #308]	; (8004d20 <MX_GPIO_Init+0x1c0>)
 8004bec:	4b4c      	ldr	r3, [pc, #304]	; (8004d20 <MX_GPIO_Init+0x1c0>)
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bf6:	4b4a      	ldr	r3, [pc, #296]	; (8004d20 <MX_GPIO_Init+0x1c0>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfe:	60bb      	str	r3, [r7, #8]
 8004c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c02:	2300      	movs	r3, #0
 8004c04:	607b      	str	r3, [r7, #4]
 8004c06:	4a46      	ldr	r2, [pc, #280]	; (8004d20 <MX_GPIO_Init+0x1c0>)
 8004c08:	4b45      	ldr	r3, [pc, #276]	; (8004d20 <MX_GPIO_Init+0x1c0>)
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0c:	f043 0301 	orr.w	r3, r3, #1
 8004c10:	6313      	str	r3, [r2, #48]	; 0x30
 8004c12:	4b43      	ldr	r3, [pc, #268]	; (8004d20 <MX_GPIO_Init+0x1c0>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	607b      	str	r3, [r7, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);
 8004c1e:	2201      	movs	r2, #1
 8004c20:	2110      	movs	r1, #16
 8004c22:	4840      	ldr	r0, [pc, #256]	; (8004d24 <MX_GPIO_Init+0x1c4>)
 8004c24:	f7fc fc0c 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RFID_RESET_Pin|BUZZER_Pin, GPIO_PIN_SET);
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004c2e:	483e      	ldr	r0, [pc, #248]	; (8004d28 <MX_GPIO_Init+0x1c8>)
 8004c30:	f7fc fc06 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RFID_CS_GPIO_Port, SPI_RFID_CS_Pin, GPIO_PIN_RESET);
 8004c34:	2200      	movs	r2, #0
 8004c36:	2102      	movs	r1, #2
 8004c38:	483c      	ldr	r0, [pc, #240]	; (8004d2c <MX_GPIO_Init+0x1cc>)
 8004c3a:	f7fc fc01 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OLED_CS_Pin|OLED_DC_Pin|GPIO_Motor_Control4_Pin|GPIO_Motor_control2_Pin 
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f64a 410c 	movw	r1, #44044	; 0xac0c
 8004c44:	483a      	ldr	r0, [pc, #232]	; (8004d30 <MX_GPIO_Init+0x1d0>)
 8004c46:	f7fc fbfb 	bl	8001440 <HAL_GPIO_WritePin>
                          |GPIO_Motor_Control3_Pin|GPIO_Motor_control1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, GPIO_PIN_RESET);
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c50:	4835      	ldr	r0, [pc, #212]	; (8004d28 <MX_GPIO_Init+0x1c8>)
 8004c52:	f7fc fbf5 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004c56:	2310      	movs	r3, #16
 8004c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c62:	2300      	movs	r3, #0
 8004c64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004c66:	f107 031c 	add.w	r3, r7, #28
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	482d      	ldr	r0, [pc, #180]	; (8004d24 <MX_GPIO_Init+0x1c4>)
 8004c6e:	f7fc fa25 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RFID_IRQ_Pin;
 8004c72:	2320      	movs	r3, #32
 8004c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004c76:	4b2f      	ldr	r3, [pc, #188]	; (8004d34 <MX_GPIO_Init+0x1d4>)
 8004c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RFID_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004c7e:	f107 031c 	add.w	r3, r7, #28
 8004c82:	4619      	mov	r1, r3
 8004c84:	4827      	ldr	r0, [pc, #156]	; (8004d24 <MX_GPIO_Init+0x1c4>)
 8004c86:	f7fc fa19 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RFID_RESET_Pin;
 8004c8a:	2310      	movs	r3, #16
 8004c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c92:	2301      	movs	r3, #1
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c96:	2300      	movs	r3, #0
 8004c98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RFID_RESET_GPIO_Port, &GPIO_InitStruct);
 8004c9a:	f107 031c 	add.w	r3, r7, #28
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4821      	ldr	r0, [pc, #132]	; (8004d28 <MX_GPIO_Init+0x1c8>)
 8004ca2:	f7fc fa0b 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_RFID_CS_Pin;
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004caa:	2301      	movs	r3, #1
 8004cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_RFID_CS_GPIO_Port, &GPIO_InitStruct);
 8004cb6:	f107 031c 	add.w	r3, r7, #28
 8004cba:	4619      	mov	r1, r3
 8004cbc:	481b      	ldr	r0, [pc, #108]	; (8004d2c <MX_GPIO_Init+0x1cc>)
 8004cbe:	f7fc f9fd 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin 
                           PGPin PGPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin|GPIO_Motor_Control4_Pin|GPIO_Motor_control2_Pin 
 8004cc2:	f64a 430c 	movw	r3, #44044	; 0xac0c
 8004cc6:	61fb      	str	r3, [r7, #28]
                          |GPIO_Motor_Control3_Pin|GPIO_Motor_control1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004cd4:	f107 031c 	add.w	r3, r7, #28
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4815      	ldr	r0, [pc, #84]	; (8004d30 <MX_GPIO_Init+0x1d0>)
 8004cdc:	f7fc f9ee 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin 
                           PGPin */
  GPIO_InitStruct.Pin = LED_Control5_Pin|LED_Control4_Pin|LED_Control3_Pin|LED_Control2_Pin 
 8004ce0:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8004ce4:	61fb      	str	r3, [r7, #28]
                          |LED_Control1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004cee:	f107 031c 	add.w	r3, r7, #28
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	480e      	ldr	r0, [pc, #56]	; (8004d30 <MX_GPIO_Init+0x1d0>)
 8004cf6:	f7fc f9e1 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OLED_RES_Pin|BUZZER_Pin;
 8004cfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d00:	2301      	movs	r3, #1
 8004d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d04:	2300      	movs	r3, #0
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d0c:	f107 031c 	add.w	r3, r7, #28
 8004d10:	4619      	mov	r1, r3
 8004d12:	4805      	ldr	r0, [pc, #20]	; (8004d28 <MX_GPIO_Init+0x1c8>)
 8004d14:	f7fc f9d2 	bl	80010bc <HAL_GPIO_Init>

}
 8004d18:	bf00      	nop
 8004d1a:	3730      	adds	r7, #48	; 0x30
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40023800 	.word	0x40023800
 8004d24:	40021400 	.word	0x40021400
 8004d28:	40020800 	.word	0x40020800
 8004d2c:	40020400 	.word	0x40020400
 8004d30:	40021800 	.word	0x40021800
 8004d34:	10110000 	.word	0x10110000

08004d38 <__NVIC_SetPriority>:
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	6039      	str	r1, [r7, #0]
 8004d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	db0a      	blt.n	8004d62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d4c:	490d      	ldr	r1, [pc, #52]	; (8004d84 <__NVIC_SetPriority+0x4c>)
 8004d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	0112      	lsls	r2, r2, #4
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d60:	e00a      	b.n	8004d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d62:	4909      	ldr	r1, [pc, #36]	; (8004d88 <__NVIC_SetPriority+0x50>)
 8004d64:	79fb      	ldrb	r3, [r7, #7]
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	3b04      	subs	r3, #4
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	0112      	lsls	r2, r2, #4
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	440b      	add	r3, r1
 8004d76:	761a      	strb	r2, [r3, #24]
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	e000e100 	.word	0xe000e100
 8004d88:	e000ed00 	.word	0xe000ed00

08004d8c <SysTick_Config>:
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d9c:	d301      	bcc.n	8004da2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e00f      	b.n	8004dc2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004da2:	4a0a      	ldr	r2, [pc, #40]	; (8004dcc <SysTick_Config+0x40>)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004daa:	210f      	movs	r1, #15
 8004dac:	f04f 30ff 	mov.w	r0, #4294967295
 8004db0:	f7ff ffc2 	bl	8004d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004db4:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <SysTick_Config+0x40>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004dba:	4b04      	ldr	r3, [pc, #16]	; (8004dcc <SysTick_Config+0x40>)
 8004dbc:	2207      	movs	r2, #7
 8004dbe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	e000e010 	.word	0xe000e010

08004dd0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004dd8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004ddc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d013      	beq.n	8004e10 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004de8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004dec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004df0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00b      	beq.n	8004e10 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004df8:	e000      	b.n	8004dfc <ITM_SendChar+0x2c>
    {
      __NOP();
 8004dfa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8004dfc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0f9      	beq.n	8004dfa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004e06:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	b2d2      	uxtb	r2, r2
 8004e0e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004e10:	687b      	ldr	r3, [r7, #4]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
	...

08004e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e20:	b590      	push	{r4, r7, lr}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e26:	f7fb ffa5 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004e2a:	f000 f999 	bl	8005160 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  if (SysTick_Config(SystemCoreClock / 1000))
 8004e2e:	4baf      	ldr	r3, [pc, #700]	; (80050ec <main+0x2cc>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4aaf      	ldr	r2, [pc, #700]	; (80050f0 <main+0x2d0>)
 8004e34:	fba2 2303 	umull	r2, r3, r2, r3
 8004e38:	099b      	lsrs	r3, r3, #6
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff ffa6 	bl	8004d8c <SysTick_Config>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d000      	beq.n	8004e48 <main+0x28>
  {
    while (1)
 8004e46:	e7fe      	b.n	8004e46 <main+0x26>
      ;
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004e48:	f7ff fe8a 	bl	8004b60 <MX_GPIO_Init>
  MX_SPI3_Init();
 8004e4c:	f000 fa6e 	bl	800532c <MX_SPI3_Init>
  MX_TIM13_Init();
 8004e50:	f000 fd62 	bl	8005918 <MX_TIM13_Init>
  MX_TIM14_Init();
 8004e54:	f000 fdae 	bl	80059b4 <MX_TIM14_Init>
  MX_TIM4_Init();
 8004e58:	f000 fc78 	bl	800574c <MX_TIM4_Init>
  MX_TIM8_Init();
 8004e5c:	f000 fcca 	bl	80057f4 <MX_TIM8_Init>
  MX_TIM12_Init();
 8004e60:	f000 fd20 	bl	80058a4 <MX_TIM12_Init>
  MX_SPI2_Init();
 8004e64:	f000 fa2c 	bl	80052c0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8004e68:	f000 ff20 	bl	8005cac <MX_USART1_UART_Init>
  MX_GFXSIMULATOR_Init();
 8004e6c:	f7ff fe70 	bl	8004b50 <MX_GFXSIMULATOR_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8004e70:	f000 f9e6 	bl	8005240 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_init();
 8004e74:	f7ff fd74 	bl	8004960 <ssd1306_init>
  ssd1306_clear_screen(0xFF);
 8004e78:	20ff      	movs	r0, #255	; 0xff
 8004e7a:	f7ff fc17 	bl	80046ac <ssd1306_clear_screen>
  HAL_Delay(1000);
 8004e7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e82:	f7fb ffe9 	bl	8000e58 <HAL_Delay>
  ssd1306_clear_screen(0x00);
 8004e86:	2000      	movs	r0, #0
 8004e88:	f7ff fc10 	bl	80046ac <ssd1306_clear_screen>
  ssd1306_hello_word();
 8004e8c:	f7ff fe34 	bl	8004af8 <ssd1306_hello_word>

  printf("Start\n");
 8004e90:	4898      	ldr	r0, [pc, #608]	; (80050f4 <main+0x2d4>)
 8004e92:	f001 f84d 	bl	8005f30 <puts>
  ITM_SendChar('A');
 8004e96:	2041      	movs	r0, #65	; 0x41
 8004e98:	f7ff ff9a 	bl	8004dd0 <ITM_SendChar>

  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4896      	ldr	r0, [pc, #600]	; (80050f8 <main+0x2d8>)
 8004ea0:	f7fd fba2 	bl	80025e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	4895      	ldr	r0, [pc, #596]	; (80050fc <main+0x2dc>)
 8004ea8:	f7fd fb9e 	bl	80025e8 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8004eac:	213c      	movs	r1, #60	; 0x3c
 8004eae:	4894      	ldr	r0, [pc, #592]	; (8005100 <main+0x2e0>)
 8004eb0:	f7fd fc6a 	bl	8002788 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8004eb4:	213c      	movs	r1, #60	; 0x3c
 8004eb6:	4893      	ldr	r0, [pc, #588]	; (8005104 <main+0x2e4>)
 8004eb8:	f7fd fc66 	bl	8002788 <HAL_TIM_Encoder_Start>

  vLedStrip_Init(&LedStrip);
 8004ebc:	4892      	ldr	r0, [pc, #584]	; (8005108 <main+0x2e8>)
 8004ebe:	f7fe fd09 	bl	80038d4 <vLedStrip_Init>
  vMotor_init(&MotorLeft, &MotorRight);
 8004ec2:	4992      	ldr	r1, [pc, #584]	; (800510c <main+0x2ec>)
 8004ec4:	4892      	ldr	r0, [pc, #584]	; (8005110 <main+0x2f0>)
 8004ec6:	f7fe fec1 	bl	8003c4c <vMotor_init>
  vMotorPID_init(&MotorPID_Left, &MotorPID_Right);
 8004eca:	4992      	ldr	r1, [pc, #584]	; (8005114 <main+0x2f4>)
 8004ecc:	4892      	ldr	r0, [pc, #584]	; (8005118 <main+0x2f8>)
 8004ece:	f7fe ffa9 	bl	8003e24 <vMotorPID_init>

  HAL_Delay(2000);
 8004ed2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004ed6:	f7fb ffbf 	bl	8000e58 <HAL_Delay>

  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004eda:	202b      	movs	r0, #43	; 0x2b
 8004edc:	f7fc f8d3 	bl	8001086 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim12);
 8004ee0:	488e      	ldr	r0, [pc, #568]	; (800511c <main+0x2fc>)
 8004ee2:	f7fd fb27 	bl	8002534 <HAL_TIM_Base_Start_IT>

  MotorPID_Left.ValueTask = MotorPID_Right.ValueTask = 0;
 8004ee6:	4b8b      	ldr	r3, [pc, #556]	; (8005114 <main+0x2f4>)
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	61da      	str	r2, [r3, #28]
 8004eee:	4b89      	ldr	r3, [pc, #548]	; (8005114 <main+0x2f4>)
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	4a89      	ldr	r2, [pc, #548]	; (8005118 <main+0x2f8>)
 8004ef4:	61d3      	str	r3, [r2, #28]

  HAL_GPIO_WritePin(RFID_RESET_GPIO_Port, RFID_RESET_Pin, SET);
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	2110      	movs	r1, #16
 8004efa:	4889      	ldr	r0, [pc, #548]	; (8005120 <main+0x300>)
 8004efc:	f7fc faa0 	bl	8001440 <HAL_GPIO_WritePin>

  MFRC522_Init();
 8004f00:	f7ff fb24 	bl	800454c <MFRC522_Init>
  printf("MFRC522_Init\n\r");
 8004f04:	4887      	ldr	r0, [pc, #540]	; (8005124 <main+0x304>)
 8004f06:	f000 ff9f 	bl	8005e48 <iprintf>
  printf("Waiting for RFID Card...!\n\r");
 8004f0a:	4887      	ldr	r0, [pc, #540]	; (8005128 <main+0x308>)
 8004f0c:	f000 ff9c 	bl	8005e48 <iprintf>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

////////////////RFID///////////////////////
    if (Flag_read_card > 250)
 8004f10:	4b86      	ldr	r3, [pc, #536]	; (800512c <main+0x30c>)
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2bfa      	cmp	r3, #250	; 0xfa
 8004f18:	d939      	bls.n	8004f8e <main+0x16e>
    {
      watek1 =1;
 8004f1a:	4b85      	ldr	r3, [pc, #532]	; (8005130 <main+0x310>)
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	701a      	strb	r2, [r3, #0]
      Flag_read_card = 0;
 8004f20:	4b82      	ldr	r3, [pc, #520]	; (800512c <main+0x30c>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	801a      	strh	r2, [r3, #0]
      if (MFRC522_Check(CardID) == MI_OK)
 8004f26:	4883      	ldr	r0, [pc, #524]	; (8005134 <main+0x314>)
 8004f28:	f7ff f945 	bl	80041b6 <MFRC522_Check>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d127      	bne.n	8004f82 <main+0x162>
      {
        printf("[%02x-%02x-%02x-%02x] \r\n", CardID[0], CardID[1], CardID[2],
 8004f32:	4b80      	ldr	r3, [pc, #512]	; (8005134 <main+0x314>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	4619      	mov	r1, r3
 8004f38:	4b7e      	ldr	r3, [pc, #504]	; (8005134 <main+0x314>)
 8004f3a:	785b      	ldrb	r3, [r3, #1]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	4b7d      	ldr	r3, [pc, #500]	; (8005134 <main+0x314>)
 8004f40:	789b      	ldrb	r3, [r3, #2]
 8004f42:	4618      	mov	r0, r3
            CardID[3]);
 8004f44:	4b7b      	ldr	r3, [pc, #492]	; (8005134 <main+0x314>)
 8004f46:	78db      	ldrb	r3, [r3, #3]
        printf("[%02x-%02x-%02x-%02x] \r\n", CardID[0], CardID[1], CardID[2],
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	487a      	ldr	r0, [pc, #488]	; (8005138 <main+0x318>)
 8004f4e:	f000 ff7b 	bl	8005e48 <iprintf>
        for (int var = 0; var < 15; ++var) {
 8004f52:	2300      	movs	r3, #0
 8004f54:	607b      	str	r3, [r7, #4]
 8004f56:	e00a      	b.n	8004f6e <main+0x14e>
          HAL_GPIO_TogglePin(BUZZER_GPIO_Port,BUZZER_Pin);
 8004f58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f5c:	4870      	ldr	r0, [pc, #448]	; (8005120 <main+0x300>)
 8004f5e:	f7fc fa88 	bl	8001472 <HAL_GPIO_TogglePin>
          HAL_Delay(5);
 8004f62:	2005      	movs	r0, #5
 8004f64:	f7fb ff78 	bl	8000e58 <HAL_Delay>
        for (int var = 0; var < 15; ++var) {
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	607b      	str	r3, [r7, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b0e      	cmp	r3, #14
 8004f72:	ddf1      	ble.n	8004f58 <main+0x138>
        }
        HAL_GPIO_WritePin(BUZZER_GPIO_Port,BUZZER_Pin,SET);
 8004f74:	2201      	movs	r2, #1
 8004f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f7a:	4869      	ldr	r0, [pc, #420]	; (8005120 <main+0x300>)
 8004f7c:	f7fc fa60 	bl	8001440 <HAL_GPIO_WritePin>
 8004f80:	e002      	b.n	8004f88 <main+0x168>
      } else
      {
        printf("Nie wykryto karty \r\n");
 8004f82:	486e      	ldr	r0, [pc, #440]	; (800513c <main+0x31c>)
 8004f84:	f000 ffd4 	bl	8005f30 <puts>
      }
      watek1 =0;
 8004f88:	4b69      	ldr	r3, [pc, #420]	; (8005130 <main+0x310>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	701a      	strb	r2, [r3, #0]

    }

////////////////RFID_END///////////////////////

    if (FlagRead_LedStrip >= 10)
 8004f8e:	4b6c      	ldr	r3, [pc, #432]	; (8005140 <main+0x320>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b09      	cmp	r3, #9
 8004f96:	d95b      	bls.n	8005050 <main+0x230>
    {
      watek2 =1;
 8004f98:	4b6a      	ldr	r3, [pc, #424]	; (8005144 <main+0x324>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	701a      	strb	r2, [r3, #0]
      FlagRead_LedStrip = 0;
 8004f9e:	4b68      	ldr	r3, [pc, #416]	; (8005140 <main+0x320>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]
      vLedStrip_ReadStatus(&LedStrip);
 8004fa4:	4858      	ldr	r0, [pc, #352]	; (8005108 <main+0x2e8>)
 8004fa6:	f7fe fca5 	bl	80038f4 <vLedStrip_ReadStatus>
      LedStrip_Speed = vLed_control(&LedStrip);
 8004faa:	4857      	ldr	r0, [pc, #348]	; (8005108 <main+0x2e8>)
 8004fac:	f7fe fd0e 	bl	80039cc <vLed_control>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	4b65      	ldr	r3, [pc, #404]	; (8005148 <main+0x328>)
 8004fb4:	4611      	mov	r1, r2
 8004fb6:	7019      	strb	r1, [r3, #0]
 8004fb8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004fbc:	7059      	strb	r1, [r3, #1]
 8004fbe:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8004fc2:	709a      	strb	r2, [r3, #2]
      if ((speed + LedStrip_Speed.LeftSpeed) >= 0)
 8004fc4:	4b61      	ldr	r3, [pc, #388]	; (800514c <main+0x32c>)
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	b21b      	sxth	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	4b5e      	ldr	r3, [pc, #376]	; (8005148 <main+0x328>)
 8004fce:	f993 3000 	ldrsb.w	r3, [r3]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	db0f      	blt.n	8004ff8 <main+0x1d8>
      {
        MotorPID_Left.ValueTask = speed + LedStrip_Speed.LeftSpeed;
 8004fd8:	4b5c      	ldr	r3, [pc, #368]	; (800514c <main+0x32c>)
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	b21b      	sxth	r3, r3
 8004fde:	461a      	mov	r2, r3
 8004fe0:	4b59      	ldr	r3, [pc, #356]	; (8005148 <main+0x328>)
 8004fe2:	f993 3000 	ldrsb.w	r3, [r3]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	ee07 3a90 	vmov	s15, r3
 8004fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ff0:	4b49      	ldr	r3, [pc, #292]	; (8005118 <main+0x2f8>)
 8004ff2:	edc3 7a07 	vstr	s15, [r3, #28]
 8004ff6:	e003      	b.n	8005000 <main+0x1e0>
      } else
      {
        MotorPID_Left.ValueTask = 0;
 8004ff8:	4b47      	ldr	r3, [pc, #284]	; (8005118 <main+0x2f8>)
 8004ffa:	f04f 0200 	mov.w	r2, #0
 8004ffe:	61da      	str	r2, [r3, #28]
      }
      if ((speed + LedStrip_Speed.RightSpeed) >= 0)
 8005000:	4b52      	ldr	r3, [pc, #328]	; (800514c <main+0x32c>)
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	b21b      	sxth	r3, r3
 8005006:	461a      	mov	r2, r3
 8005008:	4b4f      	ldr	r3, [pc, #316]	; (8005148 <main+0x328>)
 800500a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800500e:	4413      	add	r3, r2
 8005010:	2b00      	cmp	r3, #0
 8005012:	db0f      	blt.n	8005034 <main+0x214>
      {
        MotorPID_Right.ValueTask = speed + LedStrip_Speed.RightSpeed;
 8005014:	4b4d      	ldr	r3, [pc, #308]	; (800514c <main+0x32c>)
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	b21b      	sxth	r3, r3
 800501a:	461a      	mov	r2, r3
 800501c:	4b4a      	ldr	r3, [pc, #296]	; (8005148 <main+0x328>)
 800501e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005022:	4413      	add	r3, r2
 8005024:	ee07 3a90 	vmov	s15, r3
 8005028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800502c:	4b39      	ldr	r3, [pc, #228]	; (8005114 <main+0x2f4>)
 800502e:	edc3 7a07 	vstr	s15, [r3, #28]
 8005032:	e003      	b.n	800503c <main+0x21c>
      } else
      {
        MotorPID_Right.ValueTask = 0;
 8005034:	4b37      	ldr	r3, [pc, #220]	; (8005114 <main+0x2f4>)
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	61da      	str	r2, [r3, #28]
      }
      vMotorAction_LedStrip(&MotorLeft, &MotorRight, LedStrip_Speed.Action);
 800503c:	4b42      	ldr	r3, [pc, #264]	; (8005148 <main+0x328>)
 800503e:	789b      	ldrb	r3, [r3, #2]
 8005040:	461a      	mov	r2, r3
 8005042:	4932      	ldr	r1, [pc, #200]	; (800510c <main+0x2ec>)
 8005044:	4832      	ldr	r0, [pc, #200]	; (8005110 <main+0x2f0>)
 8005046:	f7fe ffcf 	bl	8003fe8 <vMotorAction_LedStrip>

      watek2 =0;
 800504a:	4b3e      	ldr	r3, [pc, #248]	; (8005144 <main+0x324>)
 800504c:	2200      	movs	r2, #0
 800504e:	701a      	strb	r2, [r3, #0]
    }

    if (FlagPID >= 10)
 8005050:	4b3f      	ldr	r3, [pc, #252]	; (8005150 <main+0x330>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b09      	cmp	r3, #9
 8005058:	f67f af5a 	bls.w	8004f10 <main+0xf0>
    {
      watek3 =1;
 800505c:	4b3d      	ldr	r3, [pc, #244]	; (8005154 <main+0x334>)
 800505e:	2201      	movs	r2, #1
 8005060:	701a      	strb	r2, [r3, #0]
      FlagPID = 0;
 8005062:	4b3b      	ldr	r3, [pc, #236]	; (8005150 <main+0x330>)
 8005064:	2200      	movs	r2, #0
 8005066:	701a      	strb	r2, [r3, #0]
      vMotorPID_Control(&MotorPID_Left, &MotorLeft);
 8005068:	4929      	ldr	r1, [pc, #164]	; (8005110 <main+0x2f0>)
 800506a:	482b      	ldr	r0, [pc, #172]	; (8005118 <main+0x2f8>)
 800506c:	f7fe ff1c 	bl	8003ea8 <vMotorPID_Control>
      vMotorPID_Control(&MotorPID_Right, &MotorRight);
 8005070:	4926      	ldr	r1, [pc, #152]	; (800510c <main+0x2ec>)
 8005072:	4828      	ldr	r0, [pc, #160]	; (8005114 <main+0x2f4>)
 8005074:	f7fe ff18 	bl	8003ea8 <vMotorPID_Control>

      error1 = MotorPID_Left.ExecutionValue;
 8005078:	4b27      	ldr	r3, [pc, #156]	; (8005118 <main+0x2f8>)
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	4618      	mov	r0, r3
 800507e:	f7fb fa6b 	bl	8000558 <__aeabi_f2d>
 8005082:	4603      	mov	r3, r0
 8005084:	460c      	mov	r4, r1
 8005086:	4a34      	ldr	r2, [pc, #208]	; (8005158 <main+0x338>)
 8005088:	e882 0018 	stmia.w	r2, {r3, r4}
      error2 = MotorPID_Right.ExecutionValue;
 800508c:	4b21      	ldr	r3, [pc, #132]	; (8005114 <main+0x2f4>)
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	4618      	mov	r0, r3
 8005092:	f7fb fa61 	bl	8000558 <__aeabi_f2d>
 8005096:	4603      	mov	r3, r0
 8005098:	460c      	mov	r4, r1
 800509a:	4a30      	ldr	r2, [pc, #192]	; (800515c <main+0x33c>)
 800509c:	e882 0018 	stmia.w	r2, {r3, r4}

      vMotor_SetPWM(&MotorLeft, error1);
 80050a0:	4b2d      	ldr	r3, [pc, #180]	; (8005158 <main+0x338>)
 80050a2:	cb18      	ldmia	r3, {r3, r4}
 80050a4:	4618      	mov	r0, r3
 80050a6:	4621      	mov	r1, r4
 80050a8:	f7fb fcbc 	bl	8000a24 <__aeabi_d2uiz>
 80050ac:	4603      	mov	r3, r0
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	4619      	mov	r1, r3
 80050b2:	4817      	ldr	r0, [pc, #92]	; (8005110 <main+0x2f0>)
 80050b4:	f7fe fe8e 	bl	8003dd4 <vMotor_SetPWM>
      vMotor_SetPWM(&MotorRight, error2);
 80050b8:	4b28      	ldr	r3, [pc, #160]	; (800515c <main+0x33c>)
 80050ba:	cb18      	ldmia	r3, {r3, r4}
 80050bc:	4618      	mov	r0, r3
 80050be:	4621      	mov	r1, r4
 80050c0:	f7fb fcb0 	bl	8000a24 <__aeabi_d2uiz>
 80050c4:	4603      	mov	r3, r0
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	4619      	mov	r1, r3
 80050ca:	4810      	ldr	r0, [pc, #64]	; (800510c <main+0x2ec>)
 80050cc:	f7fe fe82 	bl	8003dd4 <vMotor_SetPWM>

      vClearCounter(MotorLeft.Tim_Encoder);
 80050d0:	4b0f      	ldr	r3, [pc, #60]	; (8005110 <main+0x2f0>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fe fda4 	bl	8003c22 <vClearCounter>
      vClearCounter(MotorRight.Tim_Encoder);
 80050da:	4b0c      	ldr	r3, [pc, #48]	; (800510c <main+0x2ec>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fe fd9f 	bl	8003c22 <vClearCounter>

      watek3 =0;
 80050e4:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <main+0x334>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	701a      	strb	r2, [r3, #0]
    if (Flag_read_card > 250)
 80050ea:	e711      	b.n	8004f10 <main+0xf0>
 80050ec:	20000008 	.word	0x20000008
 80050f0:	10624dd3 	.word	0x10624dd3
 80050f4:	08006d4c 	.word	0x08006d4c
 80050f8:	200006d0 	.word	0x200006d0
 80050fc:	20000710 	.word	0x20000710
 8005100:	20000690 	.word	0x20000690
 8005104:	20000650 	.word	0x20000650
 8005108:	200004a4 	.word	0x200004a4
 800510c:	20000500 	.word	0x20000500
 8005110:	20000568 	.word	0x20000568
 8005114:	200004b4 	.word	0x200004b4
 8005118:	200004d8 	.word	0x200004d8
 800511c:	20000750 	.word	0x20000750
 8005120:	40020800 	.word	0x40020800
 8005124:	08006d54 	.word	0x08006d54
 8005128:	08006d64 	.word	0x08006d64
 800512c:	200004a0 	.word	0x200004a0
 8005130:	200004fc 	.word	0x200004fc
 8005134:	20000590 	.word	0x20000590
 8005138:	08006d80 	.word	0x08006d80
 800513c:	08006d9c 	.word	0x08006d9c
 8005140:	200004a2 	.word	0x200004a2
 8005144:	200004a3 	.word	0x200004a3
 8005148:	20000528 	.word	0x20000528
 800514c:	20000006 	.word	0x20000006
 8005150:	20000524 	.word	0x20000524
 8005154:	2000058c 	.word	0x2000058c
 8005158:	20000560 	.word	0x20000560
 800515c:	20000598 	.word	0x20000598

08005160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b094      	sub	sp, #80	; 0x50
 8005164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005166:	f107 0320 	add.w	r3, r7, #32
 800516a:	2230      	movs	r2, #48	; 0x30
 800516c:	2100      	movs	r1, #0
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fe62 	bl	8005e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005174:	f107 030c 	add.w	r3, r7, #12
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	605a      	str	r2, [r3, #4]
 800517e:	609a      	str	r2, [r3, #8]
 8005180:	60da      	str	r2, [r3, #12]
 8005182:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005184:	2300      	movs	r3, #0
 8005186:	60bb      	str	r3, [r7, #8]
 8005188:	4a2b      	ldr	r2, [pc, #172]	; (8005238 <SystemClock_Config+0xd8>)
 800518a:	4b2b      	ldr	r3, [pc, #172]	; (8005238 <SystemClock_Config+0xd8>)
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005192:	6413      	str	r3, [r2, #64]	; 0x40
 8005194:	4b28      	ldr	r3, [pc, #160]	; (8005238 <SystemClock_Config+0xd8>)
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519c:	60bb      	str	r3, [r7, #8]
 800519e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80051a0:	2300      	movs	r3, #0
 80051a2:	607b      	str	r3, [r7, #4]
 80051a4:	4a25      	ldr	r2, [pc, #148]	; (800523c <SystemClock_Config+0xdc>)
 80051a6:	4b25      	ldr	r3, [pc, #148]	; (800523c <SystemClock_Config+0xdc>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	4b22      	ldr	r3, [pc, #136]	; (800523c <SystemClock_Config+0xdc>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80051b8:	607b      	str	r3, [r7, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80051bc:	2302      	movs	r3, #2
 80051be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80051c0:	2301      	movs	r3, #1
 80051c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80051c4:	2310      	movs	r3, #16
 80051c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051c8:	2302      	movs	r3, #2
 80051ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80051cc:	2300      	movs	r3, #0
 80051ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80051d0:	2308      	movs	r3, #8
 80051d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80051d4:	23b4      	movs	r3, #180	; 0xb4
 80051d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80051d8:	2302      	movs	r3, #2
 80051da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80051dc:	2304      	movs	r3, #4
 80051de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051e0:	f107 0320 	add.w	r3, r7, #32
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fc f9af 	bl	8001548 <HAL_RCC_OscConfig>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80051f0:	f000 f85e 	bl	80052b0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80051f4:	f7fc f958 	bl	80014a8 <HAL_PWREx_EnableOverDrive>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80051fe:	f000 f857 	bl	80052b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005202:	230f      	movs	r3, #15
 8005204:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005206:	2302      	movs	r3, #2
 8005208:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800520e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005212:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005218:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800521a:	f107 030c 	add.w	r3, r7, #12
 800521e:	2105      	movs	r1, #5
 8005220:	4618      	mov	r0, r3
 8005222:	f7fc fbd3 	bl	80019cc <HAL_RCC_ClockConfig>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800522c:	f000 f840 	bl	80052b0 <Error_Handler>
  }
}
 8005230:	bf00      	nop
 8005232:	3750      	adds	r7, #80	; 0x50
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40023800 	.word	0x40023800
 800523c:	40007000 	.word	0x40007000

08005240 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  /* TIM8_BRK_TIM12_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005244:	2200      	movs	r2, #0
 8005246:	2100      	movs	r1, #0
 8005248:	202b      	movs	r0, #43	; 0x2b
 800524a:	f7fb ff00 	bl	800104e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800524e:	202b      	movs	r0, #43	; 0x2b
 8005250:	f7fb ff19 	bl	8001086 <HAL_NVIC_EnableIRQ>
}
 8005254:	bf00      	nop
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM12)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a0e      	ldr	r2, [pc, #56]	; (80052a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d106      	bne.n	8005278 <HAL_TIM_PeriodElapsedCallback+0x20>
    Flag_read_card++;
 800526a:	4b0e      	ldr	r3, [pc, #56]	; (80052a4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	b29b      	uxth	r3, r3
 8005270:	3301      	adds	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8005276:	801a      	strh	r2, [r3, #0]
    FlagPID++;
 8005278:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	b2db      	uxtb	r3, r3
 800527e:	3301      	adds	r3, #1
 8005280:	b2da      	uxtb	r2, r3
 8005282:	4b09      	ldr	r3, [pc, #36]	; (80052a8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8005284:	701a      	strb	r2, [r3, #0]
  FlagRead_LedStrip++;
 8005286:	4b09      	ldr	r3, [pc, #36]	; (80052ac <HAL_TIM_PeriodElapsedCallback+0x54>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	b2db      	uxtb	r3, r3
 800528c:	3301      	adds	r3, #1
 800528e:	b2da      	uxtb	r2, r3
 8005290:	4b06      	ldr	r3, [pc, #24]	; (80052ac <HAL_TIM_PeriodElapsedCallback+0x54>)
 8005292:	701a      	strb	r2, [r3, #0]
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	40001800 	.word	0x40001800
 80052a4:	200004a0 	.word	0x200004a0
 80052a8:	20000524 	.word	0x20000524
 80052ac:	200004a2 	.word	0x200004a2

080052b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80052b4:	bf00      	nop
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
	...

080052c0 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80052c4:	4b17      	ldr	r3, [pc, #92]	; (8005324 <MX_SPI2_Init+0x64>)
 80052c6:	4a18      	ldr	r2, [pc, #96]	; (8005328 <MX_SPI2_Init+0x68>)
 80052c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80052ca:	4b16      	ldr	r3, [pc, #88]	; (8005324 <MX_SPI2_Init+0x64>)
 80052cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80052d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80052d2:	4b14      	ldr	r3, [pc, #80]	; (8005324 <MX_SPI2_Init+0x64>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80052d8:	4b12      	ldr	r3, [pc, #72]	; (8005324 <MX_SPI2_Init+0x64>)
 80052da:	2200      	movs	r2, #0
 80052dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80052de:	4b11      	ldr	r3, [pc, #68]	; (8005324 <MX_SPI2_Init+0x64>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80052e4:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <MX_SPI2_Init+0x64>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80052ea:	4b0e      	ldr	r3, [pc, #56]	; (8005324 <MX_SPI2_Init+0x64>)
 80052ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80052f2:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <MX_SPI2_Init+0x64>)
 80052f4:	2228      	movs	r2, #40	; 0x28
 80052f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80052f8:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <MX_SPI2_Init+0x64>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80052fe:	4b09      	ldr	r3, [pc, #36]	; (8005324 <MX_SPI2_Init+0x64>)
 8005300:	2200      	movs	r2, #0
 8005302:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005304:	4b07      	ldr	r3, [pc, #28]	; (8005324 <MX_SPI2_Init+0x64>)
 8005306:	2200      	movs	r2, #0
 8005308:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800530a:	4b06      	ldr	r3, [pc, #24]	; (8005324 <MX_SPI2_Init+0x64>)
 800530c:	220a      	movs	r2, #10
 800530e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005310:	4804      	ldr	r0, [pc, #16]	; (8005324 <MX_SPI2_Init+0x64>)
 8005312:	f7fc fd27 	bl	8001d64 <HAL_SPI_Init>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800531c:	f7ff ffc8 	bl	80052b0 <Error_Handler>
  }

}
 8005320:	bf00      	nop
 8005322:	bd80      	pop	{r7, pc}
 8005324:	200005a0 	.word	0x200005a0
 8005328:	40003800 	.word	0x40003800

0800532c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8005330:	4b17      	ldr	r3, [pc, #92]	; (8005390 <MX_SPI3_Init+0x64>)
 8005332:	4a18      	ldr	r2, [pc, #96]	; (8005394 <MX_SPI3_Init+0x68>)
 8005334:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005336:	4b16      	ldr	r3, [pc, #88]	; (8005390 <MX_SPI3_Init+0x64>)
 8005338:	f44f 7282 	mov.w	r2, #260	; 0x104
 800533c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800533e:	4b14      	ldr	r3, [pc, #80]	; (8005390 <MX_SPI3_Init+0x64>)
 8005340:	2200      	movs	r2, #0
 8005342:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005344:	4b12      	ldr	r3, [pc, #72]	; (8005390 <MX_SPI3_Init+0x64>)
 8005346:	2200      	movs	r2, #0
 8005348:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800534a:	4b11      	ldr	r3, [pc, #68]	; (8005390 <MX_SPI3_Init+0x64>)
 800534c:	2200      	movs	r2, #0
 800534e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005350:	4b0f      	ldr	r3, [pc, #60]	; (8005390 <MX_SPI3_Init+0x64>)
 8005352:	2200      	movs	r2, #0
 8005354:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005356:	4b0e      	ldr	r3, [pc, #56]	; (8005390 <MX_SPI3_Init+0x64>)
 8005358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800535c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800535e:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <MX_SPI3_Init+0x64>)
 8005360:	2200      	movs	r2, #0
 8005362:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005364:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <MX_SPI3_Init+0x64>)
 8005366:	2200      	movs	r2, #0
 8005368:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800536a:	4b09      	ldr	r3, [pc, #36]	; (8005390 <MX_SPI3_Init+0x64>)
 800536c:	2200      	movs	r2, #0
 800536e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005370:	4b07      	ldr	r3, [pc, #28]	; (8005390 <MX_SPI3_Init+0x64>)
 8005372:	2200      	movs	r2, #0
 8005374:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8005376:	4b06      	ldr	r3, [pc, #24]	; (8005390 <MX_SPI3_Init+0x64>)
 8005378:	220a      	movs	r2, #10
 800537a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800537c:	4804      	ldr	r0, [pc, #16]	; (8005390 <MX_SPI3_Init+0x64>)
 800537e:	f7fc fcf1 	bl	8001d64 <HAL_SPI_Init>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8005388:	f7ff ff92 	bl	80052b0 <Error_Handler>
  }

}
 800538c:	bf00      	nop
 800538e:	bd80      	pop	{r7, pc}
 8005390:	200005f8 	.word	0x200005f8
 8005394:	40003c00 	.word	0x40003c00

08005398 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b08c      	sub	sp, #48	; 0x30
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053a0:	f107 031c 	add.w	r3, r7, #28
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	605a      	str	r2, [r3, #4]
 80053aa:	609a      	str	r2, [r3, #8]
 80053ac:	60da      	str	r2, [r3, #12]
 80053ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a33      	ldr	r2, [pc, #204]	; (8005484 <HAL_SPI_MspInit+0xec>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d12d      	bne.n	8005416 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80053ba:	2300      	movs	r3, #0
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	4a32      	ldr	r2, [pc, #200]	; (8005488 <HAL_SPI_MspInit+0xf0>)
 80053c0:	4b31      	ldr	r3, [pc, #196]	; (8005488 <HAL_SPI_MspInit+0xf0>)
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053c8:	6413      	str	r3, [r2, #64]	; 0x40
 80053ca:	4b2f      	ldr	r3, [pc, #188]	; (8005488 <HAL_SPI_MspInit+0xf0>)
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053d2:	61bb      	str	r3, [r7, #24]
 80053d4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	4a2b      	ldr	r2, [pc, #172]	; (8005488 <HAL_SPI_MspInit+0xf0>)
 80053dc:	4b2a      	ldr	r3, [pc, #168]	; (8005488 <HAL_SPI_MspInit+0xf0>)
 80053de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e0:	f043 0302 	orr.w	r3, r3, #2
 80053e4:	6313      	str	r3, [r2, #48]	; 0x30
 80053e6:	4b28      	ldr	r3, [pc, #160]	; (8005488 <HAL_SPI_MspInit+0xf0>)
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80053f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80053f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053f8:	2302      	movs	r3, #2
 80053fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053fc:	2300      	movs	r3, #0
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005400:	2303      	movs	r3, #3
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005404:	2305      	movs	r3, #5
 8005406:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005408:	f107 031c 	add.w	r3, r7, #28
 800540c:	4619      	mov	r1, r3
 800540e:	481f      	ldr	r0, [pc, #124]	; (800548c <HAL_SPI_MspInit+0xf4>)
 8005410:	f7fb fe54 	bl	80010bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005414:	e031      	b.n	800547a <HAL_SPI_MspInit+0xe2>
  else if(spiHandle->Instance==SPI3)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1d      	ldr	r2, [pc, #116]	; (8005490 <HAL_SPI_MspInit+0xf8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d12c      	bne.n	800547a <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005420:	2300      	movs	r3, #0
 8005422:	613b      	str	r3, [r7, #16]
 8005424:	4a18      	ldr	r2, [pc, #96]	; (8005488 <HAL_SPI_MspInit+0xf0>)
 8005426:	4b18      	ldr	r3, [pc, #96]	; (8005488 <HAL_SPI_MspInit+0xf0>)
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542e:	6413      	str	r3, [r2, #64]	; 0x40
 8005430:	4b15      	ldr	r3, [pc, #84]	; (8005488 <HAL_SPI_MspInit+0xf0>)
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800543c:	2300      	movs	r3, #0
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	4a11      	ldr	r2, [pc, #68]	; (8005488 <HAL_SPI_MspInit+0xf0>)
 8005442:	4b11      	ldr	r3, [pc, #68]	; (8005488 <HAL_SPI_MspInit+0xf0>)
 8005444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005446:	f043 0304 	orr.w	r3, r3, #4
 800544a:	6313      	str	r3, [r2, #48]	; 0x30
 800544c:	4b0e      	ldr	r3, [pc, #56]	; (8005488 <HAL_SPI_MspInit+0xf0>)
 800544e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005458:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800545c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800545e:	2302      	movs	r3, #2
 8005460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005462:	2300      	movs	r3, #0
 8005464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005466:	2303      	movs	r3, #3
 8005468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800546a:	2306      	movs	r3, #6
 800546c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800546e:	f107 031c 	add.w	r3, r7, #28
 8005472:	4619      	mov	r1, r3
 8005474:	4807      	ldr	r0, [pc, #28]	; (8005494 <HAL_SPI_MspInit+0xfc>)
 8005476:	f7fb fe21 	bl	80010bc <HAL_GPIO_Init>
}
 800547a:	bf00      	nop
 800547c:	3730      	adds	r7, #48	; 0x30
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	40003800 	.word	0x40003800
 8005488:	40023800 	.word	0x40023800
 800548c:	40020400 	.word	0x40020400
 8005490:	40003c00 	.word	0x40003c00
 8005494:	40020800 	.word	0x40020800

08005498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800549e:	2300      	movs	r3, #0
 80054a0:	607b      	str	r3, [r7, #4]
 80054a2:	4a10      	ldr	r2, [pc, #64]	; (80054e4 <HAL_MspInit+0x4c>)
 80054a4:	4b0f      	ldr	r3, [pc, #60]	; (80054e4 <HAL_MspInit+0x4c>)
 80054a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054ac:	6453      	str	r3, [r2, #68]	; 0x44
 80054ae:	4b0d      	ldr	r3, [pc, #52]	; (80054e4 <HAL_MspInit+0x4c>)
 80054b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054b6:	607b      	str	r3, [r7, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054ba:	2300      	movs	r3, #0
 80054bc:	603b      	str	r3, [r7, #0]
 80054be:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <HAL_MspInit+0x4c>)
 80054c0:	4b08      	ldr	r3, [pc, #32]	; (80054e4 <HAL_MspInit+0x4c>)
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c8:	6413      	str	r3, [r2, #64]	; 0x40
 80054ca:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <HAL_MspInit+0x4c>)
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	40023800 	.word	0x40023800

080054e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80054ec:	bf00      	nop
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054f6:	b480      	push	{r7}
 80054f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054fa:	e7fe      	b.n	80054fa <HardFault_Handler+0x4>

080054fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005500:	e7fe      	b.n	8005500 <MemManage_Handler+0x4>

08005502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005502:	b480      	push	{r7}
 8005504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005506:	e7fe      	b.n	8005506 <BusFault_Handler+0x4>

08005508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800550c:	e7fe      	b.n	800550c <UsageFault_Handler+0x4>

0800550e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800550e:	b480      	push	{r7}
 8005510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005512:	bf00      	nop
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005520:	bf00      	nop
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800552a:	b480      	push	{r7}
 800552c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800552e:	bf00      	nop
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800553c:	f7fb fc6c 	bl	8000e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005540:	bf00      	nop
 8005542:	bd80      	pop	{r7, pc}

08005544 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005548:	4803      	ldr	r0, [pc, #12]	; (8005558 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800554a:	f7fd f954 	bl	80027f6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800554e:	4803      	ldr	r0, [pc, #12]	; (800555c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8005550:	f7fd f951 	bl	80027f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8005554:	bf00      	nop
 8005556:	bd80      	pop	{r7, pc}
 8005558:	20000650 	.word	0x20000650
 800555c:	20000750 	.word	0x20000750

08005560 <ITM_SendChar>:
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005568:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800556c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d013      	beq.n	80055a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8005578:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800557c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8005580:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00b      	beq.n	80055a0 <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 8005588:	e000      	b.n	800558c <ITM_SendChar+0x2c>
      __NOP();
 800558a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800558c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0f9      	beq.n	800558a <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8005596:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	b2d2      	uxtb	r2, r2
 800559e:	701a      	strb	r2, [r3, #0]
  return (ch);
 80055a0:	687b      	ldr	r3, [r7, #4]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80055ae:	b590      	push	{r4, r7, lr}
 80055b0:	b087      	sub	sp, #28
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055ba:	2300      	movs	r3, #0
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	e00a      	b.n	80055d6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80055c0:	68bc      	ldr	r4, [r7, #8]
 80055c2:	1c63      	adds	r3, r4, #1
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	f3af 8000 	nop.w
 80055ca:	4603      	mov	r3, r0
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	3301      	adds	r3, #1
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	429a      	cmp	r2, r3
 80055dc:	dbf0      	blt.n	80055c0 <_read+0x12>
	}

return len;
 80055de:	687b      	ldr	r3, [r7, #4]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	371c      	adds	r7, #28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd90      	pop	{r4, r7, pc}

080055e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	e009      	b.n	800560e <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	60ba      	str	r2, [r7, #8]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff ffac 	bl	8005560 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	3301      	adds	r3, #1
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	429a      	cmp	r2, r3
 8005614:	dbf1      	blt.n	80055fa <_write+0x12>
	}
	return len;
 8005616:	687b      	ldr	r3, [r7, #4]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005628:	4b11      	ldr	r3, [pc, #68]	; (8005670 <_sbrk+0x50>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d102      	bne.n	8005636 <_sbrk+0x16>
		heap_end = &end;
 8005630:	4b0f      	ldr	r3, [pc, #60]	; (8005670 <_sbrk+0x50>)
 8005632:	4a10      	ldr	r2, [pc, #64]	; (8005674 <_sbrk+0x54>)
 8005634:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005636:	4b0e      	ldr	r3, [pc, #56]	; (8005670 <_sbrk+0x50>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800563c:	4b0c      	ldr	r3, [pc, #48]	; (8005670 <_sbrk+0x50>)
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4413      	add	r3, r2
 8005644:	466a      	mov	r2, sp
 8005646:	4293      	cmp	r3, r2
 8005648:	d907      	bls.n	800565a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800564a:	f000 fbcb 	bl	8005de4 <__errno>
 800564e:	4602      	mov	r2, r0
 8005650:	230c      	movs	r3, #12
 8005652:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005654:	f04f 33ff 	mov.w	r3, #4294967295
 8005658:	e006      	b.n	8005668 <_sbrk+0x48>
	}

	heap_end += incr;
 800565a:	4b05      	ldr	r3, [pc, #20]	; (8005670 <_sbrk+0x50>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4413      	add	r3, r2
 8005662:	4a03      	ldr	r2, [pc, #12]	; (8005670 <_sbrk+0x50>)
 8005664:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005666:	68fb      	ldr	r3, [r7, #12]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	20000490 	.word	0x20000490
 8005674:	200007d4 	.word	0x200007d4

08005678 <_close>:

int _close(int file)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
	return -1;
 8005680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005684:	4618      	mov	r0, r3
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056a0:	605a      	str	r2, [r3, #4]
	return 0;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <_isatty>:

int _isatty(int file)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
	return 1;
 80056b8:	2301      	movs	r3, #1
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b085      	sub	sp, #20
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	607a      	str	r2, [r7, #4]
	return 0;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80056e4:	4a16      	ldr	r2, [pc, #88]	; (8005740 <SystemInit+0x60>)
 80056e6:	4b16      	ldr	r3, [pc, #88]	; (8005740 <SystemInit+0x60>)
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80056f4:	4a13      	ldr	r2, [pc, #76]	; (8005744 <SystemInit+0x64>)
 80056f6:	4b13      	ldr	r3, [pc, #76]	; (8005744 <SystemInit+0x64>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f043 0301 	orr.w	r3, r3, #1
 80056fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005700:	4b10      	ldr	r3, [pc, #64]	; (8005744 <SystemInit+0x64>)
 8005702:	2200      	movs	r2, #0
 8005704:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005706:	4a0f      	ldr	r2, [pc, #60]	; (8005744 <SystemInit+0x64>)
 8005708:	4b0e      	ldr	r3, [pc, #56]	; (8005744 <SystemInit+0x64>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005714:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005716:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <SystemInit+0x64>)
 8005718:	4a0b      	ldr	r2, [pc, #44]	; (8005748 <SystemInit+0x68>)
 800571a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800571c:	4a09      	ldr	r2, [pc, #36]	; (8005744 <SystemInit+0x64>)
 800571e:	4b09      	ldr	r3, [pc, #36]	; (8005744 <SystemInit+0x64>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005726:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005728:	4b06      	ldr	r3, [pc, #24]	; (8005744 <SystemInit+0x64>)
 800572a:	2200      	movs	r2, #0
 800572c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800572e:	4b04      	ldr	r3, [pc, #16]	; (8005740 <SystemInit+0x60>)
 8005730:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005734:	609a      	str	r2, [r3, #8]
#endif
}
 8005736:	bf00      	nop
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	e000ed00 	.word	0xe000ed00
 8005744:	40023800 	.word	0x40023800
 8005748:	24003010 	.word	0x24003010

0800574c <MX_TIM4_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08c      	sub	sp, #48	; 0x30
 8005750:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8005752:	f107 030c 	add.w	r3, r7, #12
 8005756:	2224      	movs	r2, #36	; 0x24
 8005758:	2100      	movs	r1, #0
 800575a:	4618      	mov	r0, r3
 800575c:	f000 fb6c 	bl	8005e38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005760:	1d3b      	adds	r3, r7, #4
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8005768:	4b20      	ldr	r3, [pc, #128]	; (80057ec <MX_TIM4_Init+0xa0>)
 800576a:	4a21      	ldr	r2, [pc, #132]	; (80057f0 <MX_TIM4_Init+0xa4>)
 800576c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800576e:	4b1f      	ldr	r3, [pc, #124]	; (80057ec <MX_TIM4_Init+0xa0>)
 8005770:	2200      	movs	r2, #0
 8005772:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005774:	4b1d      	ldr	r3, [pc, #116]	; (80057ec <MX_TIM4_Init+0xa0>)
 8005776:	2200      	movs	r2, #0
 8005778:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800577a:	4b1c      	ldr	r3, [pc, #112]	; (80057ec <MX_TIM4_Init+0xa0>)
 800577c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005780:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005782:	4b1a      	ldr	r3, [pc, #104]	; (80057ec <MX_TIM4_Init+0xa0>)
 8005784:	2200      	movs	r2, #0
 8005786:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005788:	4b18      	ldr	r3, [pc, #96]	; (80057ec <MX_TIM4_Init+0xa0>)
 800578a:	2200      	movs	r2, #0
 800578c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800578e:	2303      	movs	r3, #3
 8005790:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005792:	2300      	movs	r3, #0
 8005794:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005796:	2301      	movs	r3, #1
 8005798:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800579a:	2300      	movs	r3, #0
 800579c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800579e:	230f      	movs	r3, #15
 80057a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80057a2:	2300      	movs	r3, #0
 80057a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80057a6:	2301      	movs	r3, #1
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80057aa:	2300      	movs	r3, #0
 80057ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80057ae:	230f      	movs	r3, #15
 80057b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80057b2:	f107 030c 	add.w	r3, r7, #12
 80057b6:	4619      	mov	r1, r3
 80057b8:	480c      	ldr	r0, [pc, #48]	; (80057ec <MX_TIM4_Init+0xa0>)
 80057ba:	f7fc ff53 	bl	8002664 <HAL_TIM_Encoder_Init>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80057c4:	f7ff fd74 	bl	80052b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057c8:	2300      	movs	r3, #0
 80057ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80057d0:	1d3b      	adds	r3, r7, #4
 80057d2:	4619      	mov	r1, r3
 80057d4:	4805      	ldr	r0, [pc, #20]	; (80057ec <MX_TIM4_Init+0xa0>)
 80057d6:	f7fd fdcc 	bl	8003372 <HAL_TIMEx_MasterConfigSynchronization>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80057e0:	f7ff fd66 	bl	80052b0 <Error_Handler>
  }

}
 80057e4:	bf00      	nop
 80057e6:	3730      	adds	r7, #48	; 0x30
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20000690 	.word	0x20000690
 80057f0:	40000800 	.word	0x40000800

080057f4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b08c      	sub	sp, #48	; 0x30
 80057f8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80057fa:	f107 030c 	add.w	r3, r7, #12
 80057fe:	2224      	movs	r2, #36	; 0x24
 8005800:	2100      	movs	r1, #0
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fb18 	bl	8005e38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005808:	1d3b      	adds	r3, r7, #4
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 8005810:	4b22      	ldr	r3, [pc, #136]	; (800589c <MX_TIM8_Init+0xa8>)
 8005812:	4a23      	ldr	r2, [pc, #140]	; (80058a0 <MX_TIM8_Init+0xac>)
 8005814:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005816:	4b21      	ldr	r3, [pc, #132]	; (800589c <MX_TIM8_Init+0xa8>)
 8005818:	2200      	movs	r2, #0
 800581a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800581c:	4b1f      	ldr	r3, [pc, #124]	; (800589c <MX_TIM8_Init+0xa8>)
 800581e:	2200      	movs	r2, #0
 8005820:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8005822:	4b1e      	ldr	r3, [pc, #120]	; (800589c <MX_TIM8_Init+0xa8>)
 8005824:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005828:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800582a:	4b1c      	ldr	r3, [pc, #112]	; (800589c <MX_TIM8_Init+0xa8>)
 800582c:	2200      	movs	r2, #0
 800582e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005830:	4b1a      	ldr	r3, [pc, #104]	; (800589c <MX_TIM8_Init+0xa8>)
 8005832:	2200      	movs	r2, #0
 8005834:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005836:	4b19      	ldr	r3, [pc, #100]	; (800589c <MX_TIM8_Init+0xa8>)
 8005838:	2200      	movs	r2, #0
 800583a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800583c:	2303      	movs	r3, #3
 800583e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005840:	2300      	movs	r3, #0
 8005842:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005844:	2301      	movs	r3, #1
 8005846:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005848:	2300      	movs	r3, #0
 800584a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800584c:	230f      	movs	r3, #15
 800584e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005850:	2300      	movs	r3, #0
 8005852:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005854:	2301      	movs	r3, #1
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005858:	2300      	movs	r3, #0
 800585a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800585c:	230f      	movs	r3, #15
 800585e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8005860:	f107 030c 	add.w	r3, r7, #12
 8005864:	4619      	mov	r1, r3
 8005866:	480d      	ldr	r0, [pc, #52]	; (800589c <MX_TIM8_Init+0xa8>)
 8005868:	f7fc fefc 	bl	8002664 <HAL_TIM_Encoder_Init>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8005872:	f7ff fd1d 	bl	80052b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005876:	2300      	movs	r3, #0
 8005878:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800587a:	2300      	movs	r3, #0
 800587c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800587e:	1d3b      	adds	r3, r7, #4
 8005880:	4619      	mov	r1, r3
 8005882:	4806      	ldr	r0, [pc, #24]	; (800589c <MX_TIM8_Init+0xa8>)
 8005884:	f7fd fd75 	bl	8003372 <HAL_TIMEx_MasterConfigSynchronization>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800588e:	f7ff fd0f 	bl	80052b0 <Error_Handler>
  }

}
 8005892:	bf00      	nop
 8005894:	3730      	adds	r7, #48	; 0x30
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	20000650 	.word	0x20000650
 80058a0:	40010400 	.word	0x40010400

080058a4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80058aa:	463b      	mov	r3, r7
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	605a      	str	r2, [r3, #4]
 80058b2:	609a      	str	r2, [r3, #8]
 80058b4:	60da      	str	r2, [r3, #12]

  htim12.Instance = TIM12;
 80058b6:	4b16      	ldr	r3, [pc, #88]	; (8005910 <MX_TIM12_Init+0x6c>)
 80058b8:	4a16      	ldr	r2, [pc, #88]	; (8005914 <MX_TIM12_Init+0x70>)
 80058ba:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 40000-1;
 80058bc:	4b14      	ldr	r3, [pc, #80]	; (8005910 <MX_TIM12_Init+0x6c>)
 80058be:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80058c2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058c4:	4b12      	ldr	r3, [pc, #72]	; (8005910 <MX_TIM12_Init+0x6c>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1;
 80058ca:	4b11      	ldr	r3, [pc, #68]	; (8005910 <MX_TIM12_Init+0x6c>)
 80058cc:	2201      	movs	r2, #1
 80058ce:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80058d0:	4b0f      	ldr	r3, [pc, #60]	; (8005910 <MX_TIM12_Init+0x6c>)
 80058d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058d6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80058d8:	4b0d      	ldr	r3, [pc, #52]	; (8005910 <MX_TIM12_Init+0x6c>)
 80058da:	2280      	movs	r2, #128	; 0x80
 80058dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80058de:	480c      	ldr	r0, [pc, #48]	; (8005910 <MX_TIM12_Init+0x6c>)
 80058e0:	f7fc fdfd 	bl	80024de <HAL_TIM_Base_Init>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 80058ea:	f7ff fce1 	bl	80052b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058f2:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80058f4:	463b      	mov	r3, r7
 80058f6:	4619      	mov	r1, r3
 80058f8:	4805      	ldr	r0, [pc, #20]	; (8005910 <MX_TIM12_Init+0x6c>)
 80058fa:	f7fd f94b 	bl	8002b94 <HAL_TIM_ConfigClockSource>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8005904:	f7ff fcd4 	bl	80052b0 <Error_Handler>
  }

}
 8005908:	bf00      	nop
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20000750 	.word	0x20000750
 8005914:	40001800 	.word	0x40001800

08005918 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b088      	sub	sp, #32
 800591c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800591e:	1d3b      	adds	r3, r7, #4
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	605a      	str	r2, [r3, #4]
 8005926:	609a      	str	r2, [r3, #8]
 8005928:	60da      	str	r2, [r3, #12]
 800592a:	611a      	str	r2, [r3, #16]
 800592c:	615a      	str	r2, [r3, #20]
 800592e:	619a      	str	r2, [r3, #24]

  htim13.Instance = TIM13;
 8005930:	4b1e      	ldr	r3, [pc, #120]	; (80059ac <MX_TIM13_Init+0x94>)
 8005932:	4a1f      	ldr	r2, [pc, #124]	; (80059b0 <MX_TIM13_Init+0x98>)
 8005934:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 45-1;
 8005936:	4b1d      	ldr	r3, [pc, #116]	; (80059ac <MX_TIM13_Init+0x94>)
 8005938:	222c      	movs	r2, #44	; 0x2c
 800593a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800593c:	4b1b      	ldr	r3, [pc, #108]	; (80059ac <MX_TIM13_Init+0x94>)
 800593e:	2200      	movs	r2, #0
 8005940:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100;
 8005942:	4b1a      	ldr	r3, [pc, #104]	; (80059ac <MX_TIM13_Init+0x94>)
 8005944:	2264      	movs	r2, #100	; 0x64
 8005946:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005948:	4b18      	ldr	r3, [pc, #96]	; (80059ac <MX_TIM13_Init+0x94>)
 800594a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800594e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005950:	4b16      	ldr	r3, [pc, #88]	; (80059ac <MX_TIM13_Init+0x94>)
 8005952:	2280      	movs	r2, #128	; 0x80
 8005954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005956:	4815      	ldr	r0, [pc, #84]	; (80059ac <MX_TIM13_Init+0x94>)
 8005958:	f7fc fdc1 	bl	80024de <HAL_TIM_Base_Init>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8005962:	f7ff fca5 	bl	80052b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8005966:	4811      	ldr	r0, [pc, #68]	; (80059ac <MX_TIM13_Init+0x94>)
 8005968:	f7fc fe08 	bl	800257c <HAL_TIM_PWM_Init>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8005972:	f7ff fc9d 	bl	80052b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005976:	2360      	movs	r3, #96	; 0x60
 8005978:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 80;
 800597a:	2350      	movs	r3, #80	; 0x50
 800597c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800597e:	2300      	movs	r3, #0
 8005980:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005982:	2300      	movs	r3, #0
 8005984:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005986:	1d3b      	adds	r3, r7, #4
 8005988:	2200      	movs	r2, #0
 800598a:	4619      	mov	r1, r3
 800598c:	4807      	ldr	r0, [pc, #28]	; (80059ac <MX_TIM13_Init+0x94>)
 800598e:	f7fd f83b 	bl	8002a08 <HAL_TIM_PWM_ConfigChannel>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8005998:	f7ff fc8a 	bl	80052b0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim13);
 800599c:	4803      	ldr	r0, [pc, #12]	; (80059ac <MX_TIM13_Init+0x94>)
 800599e:	f000 f923 	bl	8005be8 <HAL_TIM_MspPostInit>

}
 80059a2:	bf00      	nop
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	200006d0 	.word	0x200006d0
 80059b0:	40001c00 	.word	0x40001c00

080059b4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80059ba:	1d3b      	adds	r3, r7, #4
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	605a      	str	r2, [r3, #4]
 80059c2:	609a      	str	r2, [r3, #8]
 80059c4:	60da      	str	r2, [r3, #12]
 80059c6:	611a      	str	r2, [r3, #16]
 80059c8:	615a      	str	r2, [r3, #20]
 80059ca:	619a      	str	r2, [r3, #24]

  htim14.Instance = TIM14;
 80059cc:	4b1e      	ldr	r3, [pc, #120]	; (8005a48 <MX_TIM14_Init+0x94>)
 80059ce:	4a1f      	ldr	r2, [pc, #124]	; (8005a4c <MX_TIM14_Init+0x98>)
 80059d0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 45-1;
 80059d2:	4b1d      	ldr	r3, [pc, #116]	; (8005a48 <MX_TIM14_Init+0x94>)
 80059d4:	222c      	movs	r2, #44	; 0x2c
 80059d6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059d8:	4b1b      	ldr	r3, [pc, #108]	; (8005a48 <MX_TIM14_Init+0x94>)
 80059da:	2200      	movs	r2, #0
 80059dc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100;
 80059de:	4b1a      	ldr	r3, [pc, #104]	; (8005a48 <MX_TIM14_Init+0x94>)
 80059e0:	2264      	movs	r2, #100	; 0x64
 80059e2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80059e4:	4b18      	ldr	r3, [pc, #96]	; (8005a48 <MX_TIM14_Init+0x94>)
 80059e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ea:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80059ec:	4b16      	ldr	r3, [pc, #88]	; (8005a48 <MX_TIM14_Init+0x94>)
 80059ee:	2280      	movs	r2, #128	; 0x80
 80059f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80059f2:	4815      	ldr	r0, [pc, #84]	; (8005a48 <MX_TIM14_Init+0x94>)
 80059f4:	f7fc fd73 	bl	80024de <HAL_TIM_Base_Init>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80059fe:	f7ff fc57 	bl	80052b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8005a02:	4811      	ldr	r0, [pc, #68]	; (8005a48 <MX_TIM14_Init+0x94>)
 8005a04:	f7fc fdba 	bl	800257c <HAL_TIM_PWM_Init>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8005a0e:	f7ff fc4f 	bl	80052b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a12:	2360      	movs	r3, #96	; 0x60
 8005a14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 80;
 8005a16:	2350      	movs	r3, #80	; 0x50
 8005a18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005a22:	1d3b      	adds	r3, r7, #4
 8005a24:	2200      	movs	r2, #0
 8005a26:	4619      	mov	r1, r3
 8005a28:	4807      	ldr	r0, [pc, #28]	; (8005a48 <MX_TIM14_Init+0x94>)
 8005a2a:	f7fc ffed 	bl	8002a08 <HAL_TIM_PWM_ConfigChannel>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8005a34:	f7ff fc3c 	bl	80052b0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 8005a38:	4803      	ldr	r0, [pc, #12]	; (8005a48 <MX_TIM14_Init+0x94>)
 8005a3a:	f000 f8d5 	bl	8005be8 <HAL_TIM_MspPostInit>

}
 8005a3e:	bf00      	nop
 8005a40:	3720      	adds	r7, #32
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	20000710 	.word	0x20000710
 8005a4c:	40002000 	.word	0x40002000

08005a50 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08c      	sub	sp, #48	; 0x30
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a58:	f107 031c 	add.w	r3, r7, #28
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	605a      	str	r2, [r3, #4]
 8005a62:	609a      	str	r2, [r3, #8]
 8005a64:	60da      	str	r2, [r3, #12]
 8005a66:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a32      	ldr	r2, [pc, #200]	; (8005b38 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d12d      	bne.n	8005ace <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005a72:	2300      	movs	r3, #0
 8005a74:	61bb      	str	r3, [r7, #24]
 8005a76:	4a31      	ldr	r2, [pc, #196]	; (8005b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8005a78:	4b30      	ldr	r3, [pc, #192]	; (8005b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7c:	f043 0304 	orr.w	r3, r3, #4
 8005a80:	6413      	str	r3, [r2, #64]	; 0x40
 8005a82:	4b2e      	ldr	r3, [pc, #184]	; (8005b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	f003 0304 	and.w	r3, r3, #4
 8005a8a:	61bb      	str	r3, [r7, #24]
 8005a8c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a8e:	2300      	movs	r3, #0
 8005a90:	617b      	str	r3, [r7, #20]
 8005a92:	4a2a      	ldr	r2, [pc, #168]	; (8005b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8005a94:	4b29      	ldr	r3, [pc, #164]	; (8005b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8005a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a98:	f043 0308 	orr.w	r3, r3, #8
 8005a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a9e:	4b27      	ldr	r3, [pc, #156]	; (8005b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa2:	f003 0308 	and.w	r3, r3, #8
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005aaa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005abc:	2302      	movs	r3, #2
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ac0:	f107 031c 	add.w	r3, r7, #28
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	481e      	ldr	r0, [pc, #120]	; (8005b40 <HAL_TIM_Encoder_MspInit+0xf0>)
 8005ac8:	f7fb faf8 	bl	80010bc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8005acc:	e030      	b.n	8005b30 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM8)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a1c      	ldr	r2, [pc, #112]	; (8005b44 <HAL_TIM_Encoder_MspInit+0xf4>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d12b      	bne.n	8005b30 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005ad8:	2300      	movs	r3, #0
 8005ada:	613b      	str	r3, [r7, #16]
 8005adc:	4a17      	ldr	r2, [pc, #92]	; (8005b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8005ade:	4b17      	ldr	r3, [pc, #92]	; (8005b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8005ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae2:	f043 0302 	orr.w	r3, r3, #2
 8005ae6:	6453      	str	r3, [r2, #68]	; 0x44
 8005ae8:	4b14      	ldr	r3, [pc, #80]	; (8005b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8005aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	4a10      	ldr	r2, [pc, #64]	; (8005b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8005afa:	4b10      	ldr	r3, [pc, #64]	; (8005b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8005afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afe:	f043 0304 	orr.w	r3, r3, #4
 8005b02:	6313      	str	r3, [r2, #48]	; 0x30
 8005b04:	4b0d      	ldr	r3, [pc, #52]	; (8005b3c <HAL_TIM_Encoder_MspInit+0xec>)
 8005b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005b10:	23c0      	movs	r3, #192	; 0xc0
 8005b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b14:	2302      	movs	r3, #2
 8005b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005b20:	2303      	movs	r3, #3
 8005b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b24:	f107 031c 	add.w	r3, r7, #28
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4807      	ldr	r0, [pc, #28]	; (8005b48 <HAL_TIM_Encoder_MspInit+0xf8>)
 8005b2c:	f7fb fac6 	bl	80010bc <HAL_GPIO_Init>
}
 8005b30:	bf00      	nop
 8005b32:	3730      	adds	r7, #48	; 0x30
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40000800 	.word	0x40000800
 8005b3c:	40023800 	.word	0x40023800
 8005b40:	40020c00 	.word	0x40020c00
 8005b44:	40010400 	.word	0x40010400
 8005b48:	40020800 	.word	0x40020800

08005b4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM12)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a1f      	ldr	r2, [pc, #124]	; (8005bd8 <HAL_TIM_Base_MspInit+0x8c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d10e      	bne.n	8005b7c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8005b5e:	2300      	movs	r3, #0
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	4a1e      	ldr	r2, [pc, #120]	; (8005bdc <HAL_TIM_Base_MspInit+0x90>)
 8005b64:	4b1d      	ldr	r3, [pc, #116]	; (8005bdc <HAL_TIM_Base_MspInit+0x90>)
 8005b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b6e:	4b1b      	ldr	r3, [pc, #108]	; (8005bdc <HAL_TIM_Base_MspInit+0x90>)
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8005b7a:	e026      	b.n	8005bca <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM13)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a17      	ldr	r2, [pc, #92]	; (8005be0 <HAL_TIM_Base_MspInit+0x94>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d10e      	bne.n	8005ba4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005b86:	2300      	movs	r3, #0
 8005b88:	613b      	str	r3, [r7, #16]
 8005b8a:	4a14      	ldr	r2, [pc, #80]	; (8005bdc <HAL_TIM_Base_MspInit+0x90>)
 8005b8c:	4b13      	ldr	r3, [pc, #76]	; (8005bdc <HAL_TIM_Base_MspInit+0x90>)
 8005b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b94:	6413      	str	r3, [r2, #64]	; 0x40
 8005b96:	4b11      	ldr	r3, [pc, #68]	; (8005bdc <HAL_TIM_Base_MspInit+0x90>)
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9e:	613b      	str	r3, [r7, #16]
 8005ba0:	693b      	ldr	r3, [r7, #16]
}
 8005ba2:	e012      	b.n	8005bca <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM14)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a0e      	ldr	r2, [pc, #56]	; (8005be4 <HAL_TIM_Base_MspInit+0x98>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d10d      	bne.n	8005bca <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	4a0a      	ldr	r2, [pc, #40]	; (8005bdc <HAL_TIM_Base_MspInit+0x90>)
 8005bb4:	4b09      	ldr	r3, [pc, #36]	; (8005bdc <HAL_TIM_Base_MspInit+0x90>)
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8005bbe:	4b07      	ldr	r3, [pc, #28]	; (8005bdc <HAL_TIM_Base_MspInit+0x90>)
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
}
 8005bca:	bf00      	nop
 8005bcc:	371c      	adds	r7, #28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	40001800 	.word	0x40001800
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	40001c00 	.word	0x40001c00
 8005be4:	40002000 	.word	0x40002000

08005be8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08a      	sub	sp, #40	; 0x28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bf0:	f107 0314 	add.w	r3, r7, #20
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	605a      	str	r2, [r3, #4]
 8005bfa:	609a      	str	r2, [r3, #8]
 8005bfc:	60da      	str	r2, [r3, #12]
 8005bfe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a25      	ldr	r2, [pc, #148]	; (8005c9c <HAL_TIM_MspPostInit+0xb4>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d11f      	bne.n	8005c4a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	613b      	str	r3, [r7, #16]
 8005c0e:	4a24      	ldr	r2, [pc, #144]	; (8005ca0 <HAL_TIM_MspPostInit+0xb8>)
 8005c10:	4b23      	ldr	r3, [pc, #140]	; (8005ca0 <HAL_TIM_MspPostInit+0xb8>)
 8005c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c14:	f043 0320 	orr.w	r3, r3, #32
 8005c18:	6313      	str	r3, [r2, #48]	; 0x30
 8005c1a:	4b21      	ldr	r3, [pc, #132]	; (8005ca0 <HAL_TIM_MspPostInit+0xb8>)
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1e:	f003 0320 	and.w	r3, r3, #32
 8005c22:	613b      	str	r3, [r7, #16]
 8005c24:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration    
    PF8     ------> TIM13_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005c26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c30:	2300      	movs	r3, #0
 8005c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c34:	2300      	movs	r3, #0
 8005c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8005c38:	2309      	movs	r3, #9
 8005c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005c3c:	f107 0314 	add.w	r3, r7, #20
 8005c40:	4619      	mov	r1, r3
 8005c42:	4818      	ldr	r0, [pc, #96]	; (8005ca4 <HAL_TIM_MspPostInit+0xbc>)
 8005c44:	f7fb fa3a 	bl	80010bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8005c48:	e023      	b.n	8005c92 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM14)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a16      	ldr	r2, [pc, #88]	; (8005ca8 <HAL_TIM_MspPostInit+0xc0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d11e      	bne.n	8005c92 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	4a11      	ldr	r2, [pc, #68]	; (8005ca0 <HAL_TIM_MspPostInit+0xb8>)
 8005c5a:	4b11      	ldr	r3, [pc, #68]	; (8005ca0 <HAL_TIM_MspPostInit+0xb8>)
 8005c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5e:	f043 0320 	orr.w	r3, r3, #32
 8005c62:	6313      	str	r3, [r2, #48]	; 0x30
 8005c64:	4b0e      	ldr	r3, [pc, #56]	; (8005ca0 <HAL_TIM_MspPostInit+0xb8>)
 8005c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	60fb      	str	r3, [r7, #12]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c76:	2302      	movs	r3, #2
 8005c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8005c82:	2309      	movs	r3, #9
 8005c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005c86:	f107 0314 	add.w	r3, r7, #20
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4805      	ldr	r0, [pc, #20]	; (8005ca4 <HAL_TIM_MspPostInit+0xbc>)
 8005c8e:	f7fb fa15 	bl	80010bc <HAL_GPIO_Init>
}
 8005c92:	bf00      	nop
 8005c94:	3728      	adds	r7, #40	; 0x28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	40001c00 	.word	0x40001c00
 8005ca0:	40023800 	.word	0x40023800
 8005ca4:	40021400 	.word	0x40021400
 8005ca8:	40002000 	.word	0x40002000

08005cac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8005cb0:	4b11      	ldr	r3, [pc, #68]	; (8005cf8 <MX_USART1_UART_Init+0x4c>)
 8005cb2:	4a12      	ldr	r2, [pc, #72]	; (8005cfc <MX_USART1_UART_Init+0x50>)
 8005cb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005cb6:	4b10      	ldr	r3, [pc, #64]	; (8005cf8 <MX_USART1_UART_Init+0x4c>)
 8005cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005cbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005cbe:	4b0e      	ldr	r3, [pc, #56]	; (8005cf8 <MX_USART1_UART_Init+0x4c>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005cc4:	4b0c      	ldr	r3, [pc, #48]	; (8005cf8 <MX_USART1_UART_Init+0x4c>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005cca:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <MX_USART1_UART_Init+0x4c>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005cd0:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <MX_USART1_UART_Init+0x4c>)
 8005cd2:	220c      	movs	r2, #12
 8005cd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005cd6:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <MX_USART1_UART_Init+0x4c>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005cdc:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <MX_USART1_UART_Init+0x4c>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005ce2:	4805      	ldr	r0, [pc, #20]	; (8005cf8 <MX_USART1_UART_Init+0x4c>)
 8005ce4:	f7fd fb9e 	bl	8003424 <HAL_UART_Init>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005cee:	f7ff fadf 	bl	80052b0 <Error_Handler>
  }

}
 8005cf2:	bf00      	nop
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000790 	.word	0x20000790
 8005cfc:	40011000 	.word	0x40011000

08005d00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08a      	sub	sp, #40	; 0x28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d08:	f107 0314 	add.w	r3, r7, #20
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	605a      	str	r2, [r3, #4]
 8005d12:	609a      	str	r2, [r3, #8]
 8005d14:	60da      	str	r2, [r3, #12]
 8005d16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a19      	ldr	r2, [pc, #100]	; (8005d84 <HAL_UART_MspInit+0x84>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d12c      	bne.n	8005d7c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d22:	2300      	movs	r3, #0
 8005d24:	613b      	str	r3, [r7, #16]
 8005d26:	4a18      	ldr	r2, [pc, #96]	; (8005d88 <HAL_UART_MspInit+0x88>)
 8005d28:	4b17      	ldr	r3, [pc, #92]	; (8005d88 <HAL_UART_MspInit+0x88>)
 8005d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2c:	f043 0310 	orr.w	r3, r3, #16
 8005d30:	6453      	str	r3, [r2, #68]	; 0x44
 8005d32:	4b15      	ldr	r3, [pc, #84]	; (8005d88 <HAL_UART_MspInit+0x88>)
 8005d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d36:	f003 0310 	and.w	r3, r3, #16
 8005d3a:	613b      	str	r3, [r7, #16]
 8005d3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	4a11      	ldr	r2, [pc, #68]	; (8005d88 <HAL_UART_MspInit+0x88>)
 8005d44:	4b10      	ldr	r3, [pc, #64]	; (8005d88 <HAL_UART_MspInit+0x88>)
 8005d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d48:	f043 0301 	orr.w	r3, r3, #1
 8005d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8005d4e:	4b0e      	ldr	r3, [pc, #56]	; (8005d88 <HAL_UART_MspInit+0x88>)
 8005d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005d5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d60:	2302      	movs	r3, #2
 8005d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d64:	2301      	movs	r3, #1
 8005d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005d6c:	2307      	movs	r3, #7
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d70:	f107 0314 	add.w	r3, r7, #20
 8005d74:	4619      	mov	r1, r3
 8005d76:	4805      	ldr	r0, [pc, #20]	; (8005d8c <HAL_UART_MspInit+0x8c>)
 8005d78:	f7fb f9a0 	bl	80010bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005d7c:	bf00      	nop
 8005d7e:	3728      	adds	r7, #40	; 0x28
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40011000 	.word	0x40011000
 8005d88:	40023800 	.word	0x40023800
 8005d8c:	40020000 	.word	0x40020000

08005d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8005d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005dc8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005d94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005d96:	e003      	b.n	8005da0 <LoopCopyDataInit>

08005d98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005d98:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005d9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005d9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005d9e:	3104      	adds	r1, #4

08005da0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005da0:	480b      	ldr	r0, [pc, #44]	; (8005dd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005da2:	4b0c      	ldr	r3, [pc, #48]	; (8005dd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005da4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005da6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005da8:	d3f6      	bcc.n	8005d98 <CopyDataInit>
  ldr  r2, =_sbss
 8005daa:	4a0b      	ldr	r2, [pc, #44]	; (8005dd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005dac:	e002      	b.n	8005db4 <LoopFillZerobss>

08005dae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005dae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005db0:	f842 3b04 	str.w	r3, [r2], #4

08005db4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005db4:	4b09      	ldr	r3, [pc, #36]	; (8005ddc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005db6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005db8:	d3f9      	bcc.n	8005dae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005dba:	f7ff fc91 	bl	80056e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005dbe:	f000 f817 	bl	8005df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005dc2:	f7ff f82d 	bl	8004e20 <main>
  bx  lr    
 8005dc6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005dc8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8005dcc:	080078d4 	.word	0x080078d4
  ldr  r0, =_sdata
 8005dd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005dd4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8005dd8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8005ddc:	200007d4 	.word	0x200007d4

08005de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005de0:	e7fe      	b.n	8005de0 <ADC_IRQHandler>
	...

08005de4 <__errno>:
 8005de4:	4b01      	ldr	r3, [pc, #4]	; (8005dec <__errno+0x8>)
 8005de6:	6818      	ldr	r0, [r3, #0]
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	2000000c 	.word	0x2000000c

08005df0 <__libc_init_array>:
 8005df0:	b570      	push	{r4, r5, r6, lr}
 8005df2:	4e0d      	ldr	r6, [pc, #52]	; (8005e28 <__libc_init_array+0x38>)
 8005df4:	4c0d      	ldr	r4, [pc, #52]	; (8005e2c <__libc_init_array+0x3c>)
 8005df6:	1ba4      	subs	r4, r4, r6
 8005df8:	10a4      	asrs	r4, r4, #2
 8005dfa:	2500      	movs	r5, #0
 8005dfc:	42a5      	cmp	r5, r4
 8005dfe:	d109      	bne.n	8005e14 <__libc_init_array+0x24>
 8005e00:	4e0b      	ldr	r6, [pc, #44]	; (8005e30 <__libc_init_array+0x40>)
 8005e02:	4c0c      	ldr	r4, [pc, #48]	; (8005e34 <__libc_init_array+0x44>)
 8005e04:	f000 ff7c 	bl	8006d00 <_init>
 8005e08:	1ba4      	subs	r4, r4, r6
 8005e0a:	10a4      	asrs	r4, r4, #2
 8005e0c:	2500      	movs	r5, #0
 8005e0e:	42a5      	cmp	r5, r4
 8005e10:	d105      	bne.n	8005e1e <__libc_init_array+0x2e>
 8005e12:	bd70      	pop	{r4, r5, r6, pc}
 8005e14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e18:	4798      	blx	r3
 8005e1a:	3501      	adds	r5, #1
 8005e1c:	e7ee      	b.n	8005dfc <__libc_init_array+0xc>
 8005e1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e22:	4798      	blx	r3
 8005e24:	3501      	adds	r5, #1
 8005e26:	e7f2      	b.n	8005e0e <__libc_init_array+0x1e>
 8005e28:	080078cc 	.word	0x080078cc
 8005e2c:	080078cc 	.word	0x080078cc
 8005e30:	080078cc 	.word	0x080078cc
 8005e34:	080078d0 	.word	0x080078d0

08005e38 <memset>:
 8005e38:	4402      	add	r2, r0
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d100      	bne.n	8005e42 <memset+0xa>
 8005e40:	4770      	bx	lr
 8005e42:	f803 1b01 	strb.w	r1, [r3], #1
 8005e46:	e7f9      	b.n	8005e3c <memset+0x4>

08005e48 <iprintf>:
 8005e48:	b40f      	push	{r0, r1, r2, r3}
 8005e4a:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <iprintf+0x2c>)
 8005e4c:	b513      	push	{r0, r1, r4, lr}
 8005e4e:	681c      	ldr	r4, [r3, #0]
 8005e50:	b124      	cbz	r4, 8005e5c <iprintf+0x14>
 8005e52:	69a3      	ldr	r3, [r4, #24]
 8005e54:	b913      	cbnz	r3, 8005e5c <iprintf+0x14>
 8005e56:	4620      	mov	r0, r4
 8005e58:	f000 fa24 	bl	80062a4 <__sinit>
 8005e5c:	ab05      	add	r3, sp, #20
 8005e5e:	9a04      	ldr	r2, [sp, #16]
 8005e60:	68a1      	ldr	r1, [r4, #8]
 8005e62:	9301      	str	r3, [sp, #4]
 8005e64:	4620      	mov	r0, r4
 8005e66:	f000 fbe1 	bl	800662c <_vfiprintf_r>
 8005e6a:	b002      	add	sp, #8
 8005e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e70:	b004      	add	sp, #16
 8005e72:	4770      	bx	lr
 8005e74:	2000000c 	.word	0x2000000c

08005e78 <_puts_r>:
 8005e78:	b570      	push	{r4, r5, r6, lr}
 8005e7a:	460e      	mov	r6, r1
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	b118      	cbz	r0, 8005e88 <_puts_r+0x10>
 8005e80:	6983      	ldr	r3, [r0, #24]
 8005e82:	b90b      	cbnz	r3, 8005e88 <_puts_r+0x10>
 8005e84:	f000 fa0e 	bl	80062a4 <__sinit>
 8005e88:	69ab      	ldr	r3, [r5, #24]
 8005e8a:	68ac      	ldr	r4, [r5, #8]
 8005e8c:	b913      	cbnz	r3, 8005e94 <_puts_r+0x1c>
 8005e8e:	4628      	mov	r0, r5
 8005e90:	f000 fa08 	bl	80062a4 <__sinit>
 8005e94:	4b23      	ldr	r3, [pc, #140]	; (8005f24 <_puts_r+0xac>)
 8005e96:	429c      	cmp	r4, r3
 8005e98:	d117      	bne.n	8005eca <_puts_r+0x52>
 8005e9a:	686c      	ldr	r4, [r5, #4]
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	071b      	lsls	r3, r3, #28
 8005ea0:	d51d      	bpl.n	8005ede <_puts_r+0x66>
 8005ea2:	6923      	ldr	r3, [r4, #16]
 8005ea4:	b1db      	cbz	r3, 8005ede <_puts_r+0x66>
 8005ea6:	3e01      	subs	r6, #1
 8005ea8:	68a3      	ldr	r3, [r4, #8]
 8005eaa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	60a3      	str	r3, [r4, #8]
 8005eb2:	b9e9      	cbnz	r1, 8005ef0 <_puts_r+0x78>
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	da2e      	bge.n	8005f16 <_puts_r+0x9e>
 8005eb8:	4622      	mov	r2, r4
 8005eba:	210a      	movs	r1, #10
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	f000 f83f 	bl	8005f40 <__swbuf_r>
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d011      	beq.n	8005eea <_puts_r+0x72>
 8005ec6:	200a      	movs	r0, #10
 8005ec8:	bd70      	pop	{r4, r5, r6, pc}
 8005eca:	4b17      	ldr	r3, [pc, #92]	; (8005f28 <_puts_r+0xb0>)
 8005ecc:	429c      	cmp	r4, r3
 8005ece:	d101      	bne.n	8005ed4 <_puts_r+0x5c>
 8005ed0:	68ac      	ldr	r4, [r5, #8]
 8005ed2:	e7e3      	b.n	8005e9c <_puts_r+0x24>
 8005ed4:	4b15      	ldr	r3, [pc, #84]	; (8005f2c <_puts_r+0xb4>)
 8005ed6:	429c      	cmp	r4, r3
 8005ed8:	bf08      	it	eq
 8005eda:	68ec      	ldreq	r4, [r5, #12]
 8005edc:	e7de      	b.n	8005e9c <_puts_r+0x24>
 8005ede:	4621      	mov	r1, r4
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	f000 f87f 	bl	8005fe4 <__swsetup_r>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d0dd      	beq.n	8005ea6 <_puts_r+0x2e>
 8005eea:	f04f 30ff 	mov.w	r0, #4294967295
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	da04      	bge.n	8005efe <_puts_r+0x86>
 8005ef4:	69a2      	ldr	r2, [r4, #24]
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	db06      	blt.n	8005f08 <_puts_r+0x90>
 8005efa:	290a      	cmp	r1, #10
 8005efc:	d004      	beq.n	8005f08 <_puts_r+0x90>
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	6022      	str	r2, [r4, #0]
 8005f04:	7019      	strb	r1, [r3, #0]
 8005f06:	e7cf      	b.n	8005ea8 <_puts_r+0x30>
 8005f08:	4622      	mov	r2, r4
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	f000 f818 	bl	8005f40 <__swbuf_r>
 8005f10:	3001      	adds	r0, #1
 8005f12:	d1c9      	bne.n	8005ea8 <_puts_r+0x30>
 8005f14:	e7e9      	b.n	8005eea <_puts_r+0x72>
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	200a      	movs	r0, #10
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	6022      	str	r2, [r4, #0]
 8005f1e:	7018      	strb	r0, [r3, #0]
 8005f20:	bd70      	pop	{r4, r5, r6, pc}
 8005f22:	bf00      	nop
 8005f24:	08007850 	.word	0x08007850
 8005f28:	08007870 	.word	0x08007870
 8005f2c:	08007830 	.word	0x08007830

08005f30 <puts>:
 8005f30:	4b02      	ldr	r3, [pc, #8]	; (8005f3c <puts+0xc>)
 8005f32:	4601      	mov	r1, r0
 8005f34:	6818      	ldr	r0, [r3, #0]
 8005f36:	f7ff bf9f 	b.w	8005e78 <_puts_r>
 8005f3a:	bf00      	nop
 8005f3c:	2000000c 	.word	0x2000000c

08005f40 <__swbuf_r>:
 8005f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f42:	460e      	mov	r6, r1
 8005f44:	4614      	mov	r4, r2
 8005f46:	4605      	mov	r5, r0
 8005f48:	b118      	cbz	r0, 8005f52 <__swbuf_r+0x12>
 8005f4a:	6983      	ldr	r3, [r0, #24]
 8005f4c:	b90b      	cbnz	r3, 8005f52 <__swbuf_r+0x12>
 8005f4e:	f000 f9a9 	bl	80062a4 <__sinit>
 8005f52:	4b21      	ldr	r3, [pc, #132]	; (8005fd8 <__swbuf_r+0x98>)
 8005f54:	429c      	cmp	r4, r3
 8005f56:	d12a      	bne.n	8005fae <__swbuf_r+0x6e>
 8005f58:	686c      	ldr	r4, [r5, #4]
 8005f5a:	69a3      	ldr	r3, [r4, #24]
 8005f5c:	60a3      	str	r3, [r4, #8]
 8005f5e:	89a3      	ldrh	r3, [r4, #12]
 8005f60:	071a      	lsls	r2, r3, #28
 8005f62:	d52e      	bpl.n	8005fc2 <__swbuf_r+0x82>
 8005f64:	6923      	ldr	r3, [r4, #16]
 8005f66:	b363      	cbz	r3, 8005fc2 <__swbuf_r+0x82>
 8005f68:	6923      	ldr	r3, [r4, #16]
 8005f6a:	6820      	ldr	r0, [r4, #0]
 8005f6c:	1ac0      	subs	r0, r0, r3
 8005f6e:	6963      	ldr	r3, [r4, #20]
 8005f70:	b2f6      	uxtb	r6, r6
 8005f72:	4298      	cmp	r0, r3
 8005f74:	4637      	mov	r7, r6
 8005f76:	db04      	blt.n	8005f82 <__swbuf_r+0x42>
 8005f78:	4621      	mov	r1, r4
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	f000 f928 	bl	80061d0 <_fflush_r>
 8005f80:	bb28      	cbnz	r0, 8005fce <__swbuf_r+0x8e>
 8005f82:	68a3      	ldr	r3, [r4, #8]
 8005f84:	3b01      	subs	r3, #1
 8005f86:	60a3      	str	r3, [r4, #8]
 8005f88:	6823      	ldr	r3, [r4, #0]
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	6022      	str	r2, [r4, #0]
 8005f8e:	701e      	strb	r6, [r3, #0]
 8005f90:	6963      	ldr	r3, [r4, #20]
 8005f92:	3001      	adds	r0, #1
 8005f94:	4298      	cmp	r0, r3
 8005f96:	d004      	beq.n	8005fa2 <__swbuf_r+0x62>
 8005f98:	89a3      	ldrh	r3, [r4, #12]
 8005f9a:	07db      	lsls	r3, r3, #31
 8005f9c:	d519      	bpl.n	8005fd2 <__swbuf_r+0x92>
 8005f9e:	2e0a      	cmp	r6, #10
 8005fa0:	d117      	bne.n	8005fd2 <__swbuf_r+0x92>
 8005fa2:	4621      	mov	r1, r4
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	f000 f913 	bl	80061d0 <_fflush_r>
 8005faa:	b190      	cbz	r0, 8005fd2 <__swbuf_r+0x92>
 8005fac:	e00f      	b.n	8005fce <__swbuf_r+0x8e>
 8005fae:	4b0b      	ldr	r3, [pc, #44]	; (8005fdc <__swbuf_r+0x9c>)
 8005fb0:	429c      	cmp	r4, r3
 8005fb2:	d101      	bne.n	8005fb8 <__swbuf_r+0x78>
 8005fb4:	68ac      	ldr	r4, [r5, #8]
 8005fb6:	e7d0      	b.n	8005f5a <__swbuf_r+0x1a>
 8005fb8:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <__swbuf_r+0xa0>)
 8005fba:	429c      	cmp	r4, r3
 8005fbc:	bf08      	it	eq
 8005fbe:	68ec      	ldreq	r4, [r5, #12]
 8005fc0:	e7cb      	b.n	8005f5a <__swbuf_r+0x1a>
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f000 f80d 	bl	8005fe4 <__swsetup_r>
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	d0cc      	beq.n	8005f68 <__swbuf_r+0x28>
 8005fce:	f04f 37ff 	mov.w	r7, #4294967295
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	08007850 	.word	0x08007850
 8005fdc:	08007870 	.word	0x08007870
 8005fe0:	08007830 	.word	0x08007830

08005fe4 <__swsetup_r>:
 8005fe4:	4b32      	ldr	r3, [pc, #200]	; (80060b0 <__swsetup_r+0xcc>)
 8005fe6:	b570      	push	{r4, r5, r6, lr}
 8005fe8:	681d      	ldr	r5, [r3, #0]
 8005fea:	4606      	mov	r6, r0
 8005fec:	460c      	mov	r4, r1
 8005fee:	b125      	cbz	r5, 8005ffa <__swsetup_r+0x16>
 8005ff0:	69ab      	ldr	r3, [r5, #24]
 8005ff2:	b913      	cbnz	r3, 8005ffa <__swsetup_r+0x16>
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f000 f955 	bl	80062a4 <__sinit>
 8005ffa:	4b2e      	ldr	r3, [pc, #184]	; (80060b4 <__swsetup_r+0xd0>)
 8005ffc:	429c      	cmp	r4, r3
 8005ffe:	d10f      	bne.n	8006020 <__swsetup_r+0x3c>
 8006000:	686c      	ldr	r4, [r5, #4]
 8006002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006006:	b29a      	uxth	r2, r3
 8006008:	0715      	lsls	r5, r2, #28
 800600a:	d42c      	bmi.n	8006066 <__swsetup_r+0x82>
 800600c:	06d0      	lsls	r0, r2, #27
 800600e:	d411      	bmi.n	8006034 <__swsetup_r+0x50>
 8006010:	2209      	movs	r2, #9
 8006012:	6032      	str	r2, [r6, #0]
 8006014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006018:	81a3      	strh	r3, [r4, #12]
 800601a:	f04f 30ff 	mov.w	r0, #4294967295
 800601e:	bd70      	pop	{r4, r5, r6, pc}
 8006020:	4b25      	ldr	r3, [pc, #148]	; (80060b8 <__swsetup_r+0xd4>)
 8006022:	429c      	cmp	r4, r3
 8006024:	d101      	bne.n	800602a <__swsetup_r+0x46>
 8006026:	68ac      	ldr	r4, [r5, #8]
 8006028:	e7eb      	b.n	8006002 <__swsetup_r+0x1e>
 800602a:	4b24      	ldr	r3, [pc, #144]	; (80060bc <__swsetup_r+0xd8>)
 800602c:	429c      	cmp	r4, r3
 800602e:	bf08      	it	eq
 8006030:	68ec      	ldreq	r4, [r5, #12]
 8006032:	e7e6      	b.n	8006002 <__swsetup_r+0x1e>
 8006034:	0751      	lsls	r1, r2, #29
 8006036:	d512      	bpl.n	800605e <__swsetup_r+0x7a>
 8006038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800603a:	b141      	cbz	r1, 800604e <__swsetup_r+0x6a>
 800603c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006040:	4299      	cmp	r1, r3
 8006042:	d002      	beq.n	800604a <__swsetup_r+0x66>
 8006044:	4630      	mov	r0, r6
 8006046:	f000 fa1b 	bl	8006480 <_free_r>
 800604a:	2300      	movs	r3, #0
 800604c:	6363      	str	r3, [r4, #52]	; 0x34
 800604e:	89a3      	ldrh	r3, [r4, #12]
 8006050:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006054:	81a3      	strh	r3, [r4, #12]
 8006056:	2300      	movs	r3, #0
 8006058:	6063      	str	r3, [r4, #4]
 800605a:	6923      	ldr	r3, [r4, #16]
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	89a3      	ldrh	r3, [r4, #12]
 8006060:	f043 0308 	orr.w	r3, r3, #8
 8006064:	81a3      	strh	r3, [r4, #12]
 8006066:	6923      	ldr	r3, [r4, #16]
 8006068:	b94b      	cbnz	r3, 800607e <__swsetup_r+0x9a>
 800606a:	89a3      	ldrh	r3, [r4, #12]
 800606c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006074:	d003      	beq.n	800607e <__swsetup_r+0x9a>
 8006076:	4621      	mov	r1, r4
 8006078:	4630      	mov	r0, r6
 800607a:	f000 f9c1 	bl	8006400 <__smakebuf_r>
 800607e:	89a2      	ldrh	r2, [r4, #12]
 8006080:	f012 0301 	ands.w	r3, r2, #1
 8006084:	d00c      	beq.n	80060a0 <__swsetup_r+0xbc>
 8006086:	2300      	movs	r3, #0
 8006088:	60a3      	str	r3, [r4, #8]
 800608a:	6963      	ldr	r3, [r4, #20]
 800608c:	425b      	negs	r3, r3
 800608e:	61a3      	str	r3, [r4, #24]
 8006090:	6923      	ldr	r3, [r4, #16]
 8006092:	b953      	cbnz	r3, 80060aa <__swsetup_r+0xc6>
 8006094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006098:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800609c:	d1ba      	bne.n	8006014 <__swsetup_r+0x30>
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	0792      	lsls	r2, r2, #30
 80060a2:	bf58      	it	pl
 80060a4:	6963      	ldrpl	r3, [r4, #20]
 80060a6:	60a3      	str	r3, [r4, #8]
 80060a8:	e7f2      	b.n	8006090 <__swsetup_r+0xac>
 80060aa:	2000      	movs	r0, #0
 80060ac:	e7f7      	b.n	800609e <__swsetup_r+0xba>
 80060ae:	bf00      	nop
 80060b0:	2000000c 	.word	0x2000000c
 80060b4:	08007850 	.word	0x08007850
 80060b8:	08007870 	.word	0x08007870
 80060bc:	08007830 	.word	0x08007830

080060c0 <__sflush_r>:
 80060c0:	898a      	ldrh	r2, [r1, #12]
 80060c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c6:	4605      	mov	r5, r0
 80060c8:	0710      	lsls	r0, r2, #28
 80060ca:	460c      	mov	r4, r1
 80060cc:	d45a      	bmi.n	8006184 <__sflush_r+0xc4>
 80060ce:	684b      	ldr	r3, [r1, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	dc05      	bgt.n	80060e0 <__sflush_r+0x20>
 80060d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	dc02      	bgt.n	80060e0 <__sflush_r+0x20>
 80060da:	2000      	movs	r0, #0
 80060dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060e2:	2e00      	cmp	r6, #0
 80060e4:	d0f9      	beq.n	80060da <__sflush_r+0x1a>
 80060e6:	2300      	movs	r3, #0
 80060e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80060ec:	682f      	ldr	r7, [r5, #0]
 80060ee:	602b      	str	r3, [r5, #0]
 80060f0:	d033      	beq.n	800615a <__sflush_r+0x9a>
 80060f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060f4:	89a3      	ldrh	r3, [r4, #12]
 80060f6:	075a      	lsls	r2, r3, #29
 80060f8:	d505      	bpl.n	8006106 <__sflush_r+0x46>
 80060fa:	6863      	ldr	r3, [r4, #4]
 80060fc:	1ac0      	subs	r0, r0, r3
 80060fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006100:	b10b      	cbz	r3, 8006106 <__sflush_r+0x46>
 8006102:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006104:	1ac0      	subs	r0, r0, r3
 8006106:	2300      	movs	r3, #0
 8006108:	4602      	mov	r2, r0
 800610a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800610c:	6a21      	ldr	r1, [r4, #32]
 800610e:	4628      	mov	r0, r5
 8006110:	47b0      	blx	r6
 8006112:	1c43      	adds	r3, r0, #1
 8006114:	89a3      	ldrh	r3, [r4, #12]
 8006116:	d106      	bne.n	8006126 <__sflush_r+0x66>
 8006118:	6829      	ldr	r1, [r5, #0]
 800611a:	291d      	cmp	r1, #29
 800611c:	d84b      	bhi.n	80061b6 <__sflush_r+0xf6>
 800611e:	4a2b      	ldr	r2, [pc, #172]	; (80061cc <__sflush_r+0x10c>)
 8006120:	40ca      	lsrs	r2, r1
 8006122:	07d6      	lsls	r6, r2, #31
 8006124:	d547      	bpl.n	80061b6 <__sflush_r+0xf6>
 8006126:	2200      	movs	r2, #0
 8006128:	6062      	str	r2, [r4, #4]
 800612a:	04d9      	lsls	r1, r3, #19
 800612c:	6922      	ldr	r2, [r4, #16]
 800612e:	6022      	str	r2, [r4, #0]
 8006130:	d504      	bpl.n	800613c <__sflush_r+0x7c>
 8006132:	1c42      	adds	r2, r0, #1
 8006134:	d101      	bne.n	800613a <__sflush_r+0x7a>
 8006136:	682b      	ldr	r3, [r5, #0]
 8006138:	b903      	cbnz	r3, 800613c <__sflush_r+0x7c>
 800613a:	6560      	str	r0, [r4, #84]	; 0x54
 800613c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800613e:	602f      	str	r7, [r5, #0]
 8006140:	2900      	cmp	r1, #0
 8006142:	d0ca      	beq.n	80060da <__sflush_r+0x1a>
 8006144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006148:	4299      	cmp	r1, r3
 800614a:	d002      	beq.n	8006152 <__sflush_r+0x92>
 800614c:	4628      	mov	r0, r5
 800614e:	f000 f997 	bl	8006480 <_free_r>
 8006152:	2000      	movs	r0, #0
 8006154:	6360      	str	r0, [r4, #52]	; 0x34
 8006156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800615a:	6a21      	ldr	r1, [r4, #32]
 800615c:	2301      	movs	r3, #1
 800615e:	4628      	mov	r0, r5
 8006160:	47b0      	blx	r6
 8006162:	1c41      	adds	r1, r0, #1
 8006164:	d1c6      	bne.n	80060f4 <__sflush_r+0x34>
 8006166:	682b      	ldr	r3, [r5, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0c3      	beq.n	80060f4 <__sflush_r+0x34>
 800616c:	2b1d      	cmp	r3, #29
 800616e:	d001      	beq.n	8006174 <__sflush_r+0xb4>
 8006170:	2b16      	cmp	r3, #22
 8006172:	d101      	bne.n	8006178 <__sflush_r+0xb8>
 8006174:	602f      	str	r7, [r5, #0]
 8006176:	e7b0      	b.n	80060da <__sflush_r+0x1a>
 8006178:	89a3      	ldrh	r3, [r4, #12]
 800617a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800617e:	81a3      	strh	r3, [r4, #12]
 8006180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006184:	690f      	ldr	r7, [r1, #16]
 8006186:	2f00      	cmp	r7, #0
 8006188:	d0a7      	beq.n	80060da <__sflush_r+0x1a>
 800618a:	0793      	lsls	r3, r2, #30
 800618c:	680e      	ldr	r6, [r1, #0]
 800618e:	bf08      	it	eq
 8006190:	694b      	ldreq	r3, [r1, #20]
 8006192:	600f      	str	r7, [r1, #0]
 8006194:	bf18      	it	ne
 8006196:	2300      	movne	r3, #0
 8006198:	eba6 0807 	sub.w	r8, r6, r7
 800619c:	608b      	str	r3, [r1, #8]
 800619e:	f1b8 0f00 	cmp.w	r8, #0
 80061a2:	dd9a      	ble.n	80060da <__sflush_r+0x1a>
 80061a4:	4643      	mov	r3, r8
 80061a6:	463a      	mov	r2, r7
 80061a8:	6a21      	ldr	r1, [r4, #32]
 80061aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80061ac:	4628      	mov	r0, r5
 80061ae:	47b0      	blx	r6
 80061b0:	2800      	cmp	r0, #0
 80061b2:	dc07      	bgt.n	80061c4 <__sflush_r+0x104>
 80061b4:	89a3      	ldrh	r3, [r4, #12]
 80061b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ba:	81a3      	strh	r3, [r4, #12]
 80061bc:	f04f 30ff 	mov.w	r0, #4294967295
 80061c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061c4:	4407      	add	r7, r0
 80061c6:	eba8 0800 	sub.w	r8, r8, r0
 80061ca:	e7e8      	b.n	800619e <__sflush_r+0xde>
 80061cc:	20400001 	.word	0x20400001

080061d0 <_fflush_r>:
 80061d0:	b538      	push	{r3, r4, r5, lr}
 80061d2:	690b      	ldr	r3, [r1, #16]
 80061d4:	4605      	mov	r5, r0
 80061d6:	460c      	mov	r4, r1
 80061d8:	b1db      	cbz	r3, 8006212 <_fflush_r+0x42>
 80061da:	b118      	cbz	r0, 80061e4 <_fflush_r+0x14>
 80061dc:	6983      	ldr	r3, [r0, #24]
 80061de:	b90b      	cbnz	r3, 80061e4 <_fflush_r+0x14>
 80061e0:	f000 f860 	bl	80062a4 <__sinit>
 80061e4:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <_fflush_r+0x48>)
 80061e6:	429c      	cmp	r4, r3
 80061e8:	d109      	bne.n	80061fe <_fflush_r+0x2e>
 80061ea:	686c      	ldr	r4, [r5, #4]
 80061ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061f0:	b17b      	cbz	r3, 8006212 <_fflush_r+0x42>
 80061f2:	4621      	mov	r1, r4
 80061f4:	4628      	mov	r0, r5
 80061f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061fa:	f7ff bf61 	b.w	80060c0 <__sflush_r>
 80061fe:	4b07      	ldr	r3, [pc, #28]	; (800621c <_fflush_r+0x4c>)
 8006200:	429c      	cmp	r4, r3
 8006202:	d101      	bne.n	8006208 <_fflush_r+0x38>
 8006204:	68ac      	ldr	r4, [r5, #8]
 8006206:	e7f1      	b.n	80061ec <_fflush_r+0x1c>
 8006208:	4b05      	ldr	r3, [pc, #20]	; (8006220 <_fflush_r+0x50>)
 800620a:	429c      	cmp	r4, r3
 800620c:	bf08      	it	eq
 800620e:	68ec      	ldreq	r4, [r5, #12]
 8006210:	e7ec      	b.n	80061ec <_fflush_r+0x1c>
 8006212:	2000      	movs	r0, #0
 8006214:	bd38      	pop	{r3, r4, r5, pc}
 8006216:	bf00      	nop
 8006218:	08007850 	.word	0x08007850
 800621c:	08007870 	.word	0x08007870
 8006220:	08007830 	.word	0x08007830

08006224 <_cleanup_r>:
 8006224:	4901      	ldr	r1, [pc, #4]	; (800622c <_cleanup_r+0x8>)
 8006226:	f000 b8a9 	b.w	800637c <_fwalk_reent>
 800622a:	bf00      	nop
 800622c:	080061d1 	.word	0x080061d1

08006230 <std.isra.0>:
 8006230:	2300      	movs	r3, #0
 8006232:	b510      	push	{r4, lr}
 8006234:	4604      	mov	r4, r0
 8006236:	6003      	str	r3, [r0, #0]
 8006238:	6043      	str	r3, [r0, #4]
 800623a:	6083      	str	r3, [r0, #8]
 800623c:	8181      	strh	r1, [r0, #12]
 800623e:	6643      	str	r3, [r0, #100]	; 0x64
 8006240:	81c2      	strh	r2, [r0, #14]
 8006242:	6103      	str	r3, [r0, #16]
 8006244:	6143      	str	r3, [r0, #20]
 8006246:	6183      	str	r3, [r0, #24]
 8006248:	4619      	mov	r1, r3
 800624a:	2208      	movs	r2, #8
 800624c:	305c      	adds	r0, #92	; 0x5c
 800624e:	f7ff fdf3 	bl	8005e38 <memset>
 8006252:	4b05      	ldr	r3, [pc, #20]	; (8006268 <std.isra.0+0x38>)
 8006254:	6263      	str	r3, [r4, #36]	; 0x24
 8006256:	4b05      	ldr	r3, [pc, #20]	; (800626c <std.isra.0+0x3c>)
 8006258:	62a3      	str	r3, [r4, #40]	; 0x28
 800625a:	4b05      	ldr	r3, [pc, #20]	; (8006270 <std.isra.0+0x40>)
 800625c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800625e:	4b05      	ldr	r3, [pc, #20]	; (8006274 <std.isra.0+0x44>)
 8006260:	6224      	str	r4, [r4, #32]
 8006262:	6323      	str	r3, [r4, #48]	; 0x30
 8006264:	bd10      	pop	{r4, pc}
 8006266:	bf00      	nop
 8006268:	08006ba5 	.word	0x08006ba5
 800626c:	08006bc7 	.word	0x08006bc7
 8006270:	08006bff 	.word	0x08006bff
 8006274:	08006c23 	.word	0x08006c23

08006278 <__sfmoreglue>:
 8006278:	b570      	push	{r4, r5, r6, lr}
 800627a:	1e4a      	subs	r2, r1, #1
 800627c:	2568      	movs	r5, #104	; 0x68
 800627e:	4355      	muls	r5, r2
 8006280:	460e      	mov	r6, r1
 8006282:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006286:	f000 f949 	bl	800651c <_malloc_r>
 800628a:	4604      	mov	r4, r0
 800628c:	b140      	cbz	r0, 80062a0 <__sfmoreglue+0x28>
 800628e:	2100      	movs	r1, #0
 8006290:	e880 0042 	stmia.w	r0, {r1, r6}
 8006294:	300c      	adds	r0, #12
 8006296:	60a0      	str	r0, [r4, #8]
 8006298:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800629c:	f7ff fdcc 	bl	8005e38 <memset>
 80062a0:	4620      	mov	r0, r4
 80062a2:	bd70      	pop	{r4, r5, r6, pc}

080062a4 <__sinit>:
 80062a4:	6983      	ldr	r3, [r0, #24]
 80062a6:	b510      	push	{r4, lr}
 80062a8:	4604      	mov	r4, r0
 80062aa:	bb33      	cbnz	r3, 80062fa <__sinit+0x56>
 80062ac:	6483      	str	r3, [r0, #72]	; 0x48
 80062ae:	64c3      	str	r3, [r0, #76]	; 0x4c
 80062b0:	6503      	str	r3, [r0, #80]	; 0x50
 80062b2:	4b12      	ldr	r3, [pc, #72]	; (80062fc <__sinit+0x58>)
 80062b4:	4a12      	ldr	r2, [pc, #72]	; (8006300 <__sinit+0x5c>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6282      	str	r2, [r0, #40]	; 0x28
 80062ba:	4298      	cmp	r0, r3
 80062bc:	bf04      	itt	eq
 80062be:	2301      	moveq	r3, #1
 80062c0:	6183      	streq	r3, [r0, #24]
 80062c2:	f000 f81f 	bl	8006304 <__sfp>
 80062c6:	6060      	str	r0, [r4, #4]
 80062c8:	4620      	mov	r0, r4
 80062ca:	f000 f81b 	bl	8006304 <__sfp>
 80062ce:	60a0      	str	r0, [r4, #8]
 80062d0:	4620      	mov	r0, r4
 80062d2:	f000 f817 	bl	8006304 <__sfp>
 80062d6:	2200      	movs	r2, #0
 80062d8:	60e0      	str	r0, [r4, #12]
 80062da:	2104      	movs	r1, #4
 80062dc:	6860      	ldr	r0, [r4, #4]
 80062de:	f7ff ffa7 	bl	8006230 <std.isra.0>
 80062e2:	2201      	movs	r2, #1
 80062e4:	2109      	movs	r1, #9
 80062e6:	68a0      	ldr	r0, [r4, #8]
 80062e8:	f7ff ffa2 	bl	8006230 <std.isra.0>
 80062ec:	2202      	movs	r2, #2
 80062ee:	2112      	movs	r1, #18
 80062f0:	68e0      	ldr	r0, [r4, #12]
 80062f2:	f7ff ff9d 	bl	8006230 <std.isra.0>
 80062f6:	2301      	movs	r3, #1
 80062f8:	61a3      	str	r3, [r4, #24]
 80062fa:	bd10      	pop	{r4, pc}
 80062fc:	0800782c 	.word	0x0800782c
 8006300:	08006225 	.word	0x08006225

08006304 <__sfp>:
 8006304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006306:	4b1c      	ldr	r3, [pc, #112]	; (8006378 <__sfp+0x74>)
 8006308:	681e      	ldr	r6, [r3, #0]
 800630a:	69b3      	ldr	r3, [r6, #24]
 800630c:	4607      	mov	r7, r0
 800630e:	b913      	cbnz	r3, 8006316 <__sfp+0x12>
 8006310:	4630      	mov	r0, r6
 8006312:	f7ff ffc7 	bl	80062a4 <__sinit>
 8006316:	3648      	adds	r6, #72	; 0x48
 8006318:	68b4      	ldr	r4, [r6, #8]
 800631a:	6873      	ldr	r3, [r6, #4]
 800631c:	3b01      	subs	r3, #1
 800631e:	d503      	bpl.n	8006328 <__sfp+0x24>
 8006320:	6833      	ldr	r3, [r6, #0]
 8006322:	b133      	cbz	r3, 8006332 <__sfp+0x2e>
 8006324:	6836      	ldr	r6, [r6, #0]
 8006326:	e7f7      	b.n	8006318 <__sfp+0x14>
 8006328:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800632c:	b16d      	cbz	r5, 800634a <__sfp+0x46>
 800632e:	3468      	adds	r4, #104	; 0x68
 8006330:	e7f4      	b.n	800631c <__sfp+0x18>
 8006332:	2104      	movs	r1, #4
 8006334:	4638      	mov	r0, r7
 8006336:	f7ff ff9f 	bl	8006278 <__sfmoreglue>
 800633a:	6030      	str	r0, [r6, #0]
 800633c:	2800      	cmp	r0, #0
 800633e:	d1f1      	bne.n	8006324 <__sfp+0x20>
 8006340:	230c      	movs	r3, #12
 8006342:	603b      	str	r3, [r7, #0]
 8006344:	4604      	mov	r4, r0
 8006346:	4620      	mov	r0, r4
 8006348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800634a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800634e:	81e3      	strh	r3, [r4, #14]
 8006350:	2301      	movs	r3, #1
 8006352:	81a3      	strh	r3, [r4, #12]
 8006354:	6665      	str	r5, [r4, #100]	; 0x64
 8006356:	6025      	str	r5, [r4, #0]
 8006358:	60a5      	str	r5, [r4, #8]
 800635a:	6065      	str	r5, [r4, #4]
 800635c:	6125      	str	r5, [r4, #16]
 800635e:	6165      	str	r5, [r4, #20]
 8006360:	61a5      	str	r5, [r4, #24]
 8006362:	2208      	movs	r2, #8
 8006364:	4629      	mov	r1, r5
 8006366:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800636a:	f7ff fd65 	bl	8005e38 <memset>
 800636e:	6365      	str	r5, [r4, #52]	; 0x34
 8006370:	63a5      	str	r5, [r4, #56]	; 0x38
 8006372:	64a5      	str	r5, [r4, #72]	; 0x48
 8006374:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006376:	e7e6      	b.n	8006346 <__sfp+0x42>
 8006378:	0800782c 	.word	0x0800782c

0800637c <_fwalk_reent>:
 800637c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006380:	4680      	mov	r8, r0
 8006382:	4689      	mov	r9, r1
 8006384:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006388:	2600      	movs	r6, #0
 800638a:	b914      	cbnz	r4, 8006392 <_fwalk_reent+0x16>
 800638c:	4630      	mov	r0, r6
 800638e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006392:	68a5      	ldr	r5, [r4, #8]
 8006394:	6867      	ldr	r7, [r4, #4]
 8006396:	3f01      	subs	r7, #1
 8006398:	d501      	bpl.n	800639e <_fwalk_reent+0x22>
 800639a:	6824      	ldr	r4, [r4, #0]
 800639c:	e7f5      	b.n	800638a <_fwalk_reent+0xe>
 800639e:	89ab      	ldrh	r3, [r5, #12]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d907      	bls.n	80063b4 <_fwalk_reent+0x38>
 80063a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063a8:	3301      	adds	r3, #1
 80063aa:	d003      	beq.n	80063b4 <_fwalk_reent+0x38>
 80063ac:	4629      	mov	r1, r5
 80063ae:	4640      	mov	r0, r8
 80063b0:	47c8      	blx	r9
 80063b2:	4306      	orrs	r6, r0
 80063b4:	3568      	adds	r5, #104	; 0x68
 80063b6:	e7ee      	b.n	8006396 <_fwalk_reent+0x1a>

080063b8 <__swhatbuf_r>:
 80063b8:	b570      	push	{r4, r5, r6, lr}
 80063ba:	460e      	mov	r6, r1
 80063bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c0:	2900      	cmp	r1, #0
 80063c2:	b090      	sub	sp, #64	; 0x40
 80063c4:	4614      	mov	r4, r2
 80063c6:	461d      	mov	r5, r3
 80063c8:	da07      	bge.n	80063da <__swhatbuf_r+0x22>
 80063ca:	2300      	movs	r3, #0
 80063cc:	602b      	str	r3, [r5, #0]
 80063ce:	89b3      	ldrh	r3, [r6, #12]
 80063d0:	061a      	lsls	r2, r3, #24
 80063d2:	d410      	bmi.n	80063f6 <__swhatbuf_r+0x3e>
 80063d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063d8:	e00e      	b.n	80063f8 <__swhatbuf_r+0x40>
 80063da:	aa01      	add	r2, sp, #4
 80063dc:	f000 fc48 	bl	8006c70 <_fstat_r>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	dbf2      	blt.n	80063ca <__swhatbuf_r+0x12>
 80063e4:	9a02      	ldr	r2, [sp, #8]
 80063e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80063ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80063ee:	425a      	negs	r2, r3
 80063f0:	415a      	adcs	r2, r3
 80063f2:	602a      	str	r2, [r5, #0]
 80063f4:	e7ee      	b.n	80063d4 <__swhatbuf_r+0x1c>
 80063f6:	2340      	movs	r3, #64	; 0x40
 80063f8:	2000      	movs	r0, #0
 80063fa:	6023      	str	r3, [r4, #0]
 80063fc:	b010      	add	sp, #64	; 0x40
 80063fe:	bd70      	pop	{r4, r5, r6, pc}

08006400 <__smakebuf_r>:
 8006400:	898b      	ldrh	r3, [r1, #12]
 8006402:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006404:	079d      	lsls	r5, r3, #30
 8006406:	4606      	mov	r6, r0
 8006408:	460c      	mov	r4, r1
 800640a:	d507      	bpl.n	800641c <__smakebuf_r+0x1c>
 800640c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	6123      	str	r3, [r4, #16]
 8006414:	2301      	movs	r3, #1
 8006416:	6163      	str	r3, [r4, #20]
 8006418:	b002      	add	sp, #8
 800641a:	bd70      	pop	{r4, r5, r6, pc}
 800641c:	ab01      	add	r3, sp, #4
 800641e:	466a      	mov	r2, sp
 8006420:	f7ff ffca 	bl	80063b8 <__swhatbuf_r>
 8006424:	9900      	ldr	r1, [sp, #0]
 8006426:	4605      	mov	r5, r0
 8006428:	4630      	mov	r0, r6
 800642a:	f000 f877 	bl	800651c <_malloc_r>
 800642e:	b948      	cbnz	r0, 8006444 <__smakebuf_r+0x44>
 8006430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006434:	059a      	lsls	r2, r3, #22
 8006436:	d4ef      	bmi.n	8006418 <__smakebuf_r+0x18>
 8006438:	f023 0303 	bic.w	r3, r3, #3
 800643c:	f043 0302 	orr.w	r3, r3, #2
 8006440:	81a3      	strh	r3, [r4, #12]
 8006442:	e7e3      	b.n	800640c <__smakebuf_r+0xc>
 8006444:	4b0d      	ldr	r3, [pc, #52]	; (800647c <__smakebuf_r+0x7c>)
 8006446:	62b3      	str	r3, [r6, #40]	; 0x28
 8006448:	89a3      	ldrh	r3, [r4, #12]
 800644a:	6020      	str	r0, [r4, #0]
 800644c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006450:	81a3      	strh	r3, [r4, #12]
 8006452:	9b00      	ldr	r3, [sp, #0]
 8006454:	6163      	str	r3, [r4, #20]
 8006456:	9b01      	ldr	r3, [sp, #4]
 8006458:	6120      	str	r0, [r4, #16]
 800645a:	b15b      	cbz	r3, 8006474 <__smakebuf_r+0x74>
 800645c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006460:	4630      	mov	r0, r6
 8006462:	f000 fc17 	bl	8006c94 <_isatty_r>
 8006466:	b128      	cbz	r0, 8006474 <__smakebuf_r+0x74>
 8006468:	89a3      	ldrh	r3, [r4, #12]
 800646a:	f023 0303 	bic.w	r3, r3, #3
 800646e:	f043 0301 	orr.w	r3, r3, #1
 8006472:	81a3      	strh	r3, [r4, #12]
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	431d      	orrs	r5, r3
 8006478:	81a5      	strh	r5, [r4, #12]
 800647a:	e7cd      	b.n	8006418 <__smakebuf_r+0x18>
 800647c:	08006225 	.word	0x08006225

08006480 <_free_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	4605      	mov	r5, r0
 8006484:	2900      	cmp	r1, #0
 8006486:	d045      	beq.n	8006514 <_free_r+0x94>
 8006488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800648c:	1f0c      	subs	r4, r1, #4
 800648e:	2b00      	cmp	r3, #0
 8006490:	bfb8      	it	lt
 8006492:	18e4      	addlt	r4, r4, r3
 8006494:	f000 fc20 	bl	8006cd8 <__malloc_lock>
 8006498:	4a1f      	ldr	r2, [pc, #124]	; (8006518 <_free_r+0x98>)
 800649a:	6813      	ldr	r3, [r2, #0]
 800649c:	4610      	mov	r0, r2
 800649e:	b933      	cbnz	r3, 80064ae <_free_r+0x2e>
 80064a0:	6063      	str	r3, [r4, #4]
 80064a2:	6014      	str	r4, [r2, #0]
 80064a4:	4628      	mov	r0, r5
 80064a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064aa:	f000 bc16 	b.w	8006cda <__malloc_unlock>
 80064ae:	42a3      	cmp	r3, r4
 80064b0:	d90c      	bls.n	80064cc <_free_r+0x4c>
 80064b2:	6821      	ldr	r1, [r4, #0]
 80064b4:	1862      	adds	r2, r4, r1
 80064b6:	4293      	cmp	r3, r2
 80064b8:	bf04      	itt	eq
 80064ba:	681a      	ldreq	r2, [r3, #0]
 80064bc:	685b      	ldreq	r3, [r3, #4]
 80064be:	6063      	str	r3, [r4, #4]
 80064c0:	bf04      	itt	eq
 80064c2:	1852      	addeq	r2, r2, r1
 80064c4:	6022      	streq	r2, [r4, #0]
 80064c6:	6004      	str	r4, [r0, #0]
 80064c8:	e7ec      	b.n	80064a4 <_free_r+0x24>
 80064ca:	4613      	mov	r3, r2
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	b10a      	cbz	r2, 80064d4 <_free_r+0x54>
 80064d0:	42a2      	cmp	r2, r4
 80064d2:	d9fa      	bls.n	80064ca <_free_r+0x4a>
 80064d4:	6819      	ldr	r1, [r3, #0]
 80064d6:	1858      	adds	r0, r3, r1
 80064d8:	42a0      	cmp	r0, r4
 80064da:	d10b      	bne.n	80064f4 <_free_r+0x74>
 80064dc:	6820      	ldr	r0, [r4, #0]
 80064de:	4401      	add	r1, r0
 80064e0:	1858      	adds	r0, r3, r1
 80064e2:	4282      	cmp	r2, r0
 80064e4:	6019      	str	r1, [r3, #0]
 80064e6:	d1dd      	bne.n	80064a4 <_free_r+0x24>
 80064e8:	6810      	ldr	r0, [r2, #0]
 80064ea:	6852      	ldr	r2, [r2, #4]
 80064ec:	605a      	str	r2, [r3, #4]
 80064ee:	4401      	add	r1, r0
 80064f0:	6019      	str	r1, [r3, #0]
 80064f2:	e7d7      	b.n	80064a4 <_free_r+0x24>
 80064f4:	d902      	bls.n	80064fc <_free_r+0x7c>
 80064f6:	230c      	movs	r3, #12
 80064f8:	602b      	str	r3, [r5, #0]
 80064fa:	e7d3      	b.n	80064a4 <_free_r+0x24>
 80064fc:	6820      	ldr	r0, [r4, #0]
 80064fe:	1821      	adds	r1, r4, r0
 8006500:	428a      	cmp	r2, r1
 8006502:	bf04      	itt	eq
 8006504:	6811      	ldreq	r1, [r2, #0]
 8006506:	6852      	ldreq	r2, [r2, #4]
 8006508:	6062      	str	r2, [r4, #4]
 800650a:	bf04      	itt	eq
 800650c:	1809      	addeq	r1, r1, r0
 800650e:	6021      	streq	r1, [r4, #0]
 8006510:	605c      	str	r4, [r3, #4]
 8006512:	e7c7      	b.n	80064a4 <_free_r+0x24>
 8006514:	bd38      	pop	{r3, r4, r5, pc}
 8006516:	bf00      	nop
 8006518:	20000494 	.word	0x20000494

0800651c <_malloc_r>:
 800651c:	b570      	push	{r4, r5, r6, lr}
 800651e:	1ccd      	adds	r5, r1, #3
 8006520:	f025 0503 	bic.w	r5, r5, #3
 8006524:	3508      	adds	r5, #8
 8006526:	2d0c      	cmp	r5, #12
 8006528:	bf38      	it	cc
 800652a:	250c      	movcc	r5, #12
 800652c:	2d00      	cmp	r5, #0
 800652e:	4606      	mov	r6, r0
 8006530:	db01      	blt.n	8006536 <_malloc_r+0x1a>
 8006532:	42a9      	cmp	r1, r5
 8006534:	d903      	bls.n	800653e <_malloc_r+0x22>
 8006536:	230c      	movs	r3, #12
 8006538:	6033      	str	r3, [r6, #0]
 800653a:	2000      	movs	r0, #0
 800653c:	bd70      	pop	{r4, r5, r6, pc}
 800653e:	f000 fbcb 	bl	8006cd8 <__malloc_lock>
 8006542:	4a23      	ldr	r2, [pc, #140]	; (80065d0 <_malloc_r+0xb4>)
 8006544:	6814      	ldr	r4, [r2, #0]
 8006546:	4621      	mov	r1, r4
 8006548:	b991      	cbnz	r1, 8006570 <_malloc_r+0x54>
 800654a:	4c22      	ldr	r4, [pc, #136]	; (80065d4 <_malloc_r+0xb8>)
 800654c:	6823      	ldr	r3, [r4, #0]
 800654e:	b91b      	cbnz	r3, 8006558 <_malloc_r+0x3c>
 8006550:	4630      	mov	r0, r6
 8006552:	f000 fb17 	bl	8006b84 <_sbrk_r>
 8006556:	6020      	str	r0, [r4, #0]
 8006558:	4629      	mov	r1, r5
 800655a:	4630      	mov	r0, r6
 800655c:	f000 fb12 	bl	8006b84 <_sbrk_r>
 8006560:	1c43      	adds	r3, r0, #1
 8006562:	d126      	bne.n	80065b2 <_malloc_r+0x96>
 8006564:	230c      	movs	r3, #12
 8006566:	6033      	str	r3, [r6, #0]
 8006568:	4630      	mov	r0, r6
 800656a:	f000 fbb6 	bl	8006cda <__malloc_unlock>
 800656e:	e7e4      	b.n	800653a <_malloc_r+0x1e>
 8006570:	680b      	ldr	r3, [r1, #0]
 8006572:	1b5b      	subs	r3, r3, r5
 8006574:	d41a      	bmi.n	80065ac <_malloc_r+0x90>
 8006576:	2b0b      	cmp	r3, #11
 8006578:	d90f      	bls.n	800659a <_malloc_r+0x7e>
 800657a:	600b      	str	r3, [r1, #0]
 800657c:	50cd      	str	r5, [r1, r3]
 800657e:	18cc      	adds	r4, r1, r3
 8006580:	4630      	mov	r0, r6
 8006582:	f000 fbaa 	bl	8006cda <__malloc_unlock>
 8006586:	f104 000b 	add.w	r0, r4, #11
 800658a:	1d23      	adds	r3, r4, #4
 800658c:	f020 0007 	bic.w	r0, r0, #7
 8006590:	1ac3      	subs	r3, r0, r3
 8006592:	d01b      	beq.n	80065cc <_malloc_r+0xb0>
 8006594:	425a      	negs	r2, r3
 8006596:	50e2      	str	r2, [r4, r3]
 8006598:	bd70      	pop	{r4, r5, r6, pc}
 800659a:	428c      	cmp	r4, r1
 800659c:	bf0d      	iteet	eq
 800659e:	6863      	ldreq	r3, [r4, #4]
 80065a0:	684b      	ldrne	r3, [r1, #4]
 80065a2:	6063      	strne	r3, [r4, #4]
 80065a4:	6013      	streq	r3, [r2, #0]
 80065a6:	bf18      	it	ne
 80065a8:	460c      	movne	r4, r1
 80065aa:	e7e9      	b.n	8006580 <_malloc_r+0x64>
 80065ac:	460c      	mov	r4, r1
 80065ae:	6849      	ldr	r1, [r1, #4]
 80065b0:	e7ca      	b.n	8006548 <_malloc_r+0x2c>
 80065b2:	1cc4      	adds	r4, r0, #3
 80065b4:	f024 0403 	bic.w	r4, r4, #3
 80065b8:	42a0      	cmp	r0, r4
 80065ba:	d005      	beq.n	80065c8 <_malloc_r+0xac>
 80065bc:	1a21      	subs	r1, r4, r0
 80065be:	4630      	mov	r0, r6
 80065c0:	f000 fae0 	bl	8006b84 <_sbrk_r>
 80065c4:	3001      	adds	r0, #1
 80065c6:	d0cd      	beq.n	8006564 <_malloc_r+0x48>
 80065c8:	6025      	str	r5, [r4, #0]
 80065ca:	e7d9      	b.n	8006580 <_malloc_r+0x64>
 80065cc:	bd70      	pop	{r4, r5, r6, pc}
 80065ce:	bf00      	nop
 80065d0:	20000494 	.word	0x20000494
 80065d4:	20000498 	.word	0x20000498

080065d8 <__sfputc_r>:
 80065d8:	6893      	ldr	r3, [r2, #8]
 80065da:	3b01      	subs	r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	b410      	push	{r4}
 80065e0:	6093      	str	r3, [r2, #8]
 80065e2:	da09      	bge.n	80065f8 <__sfputc_r+0x20>
 80065e4:	6994      	ldr	r4, [r2, #24]
 80065e6:	42a3      	cmp	r3, r4
 80065e8:	db02      	blt.n	80065f0 <__sfputc_r+0x18>
 80065ea:	b2cb      	uxtb	r3, r1
 80065ec:	2b0a      	cmp	r3, #10
 80065ee:	d103      	bne.n	80065f8 <__sfputc_r+0x20>
 80065f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065f4:	f7ff bca4 	b.w	8005f40 <__swbuf_r>
 80065f8:	6813      	ldr	r3, [r2, #0]
 80065fa:	1c58      	adds	r0, r3, #1
 80065fc:	6010      	str	r0, [r2, #0]
 80065fe:	7019      	strb	r1, [r3, #0]
 8006600:	b2c8      	uxtb	r0, r1
 8006602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006606:	4770      	bx	lr

08006608 <__sfputs_r>:
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	4606      	mov	r6, r0
 800660c:	460f      	mov	r7, r1
 800660e:	4614      	mov	r4, r2
 8006610:	18d5      	adds	r5, r2, r3
 8006612:	42ac      	cmp	r4, r5
 8006614:	d101      	bne.n	800661a <__sfputs_r+0x12>
 8006616:	2000      	movs	r0, #0
 8006618:	e007      	b.n	800662a <__sfputs_r+0x22>
 800661a:	463a      	mov	r2, r7
 800661c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006620:	4630      	mov	r0, r6
 8006622:	f7ff ffd9 	bl	80065d8 <__sfputc_r>
 8006626:	1c43      	adds	r3, r0, #1
 8006628:	d1f3      	bne.n	8006612 <__sfputs_r+0xa>
 800662a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800662c <_vfiprintf_r>:
 800662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006630:	b09d      	sub	sp, #116	; 0x74
 8006632:	460c      	mov	r4, r1
 8006634:	4617      	mov	r7, r2
 8006636:	9303      	str	r3, [sp, #12]
 8006638:	4606      	mov	r6, r0
 800663a:	b118      	cbz	r0, 8006644 <_vfiprintf_r+0x18>
 800663c:	6983      	ldr	r3, [r0, #24]
 800663e:	b90b      	cbnz	r3, 8006644 <_vfiprintf_r+0x18>
 8006640:	f7ff fe30 	bl	80062a4 <__sinit>
 8006644:	4b7c      	ldr	r3, [pc, #496]	; (8006838 <_vfiprintf_r+0x20c>)
 8006646:	429c      	cmp	r4, r3
 8006648:	d157      	bne.n	80066fa <_vfiprintf_r+0xce>
 800664a:	6874      	ldr	r4, [r6, #4]
 800664c:	89a3      	ldrh	r3, [r4, #12]
 800664e:	0718      	lsls	r0, r3, #28
 8006650:	d55d      	bpl.n	800670e <_vfiprintf_r+0xe2>
 8006652:	6923      	ldr	r3, [r4, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d05a      	beq.n	800670e <_vfiprintf_r+0xe2>
 8006658:	2300      	movs	r3, #0
 800665a:	9309      	str	r3, [sp, #36]	; 0x24
 800665c:	2320      	movs	r3, #32
 800665e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006662:	2330      	movs	r3, #48	; 0x30
 8006664:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006668:	f04f 0b01 	mov.w	fp, #1
 800666c:	46b8      	mov	r8, r7
 800666e:	4645      	mov	r5, r8
 8006670:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d155      	bne.n	8006724 <_vfiprintf_r+0xf8>
 8006678:	ebb8 0a07 	subs.w	sl, r8, r7
 800667c:	d00b      	beq.n	8006696 <_vfiprintf_r+0x6a>
 800667e:	4653      	mov	r3, sl
 8006680:	463a      	mov	r2, r7
 8006682:	4621      	mov	r1, r4
 8006684:	4630      	mov	r0, r6
 8006686:	f7ff ffbf 	bl	8006608 <__sfputs_r>
 800668a:	3001      	adds	r0, #1
 800668c:	f000 80c4 	beq.w	8006818 <_vfiprintf_r+0x1ec>
 8006690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006692:	4453      	add	r3, sl
 8006694:	9309      	str	r3, [sp, #36]	; 0x24
 8006696:	f898 3000 	ldrb.w	r3, [r8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 80bc 	beq.w	8006818 <_vfiprintf_r+0x1ec>
 80066a0:	2300      	movs	r3, #0
 80066a2:	f04f 32ff 	mov.w	r2, #4294967295
 80066a6:	9304      	str	r3, [sp, #16]
 80066a8:	9307      	str	r3, [sp, #28]
 80066aa:	9205      	str	r2, [sp, #20]
 80066ac:	9306      	str	r3, [sp, #24]
 80066ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066b2:	931a      	str	r3, [sp, #104]	; 0x68
 80066b4:	2205      	movs	r2, #5
 80066b6:	7829      	ldrb	r1, [r5, #0]
 80066b8:	4860      	ldr	r0, [pc, #384]	; (800683c <_vfiprintf_r+0x210>)
 80066ba:	f7f9 fd99 	bl	80001f0 <memchr>
 80066be:	f105 0801 	add.w	r8, r5, #1
 80066c2:	9b04      	ldr	r3, [sp, #16]
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d131      	bne.n	800672c <_vfiprintf_r+0x100>
 80066c8:	06d9      	lsls	r1, r3, #27
 80066ca:	bf44      	itt	mi
 80066cc:	2220      	movmi	r2, #32
 80066ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80066d2:	071a      	lsls	r2, r3, #28
 80066d4:	bf44      	itt	mi
 80066d6:	222b      	movmi	r2, #43	; 0x2b
 80066d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80066dc:	782a      	ldrb	r2, [r5, #0]
 80066de:	2a2a      	cmp	r2, #42	; 0x2a
 80066e0:	d02c      	beq.n	800673c <_vfiprintf_r+0x110>
 80066e2:	9a07      	ldr	r2, [sp, #28]
 80066e4:	2100      	movs	r1, #0
 80066e6:	200a      	movs	r0, #10
 80066e8:	46a8      	mov	r8, r5
 80066ea:	3501      	adds	r5, #1
 80066ec:	f898 3000 	ldrb.w	r3, [r8]
 80066f0:	3b30      	subs	r3, #48	; 0x30
 80066f2:	2b09      	cmp	r3, #9
 80066f4:	d96d      	bls.n	80067d2 <_vfiprintf_r+0x1a6>
 80066f6:	b371      	cbz	r1, 8006756 <_vfiprintf_r+0x12a>
 80066f8:	e026      	b.n	8006748 <_vfiprintf_r+0x11c>
 80066fa:	4b51      	ldr	r3, [pc, #324]	; (8006840 <_vfiprintf_r+0x214>)
 80066fc:	429c      	cmp	r4, r3
 80066fe:	d101      	bne.n	8006704 <_vfiprintf_r+0xd8>
 8006700:	68b4      	ldr	r4, [r6, #8]
 8006702:	e7a3      	b.n	800664c <_vfiprintf_r+0x20>
 8006704:	4b4f      	ldr	r3, [pc, #316]	; (8006844 <_vfiprintf_r+0x218>)
 8006706:	429c      	cmp	r4, r3
 8006708:	bf08      	it	eq
 800670a:	68f4      	ldreq	r4, [r6, #12]
 800670c:	e79e      	b.n	800664c <_vfiprintf_r+0x20>
 800670e:	4621      	mov	r1, r4
 8006710:	4630      	mov	r0, r6
 8006712:	f7ff fc67 	bl	8005fe4 <__swsetup_r>
 8006716:	2800      	cmp	r0, #0
 8006718:	d09e      	beq.n	8006658 <_vfiprintf_r+0x2c>
 800671a:	f04f 30ff 	mov.w	r0, #4294967295
 800671e:	b01d      	add	sp, #116	; 0x74
 8006720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006724:	2b25      	cmp	r3, #37	; 0x25
 8006726:	d0a7      	beq.n	8006678 <_vfiprintf_r+0x4c>
 8006728:	46a8      	mov	r8, r5
 800672a:	e7a0      	b.n	800666e <_vfiprintf_r+0x42>
 800672c:	4a43      	ldr	r2, [pc, #268]	; (800683c <_vfiprintf_r+0x210>)
 800672e:	1a80      	subs	r0, r0, r2
 8006730:	fa0b f000 	lsl.w	r0, fp, r0
 8006734:	4318      	orrs	r0, r3
 8006736:	9004      	str	r0, [sp, #16]
 8006738:	4645      	mov	r5, r8
 800673a:	e7bb      	b.n	80066b4 <_vfiprintf_r+0x88>
 800673c:	9a03      	ldr	r2, [sp, #12]
 800673e:	1d11      	adds	r1, r2, #4
 8006740:	6812      	ldr	r2, [r2, #0]
 8006742:	9103      	str	r1, [sp, #12]
 8006744:	2a00      	cmp	r2, #0
 8006746:	db01      	blt.n	800674c <_vfiprintf_r+0x120>
 8006748:	9207      	str	r2, [sp, #28]
 800674a:	e004      	b.n	8006756 <_vfiprintf_r+0x12a>
 800674c:	4252      	negs	r2, r2
 800674e:	f043 0302 	orr.w	r3, r3, #2
 8006752:	9207      	str	r2, [sp, #28]
 8006754:	9304      	str	r3, [sp, #16]
 8006756:	f898 3000 	ldrb.w	r3, [r8]
 800675a:	2b2e      	cmp	r3, #46	; 0x2e
 800675c:	d110      	bne.n	8006780 <_vfiprintf_r+0x154>
 800675e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006762:	2b2a      	cmp	r3, #42	; 0x2a
 8006764:	f108 0101 	add.w	r1, r8, #1
 8006768:	d137      	bne.n	80067da <_vfiprintf_r+0x1ae>
 800676a:	9b03      	ldr	r3, [sp, #12]
 800676c:	1d1a      	adds	r2, r3, #4
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	9203      	str	r2, [sp, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	bfb8      	it	lt
 8006776:	f04f 33ff 	movlt.w	r3, #4294967295
 800677a:	f108 0802 	add.w	r8, r8, #2
 800677e:	9305      	str	r3, [sp, #20]
 8006780:	4d31      	ldr	r5, [pc, #196]	; (8006848 <_vfiprintf_r+0x21c>)
 8006782:	f898 1000 	ldrb.w	r1, [r8]
 8006786:	2203      	movs	r2, #3
 8006788:	4628      	mov	r0, r5
 800678a:	f7f9 fd31 	bl	80001f0 <memchr>
 800678e:	b140      	cbz	r0, 80067a2 <_vfiprintf_r+0x176>
 8006790:	2340      	movs	r3, #64	; 0x40
 8006792:	1b40      	subs	r0, r0, r5
 8006794:	fa03 f000 	lsl.w	r0, r3, r0
 8006798:	9b04      	ldr	r3, [sp, #16]
 800679a:	4303      	orrs	r3, r0
 800679c:	9304      	str	r3, [sp, #16]
 800679e:	f108 0801 	add.w	r8, r8, #1
 80067a2:	f898 1000 	ldrb.w	r1, [r8]
 80067a6:	4829      	ldr	r0, [pc, #164]	; (800684c <_vfiprintf_r+0x220>)
 80067a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067ac:	2206      	movs	r2, #6
 80067ae:	f108 0701 	add.w	r7, r8, #1
 80067b2:	f7f9 fd1d 	bl	80001f0 <memchr>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	d034      	beq.n	8006824 <_vfiprintf_r+0x1f8>
 80067ba:	4b25      	ldr	r3, [pc, #148]	; (8006850 <_vfiprintf_r+0x224>)
 80067bc:	bb03      	cbnz	r3, 8006800 <_vfiprintf_r+0x1d4>
 80067be:	9b03      	ldr	r3, [sp, #12]
 80067c0:	3307      	adds	r3, #7
 80067c2:	f023 0307 	bic.w	r3, r3, #7
 80067c6:	3308      	adds	r3, #8
 80067c8:	9303      	str	r3, [sp, #12]
 80067ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067cc:	444b      	add	r3, r9
 80067ce:	9309      	str	r3, [sp, #36]	; 0x24
 80067d0:	e74c      	b.n	800666c <_vfiprintf_r+0x40>
 80067d2:	fb00 3202 	mla	r2, r0, r2, r3
 80067d6:	2101      	movs	r1, #1
 80067d8:	e786      	b.n	80066e8 <_vfiprintf_r+0xbc>
 80067da:	2300      	movs	r3, #0
 80067dc:	9305      	str	r3, [sp, #20]
 80067de:	4618      	mov	r0, r3
 80067e0:	250a      	movs	r5, #10
 80067e2:	4688      	mov	r8, r1
 80067e4:	3101      	adds	r1, #1
 80067e6:	f898 2000 	ldrb.w	r2, [r8]
 80067ea:	3a30      	subs	r2, #48	; 0x30
 80067ec:	2a09      	cmp	r2, #9
 80067ee:	d903      	bls.n	80067f8 <_vfiprintf_r+0x1cc>
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0c5      	beq.n	8006780 <_vfiprintf_r+0x154>
 80067f4:	9005      	str	r0, [sp, #20]
 80067f6:	e7c3      	b.n	8006780 <_vfiprintf_r+0x154>
 80067f8:	fb05 2000 	mla	r0, r5, r0, r2
 80067fc:	2301      	movs	r3, #1
 80067fe:	e7f0      	b.n	80067e2 <_vfiprintf_r+0x1b6>
 8006800:	ab03      	add	r3, sp, #12
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	4622      	mov	r2, r4
 8006806:	4b13      	ldr	r3, [pc, #76]	; (8006854 <_vfiprintf_r+0x228>)
 8006808:	a904      	add	r1, sp, #16
 800680a:	4630      	mov	r0, r6
 800680c:	f3af 8000 	nop.w
 8006810:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006814:	4681      	mov	r9, r0
 8006816:	d1d8      	bne.n	80067ca <_vfiprintf_r+0x19e>
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	065b      	lsls	r3, r3, #25
 800681c:	f53f af7d 	bmi.w	800671a <_vfiprintf_r+0xee>
 8006820:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006822:	e77c      	b.n	800671e <_vfiprintf_r+0xf2>
 8006824:	ab03      	add	r3, sp, #12
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	4622      	mov	r2, r4
 800682a:	4b0a      	ldr	r3, [pc, #40]	; (8006854 <_vfiprintf_r+0x228>)
 800682c:	a904      	add	r1, sp, #16
 800682e:	4630      	mov	r0, r6
 8006830:	f000 f888 	bl	8006944 <_printf_i>
 8006834:	e7ec      	b.n	8006810 <_vfiprintf_r+0x1e4>
 8006836:	bf00      	nop
 8006838:	08007850 	.word	0x08007850
 800683c:	08007890 	.word	0x08007890
 8006840:	08007870 	.word	0x08007870
 8006844:	08007830 	.word	0x08007830
 8006848:	08007896 	.word	0x08007896
 800684c:	0800789a 	.word	0x0800789a
 8006850:	00000000 	.word	0x00000000
 8006854:	08006609 	.word	0x08006609

08006858 <_printf_common>:
 8006858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800685c:	4691      	mov	r9, r2
 800685e:	461f      	mov	r7, r3
 8006860:	688a      	ldr	r2, [r1, #8]
 8006862:	690b      	ldr	r3, [r1, #16]
 8006864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006868:	4293      	cmp	r3, r2
 800686a:	bfb8      	it	lt
 800686c:	4613      	movlt	r3, r2
 800686e:	f8c9 3000 	str.w	r3, [r9]
 8006872:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006876:	4606      	mov	r6, r0
 8006878:	460c      	mov	r4, r1
 800687a:	b112      	cbz	r2, 8006882 <_printf_common+0x2a>
 800687c:	3301      	adds	r3, #1
 800687e:	f8c9 3000 	str.w	r3, [r9]
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	0699      	lsls	r1, r3, #26
 8006886:	bf42      	ittt	mi
 8006888:	f8d9 3000 	ldrmi.w	r3, [r9]
 800688c:	3302      	addmi	r3, #2
 800688e:	f8c9 3000 	strmi.w	r3, [r9]
 8006892:	6825      	ldr	r5, [r4, #0]
 8006894:	f015 0506 	ands.w	r5, r5, #6
 8006898:	d107      	bne.n	80068aa <_printf_common+0x52>
 800689a:	f104 0a19 	add.w	sl, r4, #25
 800689e:	68e3      	ldr	r3, [r4, #12]
 80068a0:	f8d9 2000 	ldr.w	r2, [r9]
 80068a4:	1a9b      	subs	r3, r3, r2
 80068a6:	429d      	cmp	r5, r3
 80068a8:	db29      	blt.n	80068fe <_printf_common+0xa6>
 80068aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80068ae:	6822      	ldr	r2, [r4, #0]
 80068b0:	3300      	adds	r3, #0
 80068b2:	bf18      	it	ne
 80068b4:	2301      	movne	r3, #1
 80068b6:	0692      	lsls	r2, r2, #26
 80068b8:	d42e      	bmi.n	8006918 <_printf_common+0xc0>
 80068ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068be:	4639      	mov	r1, r7
 80068c0:	4630      	mov	r0, r6
 80068c2:	47c0      	blx	r8
 80068c4:	3001      	adds	r0, #1
 80068c6:	d021      	beq.n	800690c <_printf_common+0xb4>
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	68e5      	ldr	r5, [r4, #12]
 80068cc:	f8d9 2000 	ldr.w	r2, [r9]
 80068d0:	f003 0306 	and.w	r3, r3, #6
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	bf08      	it	eq
 80068d8:	1aad      	subeq	r5, r5, r2
 80068da:	68a3      	ldr	r3, [r4, #8]
 80068dc:	6922      	ldr	r2, [r4, #16]
 80068de:	bf0c      	ite	eq
 80068e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068e4:	2500      	movne	r5, #0
 80068e6:	4293      	cmp	r3, r2
 80068e8:	bfc4      	itt	gt
 80068ea:	1a9b      	subgt	r3, r3, r2
 80068ec:	18ed      	addgt	r5, r5, r3
 80068ee:	f04f 0900 	mov.w	r9, #0
 80068f2:	341a      	adds	r4, #26
 80068f4:	454d      	cmp	r5, r9
 80068f6:	d11b      	bne.n	8006930 <_printf_common+0xd8>
 80068f8:	2000      	movs	r0, #0
 80068fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068fe:	2301      	movs	r3, #1
 8006900:	4652      	mov	r2, sl
 8006902:	4639      	mov	r1, r7
 8006904:	4630      	mov	r0, r6
 8006906:	47c0      	blx	r8
 8006908:	3001      	adds	r0, #1
 800690a:	d103      	bne.n	8006914 <_printf_common+0xbc>
 800690c:	f04f 30ff 	mov.w	r0, #4294967295
 8006910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006914:	3501      	adds	r5, #1
 8006916:	e7c2      	b.n	800689e <_printf_common+0x46>
 8006918:	18e1      	adds	r1, r4, r3
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	2030      	movs	r0, #48	; 0x30
 800691e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006922:	4422      	add	r2, r4
 8006924:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006928:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800692c:	3302      	adds	r3, #2
 800692e:	e7c4      	b.n	80068ba <_printf_common+0x62>
 8006930:	2301      	movs	r3, #1
 8006932:	4622      	mov	r2, r4
 8006934:	4639      	mov	r1, r7
 8006936:	4630      	mov	r0, r6
 8006938:	47c0      	blx	r8
 800693a:	3001      	adds	r0, #1
 800693c:	d0e6      	beq.n	800690c <_printf_common+0xb4>
 800693e:	f109 0901 	add.w	r9, r9, #1
 8006942:	e7d7      	b.n	80068f4 <_printf_common+0x9c>

08006944 <_printf_i>:
 8006944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006948:	4617      	mov	r7, r2
 800694a:	7e0a      	ldrb	r2, [r1, #24]
 800694c:	b085      	sub	sp, #20
 800694e:	2a6e      	cmp	r2, #110	; 0x6e
 8006950:	4698      	mov	r8, r3
 8006952:	4606      	mov	r6, r0
 8006954:	460c      	mov	r4, r1
 8006956:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006958:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800695c:	f000 80bc 	beq.w	8006ad8 <_printf_i+0x194>
 8006960:	d81a      	bhi.n	8006998 <_printf_i+0x54>
 8006962:	2a63      	cmp	r2, #99	; 0x63
 8006964:	d02e      	beq.n	80069c4 <_printf_i+0x80>
 8006966:	d80a      	bhi.n	800697e <_printf_i+0x3a>
 8006968:	2a00      	cmp	r2, #0
 800696a:	f000 80c8 	beq.w	8006afe <_printf_i+0x1ba>
 800696e:	2a58      	cmp	r2, #88	; 0x58
 8006970:	f000 808a 	beq.w	8006a88 <_printf_i+0x144>
 8006974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006978:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800697c:	e02a      	b.n	80069d4 <_printf_i+0x90>
 800697e:	2a64      	cmp	r2, #100	; 0x64
 8006980:	d001      	beq.n	8006986 <_printf_i+0x42>
 8006982:	2a69      	cmp	r2, #105	; 0x69
 8006984:	d1f6      	bne.n	8006974 <_printf_i+0x30>
 8006986:	6821      	ldr	r1, [r4, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800698e:	d023      	beq.n	80069d8 <_printf_i+0x94>
 8006990:	1d11      	adds	r1, r2, #4
 8006992:	6019      	str	r1, [r3, #0]
 8006994:	6813      	ldr	r3, [r2, #0]
 8006996:	e027      	b.n	80069e8 <_printf_i+0xa4>
 8006998:	2a73      	cmp	r2, #115	; 0x73
 800699a:	f000 80b4 	beq.w	8006b06 <_printf_i+0x1c2>
 800699e:	d808      	bhi.n	80069b2 <_printf_i+0x6e>
 80069a0:	2a6f      	cmp	r2, #111	; 0x6f
 80069a2:	d02a      	beq.n	80069fa <_printf_i+0xb6>
 80069a4:	2a70      	cmp	r2, #112	; 0x70
 80069a6:	d1e5      	bne.n	8006974 <_printf_i+0x30>
 80069a8:	680a      	ldr	r2, [r1, #0]
 80069aa:	f042 0220 	orr.w	r2, r2, #32
 80069ae:	600a      	str	r2, [r1, #0]
 80069b0:	e003      	b.n	80069ba <_printf_i+0x76>
 80069b2:	2a75      	cmp	r2, #117	; 0x75
 80069b4:	d021      	beq.n	80069fa <_printf_i+0xb6>
 80069b6:	2a78      	cmp	r2, #120	; 0x78
 80069b8:	d1dc      	bne.n	8006974 <_printf_i+0x30>
 80069ba:	2278      	movs	r2, #120	; 0x78
 80069bc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80069c0:	496e      	ldr	r1, [pc, #440]	; (8006b7c <_printf_i+0x238>)
 80069c2:	e064      	b.n	8006a8e <_printf_i+0x14a>
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80069ca:	1d11      	adds	r1, r2, #4
 80069cc:	6019      	str	r1, [r3, #0]
 80069ce:	6813      	ldr	r3, [r2, #0]
 80069d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069d4:	2301      	movs	r3, #1
 80069d6:	e0a3      	b.n	8006b20 <_printf_i+0x1dc>
 80069d8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80069dc:	f102 0104 	add.w	r1, r2, #4
 80069e0:	6019      	str	r1, [r3, #0]
 80069e2:	d0d7      	beq.n	8006994 <_printf_i+0x50>
 80069e4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	da03      	bge.n	80069f4 <_printf_i+0xb0>
 80069ec:	222d      	movs	r2, #45	; 0x2d
 80069ee:	425b      	negs	r3, r3
 80069f0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80069f4:	4962      	ldr	r1, [pc, #392]	; (8006b80 <_printf_i+0x23c>)
 80069f6:	220a      	movs	r2, #10
 80069f8:	e017      	b.n	8006a2a <_printf_i+0xe6>
 80069fa:	6820      	ldr	r0, [r4, #0]
 80069fc:	6819      	ldr	r1, [r3, #0]
 80069fe:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006a02:	d003      	beq.n	8006a0c <_printf_i+0xc8>
 8006a04:	1d08      	adds	r0, r1, #4
 8006a06:	6018      	str	r0, [r3, #0]
 8006a08:	680b      	ldr	r3, [r1, #0]
 8006a0a:	e006      	b.n	8006a1a <_printf_i+0xd6>
 8006a0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a10:	f101 0004 	add.w	r0, r1, #4
 8006a14:	6018      	str	r0, [r3, #0]
 8006a16:	d0f7      	beq.n	8006a08 <_printf_i+0xc4>
 8006a18:	880b      	ldrh	r3, [r1, #0]
 8006a1a:	4959      	ldr	r1, [pc, #356]	; (8006b80 <_printf_i+0x23c>)
 8006a1c:	2a6f      	cmp	r2, #111	; 0x6f
 8006a1e:	bf14      	ite	ne
 8006a20:	220a      	movne	r2, #10
 8006a22:	2208      	moveq	r2, #8
 8006a24:	2000      	movs	r0, #0
 8006a26:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006a2a:	6865      	ldr	r5, [r4, #4]
 8006a2c:	60a5      	str	r5, [r4, #8]
 8006a2e:	2d00      	cmp	r5, #0
 8006a30:	f2c0 809c 	blt.w	8006b6c <_printf_i+0x228>
 8006a34:	6820      	ldr	r0, [r4, #0]
 8006a36:	f020 0004 	bic.w	r0, r0, #4
 8006a3a:	6020      	str	r0, [r4, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d13f      	bne.n	8006ac0 <_printf_i+0x17c>
 8006a40:	2d00      	cmp	r5, #0
 8006a42:	f040 8095 	bne.w	8006b70 <_printf_i+0x22c>
 8006a46:	4675      	mov	r5, lr
 8006a48:	2a08      	cmp	r2, #8
 8006a4a:	d10b      	bne.n	8006a64 <_printf_i+0x120>
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	07da      	lsls	r2, r3, #31
 8006a50:	d508      	bpl.n	8006a64 <_printf_i+0x120>
 8006a52:	6923      	ldr	r3, [r4, #16]
 8006a54:	6862      	ldr	r2, [r4, #4]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	bfde      	ittt	le
 8006a5a:	2330      	movle	r3, #48	; 0x30
 8006a5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a64:	ebae 0305 	sub.w	r3, lr, r5
 8006a68:	6123      	str	r3, [r4, #16]
 8006a6a:	f8cd 8000 	str.w	r8, [sp]
 8006a6e:	463b      	mov	r3, r7
 8006a70:	aa03      	add	r2, sp, #12
 8006a72:	4621      	mov	r1, r4
 8006a74:	4630      	mov	r0, r6
 8006a76:	f7ff feef 	bl	8006858 <_printf_common>
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	d155      	bne.n	8006b2a <_printf_i+0x1e6>
 8006a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a82:	b005      	add	sp, #20
 8006a84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a88:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006a8c:	493c      	ldr	r1, [pc, #240]	; (8006b80 <_printf_i+0x23c>)
 8006a8e:	6822      	ldr	r2, [r4, #0]
 8006a90:	6818      	ldr	r0, [r3, #0]
 8006a92:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006a96:	f100 0504 	add.w	r5, r0, #4
 8006a9a:	601d      	str	r5, [r3, #0]
 8006a9c:	d001      	beq.n	8006aa2 <_printf_i+0x15e>
 8006a9e:	6803      	ldr	r3, [r0, #0]
 8006aa0:	e002      	b.n	8006aa8 <_printf_i+0x164>
 8006aa2:	0655      	lsls	r5, r2, #25
 8006aa4:	d5fb      	bpl.n	8006a9e <_printf_i+0x15a>
 8006aa6:	8803      	ldrh	r3, [r0, #0]
 8006aa8:	07d0      	lsls	r0, r2, #31
 8006aaa:	bf44      	itt	mi
 8006aac:	f042 0220 	orrmi.w	r2, r2, #32
 8006ab0:	6022      	strmi	r2, [r4, #0]
 8006ab2:	b91b      	cbnz	r3, 8006abc <_printf_i+0x178>
 8006ab4:	6822      	ldr	r2, [r4, #0]
 8006ab6:	f022 0220 	bic.w	r2, r2, #32
 8006aba:	6022      	str	r2, [r4, #0]
 8006abc:	2210      	movs	r2, #16
 8006abe:	e7b1      	b.n	8006a24 <_printf_i+0xe0>
 8006ac0:	4675      	mov	r5, lr
 8006ac2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ac6:	fb02 3310 	mls	r3, r2, r0, r3
 8006aca:	5ccb      	ldrb	r3, [r1, r3]
 8006acc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	d1f5      	bne.n	8006ac2 <_printf_i+0x17e>
 8006ad6:	e7b7      	b.n	8006a48 <_printf_i+0x104>
 8006ad8:	6808      	ldr	r0, [r1, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	6949      	ldr	r1, [r1, #20]
 8006ade:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006ae2:	d004      	beq.n	8006aee <_printf_i+0x1aa>
 8006ae4:	1d10      	adds	r0, r2, #4
 8006ae6:	6018      	str	r0, [r3, #0]
 8006ae8:	6813      	ldr	r3, [r2, #0]
 8006aea:	6019      	str	r1, [r3, #0]
 8006aec:	e007      	b.n	8006afe <_printf_i+0x1ba>
 8006aee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006af2:	f102 0004 	add.w	r0, r2, #4
 8006af6:	6018      	str	r0, [r3, #0]
 8006af8:	6813      	ldr	r3, [r2, #0]
 8006afa:	d0f6      	beq.n	8006aea <_printf_i+0x1a6>
 8006afc:	8019      	strh	r1, [r3, #0]
 8006afe:	2300      	movs	r3, #0
 8006b00:	6123      	str	r3, [r4, #16]
 8006b02:	4675      	mov	r5, lr
 8006b04:	e7b1      	b.n	8006a6a <_printf_i+0x126>
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	1d11      	adds	r1, r2, #4
 8006b0a:	6019      	str	r1, [r3, #0]
 8006b0c:	6815      	ldr	r5, [r2, #0]
 8006b0e:	6862      	ldr	r2, [r4, #4]
 8006b10:	2100      	movs	r1, #0
 8006b12:	4628      	mov	r0, r5
 8006b14:	f7f9 fb6c 	bl	80001f0 <memchr>
 8006b18:	b108      	cbz	r0, 8006b1e <_printf_i+0x1da>
 8006b1a:	1b40      	subs	r0, r0, r5
 8006b1c:	6060      	str	r0, [r4, #4]
 8006b1e:	6863      	ldr	r3, [r4, #4]
 8006b20:	6123      	str	r3, [r4, #16]
 8006b22:	2300      	movs	r3, #0
 8006b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b28:	e79f      	b.n	8006a6a <_printf_i+0x126>
 8006b2a:	6923      	ldr	r3, [r4, #16]
 8006b2c:	462a      	mov	r2, r5
 8006b2e:	4639      	mov	r1, r7
 8006b30:	4630      	mov	r0, r6
 8006b32:	47c0      	blx	r8
 8006b34:	3001      	adds	r0, #1
 8006b36:	d0a2      	beq.n	8006a7e <_printf_i+0x13a>
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	079b      	lsls	r3, r3, #30
 8006b3c:	d507      	bpl.n	8006b4e <_printf_i+0x20a>
 8006b3e:	2500      	movs	r5, #0
 8006b40:	f104 0919 	add.w	r9, r4, #25
 8006b44:	68e3      	ldr	r3, [r4, #12]
 8006b46:	9a03      	ldr	r2, [sp, #12]
 8006b48:	1a9b      	subs	r3, r3, r2
 8006b4a:	429d      	cmp	r5, r3
 8006b4c:	db05      	blt.n	8006b5a <_printf_i+0x216>
 8006b4e:	68e0      	ldr	r0, [r4, #12]
 8006b50:	9b03      	ldr	r3, [sp, #12]
 8006b52:	4298      	cmp	r0, r3
 8006b54:	bfb8      	it	lt
 8006b56:	4618      	movlt	r0, r3
 8006b58:	e793      	b.n	8006a82 <_printf_i+0x13e>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	464a      	mov	r2, r9
 8006b5e:	4639      	mov	r1, r7
 8006b60:	4630      	mov	r0, r6
 8006b62:	47c0      	blx	r8
 8006b64:	3001      	adds	r0, #1
 8006b66:	d08a      	beq.n	8006a7e <_printf_i+0x13a>
 8006b68:	3501      	adds	r5, #1
 8006b6a:	e7eb      	b.n	8006b44 <_printf_i+0x200>
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1a7      	bne.n	8006ac0 <_printf_i+0x17c>
 8006b70:	780b      	ldrb	r3, [r1, #0]
 8006b72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b7a:	e765      	b.n	8006a48 <_printf_i+0x104>
 8006b7c:	080078b2 	.word	0x080078b2
 8006b80:	080078a1 	.word	0x080078a1

08006b84 <_sbrk_r>:
 8006b84:	b538      	push	{r3, r4, r5, lr}
 8006b86:	4c06      	ldr	r4, [pc, #24]	; (8006ba0 <_sbrk_r+0x1c>)
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4605      	mov	r5, r0
 8006b8c:	4608      	mov	r0, r1
 8006b8e:	6023      	str	r3, [r4, #0]
 8006b90:	f7fe fd46 	bl	8005620 <_sbrk>
 8006b94:	1c43      	adds	r3, r0, #1
 8006b96:	d102      	bne.n	8006b9e <_sbrk_r+0x1a>
 8006b98:	6823      	ldr	r3, [r4, #0]
 8006b9a:	b103      	cbz	r3, 8006b9e <_sbrk_r+0x1a>
 8006b9c:	602b      	str	r3, [r5, #0]
 8006b9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ba0:	200007d0 	.word	0x200007d0

08006ba4 <__sread>:
 8006ba4:	b510      	push	{r4, lr}
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bac:	f000 f896 	bl	8006cdc <_read_r>
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	bfab      	itete	ge
 8006bb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bb6:	89a3      	ldrhlt	r3, [r4, #12]
 8006bb8:	181b      	addge	r3, r3, r0
 8006bba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bbe:	bfac      	ite	ge
 8006bc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bc2:	81a3      	strhlt	r3, [r4, #12]
 8006bc4:	bd10      	pop	{r4, pc}

08006bc6 <__swrite>:
 8006bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bca:	461f      	mov	r7, r3
 8006bcc:	898b      	ldrh	r3, [r1, #12]
 8006bce:	05db      	lsls	r3, r3, #23
 8006bd0:	4605      	mov	r5, r0
 8006bd2:	460c      	mov	r4, r1
 8006bd4:	4616      	mov	r6, r2
 8006bd6:	d505      	bpl.n	8006be4 <__swrite+0x1e>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be0:	f000 f868 	bl	8006cb4 <_lseek_r>
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bee:	81a3      	strh	r3, [r4, #12]
 8006bf0:	4632      	mov	r2, r6
 8006bf2:	463b      	mov	r3, r7
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfa:	f000 b817 	b.w	8006c2c <_write_r>

08006bfe <__sseek>:
 8006bfe:	b510      	push	{r4, lr}
 8006c00:	460c      	mov	r4, r1
 8006c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c06:	f000 f855 	bl	8006cb4 <_lseek_r>
 8006c0a:	1c43      	adds	r3, r0, #1
 8006c0c:	89a3      	ldrh	r3, [r4, #12]
 8006c0e:	bf15      	itete	ne
 8006c10:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c1a:	81a3      	strheq	r3, [r4, #12]
 8006c1c:	bf18      	it	ne
 8006c1e:	81a3      	strhne	r3, [r4, #12]
 8006c20:	bd10      	pop	{r4, pc}

08006c22 <__sclose>:
 8006c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c26:	f000 b813 	b.w	8006c50 <_close_r>
	...

08006c2c <_write_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	4c07      	ldr	r4, [pc, #28]	; (8006c4c <_write_r+0x20>)
 8006c30:	4605      	mov	r5, r0
 8006c32:	4608      	mov	r0, r1
 8006c34:	4611      	mov	r1, r2
 8006c36:	2200      	movs	r2, #0
 8006c38:	6022      	str	r2, [r4, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f7fe fcd4 	bl	80055e8 <_write>
 8006c40:	1c43      	adds	r3, r0, #1
 8006c42:	d102      	bne.n	8006c4a <_write_r+0x1e>
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	b103      	cbz	r3, 8006c4a <_write_r+0x1e>
 8006c48:	602b      	str	r3, [r5, #0]
 8006c4a:	bd38      	pop	{r3, r4, r5, pc}
 8006c4c:	200007d0 	.word	0x200007d0

08006c50 <_close_r>:
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	4c06      	ldr	r4, [pc, #24]	; (8006c6c <_close_r+0x1c>)
 8006c54:	2300      	movs	r3, #0
 8006c56:	4605      	mov	r5, r0
 8006c58:	4608      	mov	r0, r1
 8006c5a:	6023      	str	r3, [r4, #0]
 8006c5c:	f7fe fd0c 	bl	8005678 <_close>
 8006c60:	1c43      	adds	r3, r0, #1
 8006c62:	d102      	bne.n	8006c6a <_close_r+0x1a>
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	b103      	cbz	r3, 8006c6a <_close_r+0x1a>
 8006c68:	602b      	str	r3, [r5, #0]
 8006c6a:	bd38      	pop	{r3, r4, r5, pc}
 8006c6c:	200007d0 	.word	0x200007d0

08006c70 <_fstat_r>:
 8006c70:	b538      	push	{r3, r4, r5, lr}
 8006c72:	4c07      	ldr	r4, [pc, #28]	; (8006c90 <_fstat_r+0x20>)
 8006c74:	2300      	movs	r3, #0
 8006c76:	4605      	mov	r5, r0
 8006c78:	4608      	mov	r0, r1
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	6023      	str	r3, [r4, #0]
 8006c7e:	f7fe fd07 	bl	8005690 <_fstat>
 8006c82:	1c43      	adds	r3, r0, #1
 8006c84:	d102      	bne.n	8006c8c <_fstat_r+0x1c>
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	b103      	cbz	r3, 8006c8c <_fstat_r+0x1c>
 8006c8a:	602b      	str	r3, [r5, #0]
 8006c8c:	bd38      	pop	{r3, r4, r5, pc}
 8006c8e:	bf00      	nop
 8006c90:	200007d0 	.word	0x200007d0

08006c94 <_isatty_r>:
 8006c94:	b538      	push	{r3, r4, r5, lr}
 8006c96:	4c06      	ldr	r4, [pc, #24]	; (8006cb0 <_isatty_r+0x1c>)
 8006c98:	2300      	movs	r3, #0
 8006c9a:	4605      	mov	r5, r0
 8006c9c:	4608      	mov	r0, r1
 8006c9e:	6023      	str	r3, [r4, #0]
 8006ca0:	f7fe fd06 	bl	80056b0 <_isatty>
 8006ca4:	1c43      	adds	r3, r0, #1
 8006ca6:	d102      	bne.n	8006cae <_isatty_r+0x1a>
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	b103      	cbz	r3, 8006cae <_isatty_r+0x1a>
 8006cac:	602b      	str	r3, [r5, #0]
 8006cae:	bd38      	pop	{r3, r4, r5, pc}
 8006cb0:	200007d0 	.word	0x200007d0

08006cb4 <_lseek_r>:
 8006cb4:	b538      	push	{r3, r4, r5, lr}
 8006cb6:	4c07      	ldr	r4, [pc, #28]	; (8006cd4 <_lseek_r+0x20>)
 8006cb8:	4605      	mov	r5, r0
 8006cba:	4608      	mov	r0, r1
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	6022      	str	r2, [r4, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f7fe fcff 	bl	80056c6 <_lseek>
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d102      	bne.n	8006cd2 <_lseek_r+0x1e>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	b103      	cbz	r3, 8006cd2 <_lseek_r+0x1e>
 8006cd0:	602b      	str	r3, [r5, #0]
 8006cd2:	bd38      	pop	{r3, r4, r5, pc}
 8006cd4:	200007d0 	.word	0x200007d0

08006cd8 <__malloc_lock>:
 8006cd8:	4770      	bx	lr

08006cda <__malloc_unlock>:
 8006cda:	4770      	bx	lr

08006cdc <_read_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	4c07      	ldr	r4, [pc, #28]	; (8006cfc <_read_r+0x20>)
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	4608      	mov	r0, r1
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	6022      	str	r2, [r4, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	f7fe fc5f 	bl	80055ae <_read>
 8006cf0:	1c43      	adds	r3, r0, #1
 8006cf2:	d102      	bne.n	8006cfa <_read_r+0x1e>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	b103      	cbz	r3, 8006cfa <_read_r+0x1e>
 8006cf8:	602b      	str	r3, [r5, #0]
 8006cfa:	bd38      	pop	{r3, r4, r5, pc}
 8006cfc:	200007d0 	.word	0x200007d0

08006d00 <_init>:
 8006d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d02:	bf00      	nop
 8006d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d06:	bc08      	pop	{r3}
 8006d08:	469e      	mov	lr, r3
 8006d0a:	4770      	bx	lr

08006d0c <_fini>:
 8006d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0e:	bf00      	nop
 8006d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d12:	bc08      	pop	{r3}
 8006d14:	469e      	mov	lr, r3
 8006d16:	4770      	bx	lr
